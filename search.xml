<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Operating System(7)</title>
      <link href="/2020/04/21/cao-zuo-xi-tong-7/"/>
      <url>/2020/04/21/cao-zuo-xi-tong-7/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统–I-O设备管理"><a href="#操作系统–I-O设备管理" class="headerlink" title="操作系统–I/O设备管理"></a>操作系统–I/O设备管理</h1><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>计算机I/O子系统的组成</li><li>OS设备管理模块的结构</li><li>I/O缓冲技术</li><li>磁盘调度策略</li><li>RAID技术</li></ul><h3 id="I-O控制"><a href="#I-O控制" class="headerlink" title="I/O控制"></a>I/O控制</h3><p><strong>Categories of I/O Devices（设备分类）</strong></p><ul><li>Human readable</li><li>Machine readable</li><li>ommunication</li></ul><p><strong>Differences in I/O Devices(设备不同点)</strong></p><ul><li>Data Transfer Rate（数据传输速率）</li><li>Application（应用）</li><li>Complexity of Control（控制复杂性）</li><li>Data Transfer Unit（数据传输单位）</li><li>Data Representation（数据表示）</li><li>Error Conditions（错误条件）</li></ul><p><strong>Techniques for Performing I/O(I/O控制技术)</strong></p><ul><li>Programmed I/O（程序控制1/0）</li><li>Interrupt-Driven（中断驱动）</li><li>DMA Control（DMA控制）</li></ul><h4 id="程序控制Programmed-I-O"><a href="#程序控制Programmed-I-O" class="headerlink" title="程序控制Programmed I/O"></a>程序控制Programmed I/O</h4><ul><li>The processor issues an I/O command to an I/O module, IO module performs the I/O.（处理器向I/O模块发出I/O命令，IO模块执行I/O）</li><li>Sets appropriate bits in the I/O status register.（在I/O状态寄存器中设置适当的位）</li><li>No interrupts occur.（没有中断发生）</li><li>Processor checks status until operation is complete.（处理器检查状态，直到操作完成：这样会有忙等，cpu一直来查看I/O是否可用，浪费cpu资源）</li><li>Process is busy-waiting for the operation to complete.（进程正忙着等待操作完成）</li></ul><p><img src="https://s1.ax1x.com/2020/04/22/JY5PaR.png" alt="Programmed I/O,每次只读取一个字的单位，需要多次进行直到Done"></p><h4 id="Interrupt-Driven-I-O"><a href="#Interrupt-Driven-I-O" class="headerlink" title="Interrupt-Driven I/O"></a>Interrupt-Driven I/O</h4><ul><li>Processor is interrupted when I/O module ready to exchange data.（当I/O模块准备交换数据时，处理器中断。让处理器不再处理这个进程，转去处理其他进程）</li><li>Processor is free to do other work.（处理器可以自由地做其他工作，不需要在这里等待）</li><li>No needless waiting.（没有不必要的等待）</li><li>Consumes a lot of processor time because every word read or written passes through the processor.（由于每个读或写的单词都要经过处理器，因此会消耗大量处理器时间）</li></ul><p><img src="https://s1.ax1x.com/2020/04/22/JY5xYt.png" alt="Interrupt-dri ven I/O"></p><h4 id="Direct-Memory-Access-DMA"><a href="#Direct-Memory-Access-DMA" class="headerlink" title="Direct Memory Access(DMA)"></a>Direct Memory Access(DMA)</h4><ul><li>Transfers a block of data directly to or from memory.(直接向内存或从内存中传输数据块)</li><li>An interrupt is sent when the task is complete.(当任务完成时发送一个中断)</li><li>The processor is only involved at the beginning and end of the transfer.(处理器只在传输的开始和结束时参与)</li></ul><p><img src="https://s1.ax1x.com/2020/04/22/JYq74J.png" alt="Direct memory access"></p><ul><li>Takes control of the system from the CPU to transfer data to and from memory over the system bus.(从CPU控制系统，通过系统总线在内存之间传输数据)</li><li>Cycle stealing is used to transfer data on the system bus.(周期窃取用于在系统总线上传输数据)</li><li>The instruction eycle is suspended so data can be transferred.(指令环被挂起以便传输数据:只是小暂停。cpu不要用地址总线，DMA用，进行传数据)</li><li>The CPU pauses one bus eycle.（CPU暂停一个总线循环）</li><li>No interrupts occur（传输一组数据之间）<ul><li>Do not save context.</li></ul></li></ul><h4 id="DMA控制器的工作原理"><a href="#DMA控制器的工作原理" class="headerlink" title="DMA控制器的工作原理"></a>DMA控制器的工作原理</h4><ul><li>当CPU将一块数据从某1/0设备读入内存某处或把一块数据从内存某处写入某1/0设备时<ul><li>CPU将把相关数据块的长度通过DMA的”Data Lines”脚写入DMA的”Data Counr”寄存器</li><li>把内存起始地址和10设备地址通过DMA的”Data Lines”脚写入DMA的”Address Register”寄存器</li><li>通过DMA的”Read”脚或”Write”脚向DMA发出读或写命令</li></ul></li><li>DMA通过”DMA Request”脚和”DMA Acknowledge”脚控制相关的10设备</li><li>通过“Data Lines”脚与10设备以及内存交换数据</li><li>通过“Address L.ines”脚寻址内存</li><li>工作完毕，DAM将通过“Interrupt”脚向CPU发出中断，CPU对本次数据传输进行善后处理。</li></ul><h4 id="Evolution-of-the-I-O-Function（I-O功能的演变）"><a href="#Evolution-of-the-I-O-Function（I-O功能的演变）" class="headerlink" title="Evolution of the I/O Function（I/O功能的演变）"></a>Evolution of the I/O Function（I/O功能的演变）</h4><ul><li>Processor directly controls a peripheral device.（处理器直接控制外部设备）</li><li>Controller or I/O module is added <ul><li>Processor uses programmed I0 without interrupts.</li><li>Processor does not need to handle details of external devices.</li></ul></li><li>Controller or I/0 module with interrupts<ul><li>Processor does not spend time waiting for an IO operation to be performed.</li></ul></li><li>Direct Memory Access <ul><li>Blocks of data are moved into memory without involving the processor.</li><li>Processor involved at beginning and end only.</li></ul></li><li>I/O module is a separate processor: I/O channel.</li><li>I/O processor<ul><li>I/O module has its own local memory.</li><li>It’s a computer in its own right.</li></ul></li></ul><h3 id="设备管理模块子系统"><a href="#设备管理模块子系统" class="headerlink" title="设备管理模块子系统"></a>设备管理模块子系统</h3><h4 id="Operating-System-Design-Issues"><a href="#Operating-System-Design-Issues" class="headerlink" title="Operating System Design Issues"></a>Operating System Design Issues</h4><ul><li>Efficiency <ul><li>Most I/O devices extremely slow compared to main memory.（与主存相比，大多数I/O设备的效率非常低）</li><li>Use of multiprogramming allows for some processes to be waiting on I/O while another process executes.（使用多道程序设计允许一些进程在另一个进程执行时等待I/O）</li><li>I/O cannot keep up with processor speed.（I/O跟不上处理器的速度）</li><li>Swapping is used to bring in additional Ready processes which is an I/O operation.（交换用于引入额外的就绪进程，这是一个I/O操作。）</li></ul></li><li>Generality （通用性）<ul><li>Desirable to handle all IO devices in a uniform manner.（希望以统一的方式处理所有IO设备）</li><li>Hide most of the details of device I/O in <code>lower-level(驱动程序)</code> routines so that processes andupper levels see devices in general terms such as read, write, open, close, lock, unlock.（在较低级的例程中隐藏设备IO的大部分细节，以便进程和程序级能够看到设备的一般情况，如读、写、打开、关闭、锁定和解锁）</li></ul></li></ul><blockquote><p>外部设备首要考虑效率</p></blockquote><h4 id="Device-Independence（设备无关性）"><a href="#Device-Independence（设备无关性）" class="headerlink" title="Device Independence（设备无关性）"></a>Device Independence（设备无关性）</h4><p>即，应用软件所引用的用于实现I/O操作的设备与计算机I/O子系统中实际安装的设备没有固定的联系。</p><p><strong>Logical I/O Device（逻辑I/O设备）</strong><br>应用软件引用的用于实现1/0操作的设备。</p><ul><li>从应用软件的角度看，逻辑1/0设备是一类具有相同或相似属性的物理1/0设备的抽象。</li></ul><p><strong>逻辑1/0设备的分类</strong></p><ul><li>字符设备（键盘、鼠标）<ul><li>也叫面向流的设备（Stream-Oriented Device）；</li><li>应用软件以字符为单位读写此类逻辑I/O设备.</li></ul></li><li>块设备（磁盘）<ul><li>也叫面向块的设备（Block-Ooriented Device）；</li><li>应用软件以块为单位读写此类逻辑I/O设备。</li></ul></li></ul><h4 id="OS设备管理模块的分层结构"><a href="#OS设备管理模块的分层结构" class="headerlink" title="OS设备管理模块的分层结构"></a>OS设备管理模块的分层结构</h4><ul><li>为了实现“通用性”这一设计目标，大多数OS的设备管理模块采用分层结构。</li><li>典型的两层结构：<ul><li>设备硬件无关层，实现设备映射功能，把逻辑I/O设备映射到物理I/O设备</li><li>设备硬件相关层，实现设备驱动功能，控制物理I/O设备以便完成实际的I/O操作（驱动程序来完成）</li></ul></li></ul><h3 id="I-O-Buffering（I-O缓冲技术）"><a href="#I-O-Buffering（I-O缓冲技术）" class="headerlink" title="I/O Buffering（I/O缓冲技术）"></a>I/O Buffering（I/O缓冲技术）</h3><blockquote><p>没有I/O缓存不仅会造成系统效率低，还可能造成单进程死锁</p></blockquote><h4 id="提高用户进程运行效率的方法"><a href="#提高用户进程运行效率的方法" class="headerlink" title="提高用户进程运行效率的方法"></a>提高用户进程运行效率的方法</h4><p>许多OS通过引入<strong><em>I/O Buffering</em></strong>来提高用户进程的运行效率、缩短其周转时间。<br><strong>I/O Buffering</strong></p><ul><li>核心思想：在<code>内存中</code>建立I/O缓冲区</li><li>缓存从输入设备流入内存的数据</li><li>缓存从内存流向输出设备的数据</li><li>Block-oriented(面向块)<ul><li>Information is stored in fixed sized blocks(信息存储在固定大小的块中)</li><li>Transfers are made a block at a time(传输一次完成一个块)</li><li>Used for disks and tapes(用于磁盘和磁带)</li></ul></li><li>Stream-oriented （面向流）<ul><li>Trarisfer information as a stream of bytes（将信息以字节流的形式转移）</li><li>byte：每个buffer缓存一个字符（字节），键盘输入等</li><li>line：每个buffer缓存一个字符串或长度可变的多个字节，用于显示输出、打印输出等</li></ul></li></ul><h4 id="Read-Ahead-and-Write-Postponing-提前读，延后写"><a href="#Read-Ahead-and-Write-Postponing-提前读，延后写" class="headerlink" title="Read Ahead and Write Postponing(提前读，延后写)"></a>Read Ahead and Write Postponing(提前读，延后写)</h4><ul><li>Read Ahead（提前读）<ul><li>用户进程从I/O缓冲区取走前一个数据后立即发出对下一个数据的输入请求；OS将在适当的时候响应该请求，把需要的数据读入I/O缓冲区.（<strong><em>这两者是并行的</em></strong>）</li></ul></li><li>Write Postponing（延后写）<ul><li>当用户进程请求输出数据时，Os将很快把用户进程请求输出的数据从用户进程的工作区取走，将其暂存在I/O缓冲区中；直到用户进程指定的输出设备空闲时，OS才把暂存在I/O缓冲区中的数据写入用户进程指定的输出设备上.</li><li>需要考虑安全问题、延长多长时间……</li></ul></li></ul><h4 id="具体技术"><a href="#具体技术" class="headerlink" title="具体技术"></a>具体技术</h4><ul><li>Single Buffer（单缓冲区）</li><li>Double Buffer（双缓冲区）</li><li>Circular Buffer（循环缓冲区）</li></ul><h4 id="Single-Buffer（单缓冲区）"><a href="#Single-Buffer（单缓冲区）" class="headerlink" title="Single Buffer（单缓冲区）"></a>Single Buffer（单缓冲区）</h4><ul><li>Operating system assigns a buffer in main memory for an I/O request.（操作系统在主存中为I/O请求分配一个缓冲区）</li><li>Block-oriented<ul><li>Input transfers made to buffer Block moved to user space when needed（当需要时，将向缓冲区块的输入传输移动到用户空间）</li><li>Another block is moved into the buffer （另一个块被移到缓冲区中）<ul><li>Read ahead</li></ul></li><li>User process can process one block of data while next block is read in.（用户进程可以处理一个数据块，同时读入下一个数据块）</li><li>Swapping can occur since input is takingplace in system memory, not user memory.（交换可以发生，因为输入是发生在系统内存，而不是用户内存）</li><li>Operating system keeps track of assignment of system buffers to user processes.（操作系统跟踪系统缓冲区分配给用户进程的情况）</li></ul></li><li>Stream-oriented <ul><li>Used a line at time.（一次一行）</li><li>User input from a terminal is one line at atime with carriage return signaling the end of the line.（来自终端的用户输入是一行，在时间轴上用回车表示行结束）</li><li>Output to the terminal is one line at a time.（终端的输出是一行一行的）</li></ul></li></ul><p><strong>效率是否提高</strong>（在单缓冲区下，非同一块数据,T和C可以并行）</p><ul><li>若一块数据从外部设备输入到内存所花费的时间为T，在内存中移动所花费的时间为M，被用户进程加工处理所花费的时间为C，则<ul><li>在没有使用I/O缓冲区的情况下，平均每块数据的处理时间近似为：<strong><em>T+C</em></strong></li><li>在使用单I/O缓冲区的情况下，平均每块数据的处理时间近似为：<strong><em>max（T，C）+M</em></strong></li></ul></li><li>可见，相对于没有使用I/O缓冲区的情形，引入单I/O缓冲区后，用户进程的运行效率得到了提高</li><li>然而，如果用户进程在对有关数据进行加工处理时并不释放I/O缓冲区，那么用户进程的性能并不能得到改善。</li><li>此外，如果T远远大于C，即外部设备的I/O速度比用户进程的计算速度慢得多，那么即使引入单I/O缓冲区，用户进程的性能也几乎没有得到改善.</li></ul><h4 id="Double-Buffer（双缓冲区）"><a href="#Double-Buffer（双缓冲区）" class="headerlink" title="Double Buffer（双缓冲区）"></a>Double Buffer（双缓冲区）</h4><ul><li>Use two system buffers instead of one.（使用两个系统buffer）</li><li>A process can transfer data to or from one buffer while the operating system empties or fills the other buffer.（两个缓冲区交替使用）</li><li>外部设备和应用进程常常交替引用Double Buffer</li><li>Double Buffer也称为Buffer Swapping（缓冲交换）</li></ul><h4 id="Single-Buffer-vs-Double-Buffer"><a href="#Single-Buffer-vs-Double-Buffer" class="headerlink" title="Single Buffer vs Double Buffer"></a>Single Buffer vs Double Buffer</h4><ul><li>使用双I/O缓冲区，即使用户进程在对有关数据进行加工处理时不释放相关的1/0缓冲区，用户进程的性能也能得到改善。</li><li>与单I/O缓冲区类似，如果T远远大于C，即外部设备的I/O速度比用户进程的计算速度慢得多，那么即使引入双I/O缓冲区，用户进程的性能也几乎没有得到改善。</li><li>缓和外部设备的I/O速度与用户进程的计算速度不匹配的一种有效的办法是，在外部设备和用户进程之间设立多个I/O缓冲区。</li></ul><h4 id="Circular-Buffer（循环缓冲区）"><a href="#Circular-Buffer（循环缓冲区）" class="headerlink" title="Circular Buffer（循环缓冲区）"></a>Circular Buffer（循环缓冲区）</h4><ul><li>More than two buffers are used.（两个以上的缓冲区数）</li><li>Each individual buffer is one unit in a circular buffer.（每个单独的缓冲区是一个循环缓冲区中的一个单元）</li><li>Used when I/O operation must keep up with process.（当I/O操作必须跟上进程时使用）</li></ul><h3 id="DiskCache介绍（磁盘缓存：在内存里面-应该是buffer的一种）"><a href="#DiskCache介绍（磁盘缓存：在内存里面-应该是buffer的一种）" class="headerlink" title="DiskCache介绍（磁盘缓存：在内存里面,,应该是buffer的一种）"></a>DiskCache介绍（磁盘缓存：在内存里面,,应该是buffer的一种）</h3><ul><li>Buffer in main memory for disk sectors，不是一种硬件设施</li><li>Contains a copy of some of the sectors on the disk.（包含磁盘上某些扇区的副本）</li><li>其组织形式基于程序引用的局部性原理</li></ul><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li>当用户进程请求从磁盘读入一个扇区时，系统首先在disk eache中寻找该扇区的副本<ul><li>如果能够找到，那么系统将从disk cache中取出该扇区的副本并返给用户进程；</li></ul><ul><li>否则，系统首先从碰盘上读入该扇区并在disk eache中为其建立一个副本，然后将该副本运给用户进程</li></ul></li><li>当用户进程请求向磁盘上写出一个扇区时，系统同样首先在disk cache中寻找该扇区的副本<ul><li>如果能够找到，那么系统将根据用户进程的请求修改该扇区的副本；</li><li>否则，系统同样首先从碰盘上读入该扇区并在disk cache中为其建立一个副本，然后根据用户进程的请求修改该副本.（为什么还要从扇区读进来）</li></ul></li></ul><h4 id="磁盘高速缓存的数据安全性"><a href="#磁盘高速缓存的数据安全性" class="headerlink" title="磁盘高速缓存的数据安全性"></a>磁盘高速缓存的数据安全性</h4><ul><li>Disk Cache中的数据写出到磁盘：<ol><li>在系统空闲或需要淘汰被写的缓存空间时进行写。</li><li>周期性地进行写。</li><li>立即写回，称为“写穿透高速缓存”，相当于只有读缓存而没有写缓存。</li></ol></li></ul><h4 id="向用户进程提交扇区副本的方法"><a href="#向用户进程提交扇区副本的方法" class="headerlink" title="向用户进程提交扇区副本的方法**"></a>向用户进程提交扇区副本的方法**</h4><ul><li>如果系统不允许用户进程访问disk cache，那么系统将把用户进程需要的扇区从disk cache中复制到用户进程的工作区。</li><li>如果系统允许用户进程访问disk cache，那么系统将把用户进程需要的扇区副本在disk eache中的位置指针传递给用户进程。</li></ul><h4 id="扇区置换算法"><a href="#扇区置换算法" class="headerlink" title="扇区置换算法"></a>扇区置换算法</h4><ul><li>Least Recently Used（LRU置换算法）<ul><li>The block that has been in the cache the longest with no reference to it is replaced（最长时间没有被使用的被置换出去）</li></ul></li><li>Least Frequently Used（LFU置换算法）<ul><li>The block that has experienced the fewest references is replaced（被引用次数最少的块被替换）</li></ul></li></ul><p><strong>Least Recently Used</strong></p><ul><li>The cache consists of a stack of blocks.（扇区按照堆栈的方式来组织。？？？？为什么不用队列）</li><li>Most recently referenced block is on the top of the stack.（最近使用的块放置在栈顶）</li><li>When a block is referenced or brought into the cache, it is placed on the top of the stack.（当一个块被引用或放入缓存时，它被放在堆栈的顶部）</li><li>The block on the bottom of the stack isremoved when a new block is brought in.（）</li><li>Blocks don’t actually move around in main memory.</li></ul><p><strong>Least Frequently Used</strong></p><ul><li>A counter is associated with each block.（每个块有个计数器）</li><li>Counter is incremented each time block accessed.（计数器在每次访问块时递增）</li><li>Block with smallest count is selected for replacement(计数最小的被换出去)</li><li>Some blocks may be referenced many times in a short period of time and then not needed any more.（有些块可能在短时间内被多次引用，然后就不再需要了）</li></ul><p><strong>Frequency-Based Replacement Algorithm（基于频率的置换算法）</strong></p><ul><li>系统把dik cache中的所有扇区组成一个栈：住于栈项的扇区最近才被访问过；而位于栈底的扇区最久没有被访问过.</li><li>系统从中间某个位置把disk cache中的栈分成两个部分：靠近栈项的部分称为New Section，靠近栈底的部分称为Old Section.</li><li>系统为disk cache中的每个扇区设置一个引用计数器</li><li>当系统从磁盘上把一个新扇区读入disk cache中时，把该扇区放在disk cache的栈顶，并把该扇区的引用计数器置1.</li><li>当disk eache中的某个扇区被用户进程访问时，系统将把该扇区从其原来的位置移到disk cache的栈顶，同时判断该扇区原来是否位于栈的New Section：若是，该扇区的引用计数器的值保持不变；否则，该扇区的引用计数器的值被加1.</li><li>当需要从disk cache中选择一个被置换扇区时，系统将从位于栈的Old Section中的所有扇区中选择引用计数器值最小的那个扇区。</li><li>如果位于栈的Old Section中的所有扇区其引用计数器的值均相等，那么系统将选择位于disk cache底的那个扇区。</li></ul><p><img src="https://s1.ax1x.com/2020/04/22/JUGuFI.png" alt="Frequency-Based Replacement Algorithm"></p><p><strong>基于频率置换算法的不足</strong></p><ul><li>一个新的扇区被读入disk cache时，它将被置于楼的New Section中，其引用计数器被置1.</li><li>只要该扇区不离开New Section，它的引用计数器的值就一直保持为1.</li><li>当该扇区最终离开New Section时，它的引用计数器的值仍然为1</li><li>如果此时该扇区不能在系统进行扇区置换之前很快地被用户进程引用，那么该扇区很可能被置接出去.</li><li>这意味着，一个在离开New Section时不能很快被引用的扇区（即使是一个经常被引用的扇区）根本没有机会增加自己的引用计数</li><li>显然，这对一个经常被引用但在离开New Section时不能很快被引用的扇区是不合理的.</li></ul><p><strong>基于频率置换算法的改进</strong></p><ul><li>把disk cache中的栈分成三个部分<ul><li>New Section</li><li>Middle Section</li><li>Old Section</li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/04/22/JUGTne.png" alt="Use of Three Sections"></p><h4 id="spooing技术-掌握这种思想"><a href="#spooing技术-掌握这种思想" class="headerlink" title="spooing技术(掌握这种思想)"></a>spooing技术(掌握这种思想)</h4><ul><li>核心思想是：在<strong><em>快速辅助存储设备中</em></strong>建立I/O缓冲区，用于缓存从慢速输入设备流入内存的数据，或缓存从内存流向慢速输出设备的数据。</li></ul><p><img src="https://s1.ax1x.com/2020/04/22/JUJv5R.png" alt="SPOOLing技术实现原理示意图"></p><h3 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h3><h4 id="Disk-I-O（磁盘I-O）"><a href="#Disk-I-O（磁盘I-O）" class="headerlink" title="Disk I/O（磁盘I/O）"></a>Disk I/O（磁盘I/O）</h4><ul><li>大容量磁盘<ul><li>每条磁道上都有一个读/写磁头，可以并行读/写</li></ul></li><li>中小型磁盘设备<ul><li>每个盘面配置一个磁头，只能串行读/写</li><li>为了读/写某磁道、某扇区的数据，首先让磁头伸/缩，寻找指定磁道，再旋转磁盘，将相应扇区定位到磁头下面</li></ul></li></ul><h4 id="Disk-Performance-Parameters（磁盘性能参数）"><a href="#Disk-Performance-Parameters（磁盘性能参数）" class="headerlink" title="Disk Performance Parameters（磁盘性能参数）"></a>Disk Performance Parameters（磁盘性能参数）</h4><ul><li>To read or write，the disk head must be positioned atthe desired track and at the beginning of the desired sector.（要读取或写入，磁头必须定位在所需的磁道和所需扇区的起始位置）<ul><li>Seek time（寻道时间）.</li><li>Rotational delay or rotational latency（旋转延迟）.</li><li>Access time（访问时间），sum of seek time and rotational delay，the time it takes to get in position to read or write.</li><li>Data transfer，occurs as the sector moves under the head.</li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/04/23/JatDMV.png" alt="Timing of a Disk I/O Transfer"></p><h4 id="Seek-Time-寻道时间"><a href="#Seek-Time-寻道时间" class="headerlink" title="Seek Time(寻道时间)"></a>Seek Time(寻道时间)</h4><ul><li>Time it takes to position the head at the desired track.（将磁头放置在所需轨道上所需要的时间）</li><li>假设<ul><li>Ts为寻道时间，</li><li>s为磁盘启动时间，</li><li>m为与磁臂移动速度相关的常数，</li><li>n为当前磁道到指定磁道的距离（即磁臂移动所经过的磁道数）</li></ul></li><li>那么，Ts=m*n+s</li></ul><h4 id="Rotational-Delay（旋转时间）"><a href="#Rotational-Delay（旋转时间）" class="headerlink" title="Rotational Delay（旋转时间）"></a>Rotational Delay（旋转时间）</h4><ul><li>Time it takes for the beginning of the sector to reach the head.（从扇形开始一直到头部）</li><li>假设<ul><li>Tr为旋转延迟，r为磁盘转速（转数/单位时间）</li></ul></li><li>那么Tr = 1/（2r）</li><li>例：<ol><li>对于一个转速为3600rpm的硬盘而言，其每晚特一周的时间为16.7ms，其平均旋转延迟为8.3ms.</li><li>对于一个转速为300rpm的软盘而言，其每旋特一周的时间为200ms，其平均旋转延迟为100ms.</li></ol></li></ul><h4 id="Transfer-Time-传输时间"><a href="#Transfer-Time-传输时间" class="headerlink" title="Transfer Time(传输时间)"></a>Transfer Time(传输时间)</h4><ul><li>传输时间，指从磁盘上读数据或向磁盘上写数据所花费的时间</li><li>假设<ul><li>T为传输时间，</li><li>b为传输的字节数，</li><li>N 为每个磁道上存放的字节数，</li><li>r为磁盘转速（转数/单位时间）</li></ul></li><li>那么T = b/（г*N）</li></ul><h4 id="Total-Average-Access-Time-总平均存取时间"><a href="#Total-Average-Access-Time-总平均存取时间" class="headerlink" title="Total Average Access Time(总平均存取时间)"></a>Total Average Access Time(总平均存取时间)</h4><p><strong>Ta=Ts+Tr+T</strong></p><blockquote><p>当系统访问一组磁盘扇区时，如果能够减少总的寻道时间和总的旋转延迟，那么系统的访问效率将得到提高。</p></blockquote><h3 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h3><h4 id="Disk-Scheduling-Policies"><a href="#Disk-Scheduling-Policies" class="headerlink" title="Disk Scheduling Policies"></a>Disk Scheduling Policies</h4><ul><li>For a single disk there will be a number of I/O requests.（对于单个磁盘，将有许多I/O请求）</li><li>If requests are selected randomly, we will get the worst possible performance.（如果请求是随机选择的，我们将得到最差的性能）</li></ul><h4 id="基于请求者属性的磁盘调度策略"><a href="#基于请求者属性的磁盘调度策略" class="headerlink" title="基于请求者属性的磁盘调度策略"></a>基于请求者属性的磁盘调度策略</h4><ul><li>Random Scheduling Strategy（RSs，随机调度策略）<ul><li>随机地满足各个进程对磁盘的读写请求</li><li>该策略性能最差。可用作评估其它磁盘调度策</li></ul></li><li>First In First Out Strategy（FIFO，先进先出策略）<ul><li>Process request sequentially.</li><li>Fair to all processes.</li><li>Approaches random scheduling in performance if there are many processes.</li></ul></li><li>Priority-Based Strategy（PRI，基于优先级策略）<ul><li>Goal is not to optimize disk use but to meet other objectives.</li><li>Short batch jobs may have higher priority.</li><li>Provide good interactive response time.</li></ul></li><li>Last In First Out Strategy（LIFO，后进先出策略）<ul><li>Good for transaction processing systems.（适用于事务处理系统。）</li><li>The device is given to the most recent user so there should be little arm movement.</li><li>Possibility of starvation since a job may never regain the head of the line.</li></ul></li></ul><h4 id="基于被请求扇区位置的磁盘调度策略"><a href="#基于被请求扇区位置的磁盘调度策略" class="headerlink" title="基于被请求扇区位置的磁盘调度策略"></a>基于被请求扇区位置的磁盘调度策略</h4><ul><li>SSTF算法</li><li>SCAN算法</li><li>C-SCAN算法</li><li>N-step-SCAN算法</li><li>FSCAN算法</li></ul><h4 id="Shortest-Service-Time-First（最短寻道时间优先）"><a href="#Shortest-Service-Time-First（最短寻道时间优先）" class="headerlink" title="Shortest Service Time First（最短寻道时间优先）"></a>Shortest Service Time First（最短寻道时间优先）</h4><ul><li>Select the disk IO request that requires the least movement of the disk arm from its current position.（选择需要从当前位置最少移动磁盘臂的磁盘I/O请求）</li><li>Always choose the minimum Seek time.</li><li>保证在满足两次磁盘读写请求之间磁头移动距离最小，但并不保证在满足一组磁盘读写请求时总的碰头移动距离最小</li><li>该算法的性能比FIFO策略的性能好</li><li>当不断有新的磁盘读写请求被提交时，该算法可能会导致饿死现象。</li></ul><h4 id="SCAN（扫描算法、电梯调度法）"><a href="#SCAN（扫描算法、电梯调度法）" class="headerlink" title="SCAN（扫描算法、电梯调度法）"></a>SCAN（扫描算法、电梯调度法）</h4><ul><li>Arm moves in one direction only, satisfying all outstanding requests until it reaches the last track in that direction.（磁盘臂只向一个方向移动，满足所有未完成的请求，直到它到达该方向的最后一个磁道）</li><li>Direction is reversed.（这个方向的完成之后就会掉头）</li><li>该算法的性能与SSTF算法的性能非常接近；但与SSTF算法相比，该算法避免了饿死现象</li><li>如果当磁头刚刚从靠近磁盘某边的某个磁道上移过并向磁盘另一边移动时，恰好有一个进程请求访问该磁道，那么该请求将被严重推迟。</li></ul><h4 id="C-SCAN（单向扫描算法）"><a href="#C-SCAN（单向扫描算法）" class="headerlink" title="C-SCAN（单向扫描算法）"></a>C-SCAN（单向扫描算法）</h4><ul><li>Restricts scanning to one direction only（限制只扫描一个方向。这个方向完成之后只要重新在开头继续扫描下来）</li><li>When the last track has been visited in one direction, the arm is returned to the opposite end of the disk and the scan begins again.（当最后一个磁道在一个方向上被访问，手臂被返回到磁盘的另一端，扫描再次开始）</li><li>如果当磁头刚刚从靠近磁盘某边的某个磁道上移过并向磁盘另一边移动时，恰好有一个进程请求访问该雄道，那么该请求将被延迟：<ul><li>RSCAN算法：2T</li><li>使用C-SCAN算法：T+Smax</li></ul></li><li>其中，T为磁头从磁盘的一边扫描到另一边所花费的时间，Smax为磁头从磁盘的一边直接返回另一边所花费的时间；通常，T&gt; &gt;Simax.</li></ul><h4 id="N-step-SCAN"><a href="#N-step-SCAN" class="headerlink" title="N-step-SCAN"></a>N-step-SCAN</h4><ul><li>基于各个硅盘读写请求的提交次序把所有硅盘读写请求组织在若干队列中；其中，每个队列包含N个雅盘读写请求；</li><li>如果存在一个长度小于N的硅盘读写请求队列，那么当一个新的磁盘读写请求到达时系统将把它加入到该队列中；</li><li>如果不存在一个长度小于N的硅盘读写请求队列，那么当一个新的磁盘读写请求到达时系统将为其建立一个新的队列；</li><li>系统将使用FTFO策略依次处理每个硅盘读写请求队列；</li><li>系统将使用SCAN算法处理每个队列中的硅盘读写请求。</li><li>该算法避免了“磁臂粘着（Arm Stickiness）”现象.(一直在同一个位置徘徊)</li></ul><h4 id="FSCAN"><a href="#FSCAN" class="headerlink" title="FSCAN"></a>FSCAN</h4><ul><li>Two queues,one queue is empty for new request</li><li>当前所有磁盘读写请求被组织在第一个队列中；系统将使用SCAN算法处理该队列中的磁盘读写请求；</li><li>在系统处理第一个队列中的磁盘读写请求时，如果有新的磁盘读写请求到达，那么新的磁盘读写请求将被组织在第二个队列中；</li><li>一旦第一个队列中的磁盘读写请求被处理完毕，系统便转向第二个队列以便使用SCAN算法处理其中的磁盘读写请求；</li><li>上述第二步和第三步将被系統重复使用。</li></ul><h3 id="磁盘容错技术"><a href="#磁盘容错技术" class="headerlink" title="磁盘容错技术"></a>磁盘容错技术</h3><ul><li>保证磁盘数据的<strong><em>可靠性</em></strong>。</li><li>磁盘容错技术<ul><li>通过在系统中设置<strong><em>冗余部件</em></strong>来提高系统可靠性。</li><li>冗余部件包括增加冗余的磁盘驱动器、磁盘控制器等，使得当磁盘系统某部分出现缺陷或故障时，磁盘仍能正常工作，且不至于造成数据的错误和丢失.</li></ul></li></ul><h4 id="磁盘容错技术级别"><a href="#磁盘容错技术级别" class="headerlink" title="磁盘容错技术级别"></a>磁盘容错技术级别</h4><ul><li>也称为系统容错技术（SFT，System Fault Tolerance），大体分为三个级别：<ol><li>SFT-1低级磁盘容错技术，主要防止磁盘表面介质缺陷所引起的数据丢失；（还是一个盘，但是在这个盘上的重要数据有备份）</li><li>SFT-II中级磁盘容错技术，主要防止磁盘驱动器和磁盘控制器故障所引起的数据丢失；（不仅盘有备份，驱动器和控制器都有备份）</li><li>SFT-I1高级系统容错技术，常使用双服务器，以保证在其中一台服务器出现故障，甚至停止工作时，整个系统仍能照常运作.</li></ol></li></ul><h4 id="第一级容错技术"><a href="#第一级容错技术" class="headerlink" title="第一级容错技术"></a>第一级容错技术</h4><ul><li>最早出现、最基本的容错技术，包括：<ul><li>双份目录和双份文件分配表<ul><li>可在不同的磁盘上或同一磁盘的不同区域中，分别建立维护两份文件目录和FAT.</li><li>当其中一个目录或FAT损坏时，系统便自动启用另一个目录和FAT，同时在磁盘的其它区域再建立新的文件目录和FAT.</li><li>每当系统重新启动时，都要对这两份目录和FAT进行检查，以保证它们的一致性。</li></ul></li></ul></li></ul><h4 id="热修复重定向和写后读校验"><a href="#热修复重定向和写后读校验" class="headerlink" title="热修复重定向和写后读校验"></a>热修复重定向和写后读校验</h4><ul><li>热修复重定向<ul><li>系统将一定的磁建容量作为热修复重定向区，围于存放当发现磁盘块有缺陷时的待写数据，并对写入该区的所有数据进行登记，以便于以后对此数据进行问.</li></ul></li><li>写后读校验<ul><li>每次将数据写到磁盘以后，立即从磁盘上读出该块数据，，并进行对比.若写入的数据与读出的数据一致，则表示写入成功；否则，重写数据.若重写后两者仍不一致，则认为该磁盘块有缺陷，便将该块标识为坏块，相应数据写入热修复重定向区中.</li></ul></li></ul><h4 id="第二级容错技术SFT-II"><a href="#第二级容错技术SFT-II" class="headerlink" title="第二级容错技术SFT-II"></a>第二级容错技术SFT-II</h4><ul><li>用于防止磁盘驱动器或磁盘控制器发生故障。包括：<ul><li>磁盘镜像<ul><li>在同一磁盘控制器上，连接两个完全相同的磁盘驱动器。同一数据被先后写到两个驱动器上</li></ul></li><li>磁盘双工<ul><li>将两台完全相同的磁盘驱动器连接到两个磁盘控制器上。数据被同时写到两个磁盘上.</li></ul></li></ul></li></ul><h4 id="磁盘双工vs磁盘镜像"><a href="#磁盘双工vs磁盘镜像" class="headerlink" title="磁盘双工vs磁盘镜像"></a>磁盘双工vs磁盘镜像</h4><ul><li>磁盘双工的成本较高；</li><li>可靠性更高；</li><li>对两个磁盘的写入是并行进行，速度较快；</li><li>在某些实现中读数据时，还可使用分离查找技术，从响应快的通道上取得数据，加快读取速度。</li></ul><h3 id="磁盘阵列RAID技术"><a href="#磁盘阵列RAID技术" class="headerlink" title="磁盘阵列RAID技术"></a>磁盘阵列RAID技术</h3><ul><li>RAID磁盘阵列技术能以较低的成本，提供大容量、快速、安全可靠的磁盘存储系统。</li><li>从容错的角度讲，RAID技术应属第二级容错技术，但其内涵远远不止容错。</li></ul><blockquote><p>从早期Redundant Array of Inexpensive Disks（廉价磁盘的冗余阵列）到Redundant Array of Independent Disks（独立磁盘的冗余阵列）</p></blockquote><h4 id="RAID的基本特征"><a href="#RAID的基本特征" class="headerlink" title="RAID的基本特征"></a>RAID的基本特征</h4><ul><li>RAID由两部分构成：碰盘阵列（一组可并行工作的硅盘），及碰盘阵列管理软件</li><li>磁盘阵列管理软件把逻辑上连续的一组数据<strong><em>交叉分布存储</em></strong>在磁盘阵列中的各个磁盘上，好处：磁盘阵列管理软件可以<strong>并行处理</strong>对一组数据中的单个或多个数据的存取请求.</li><li>碰盘阵列管理软件还负责存储相关的校验信息，好处：当硅盘阵列中的某个硅盘发生故障时，磁盘阵列管理软件可以恢复存储在该碰盘上的数据.</li><li>磁盘阵列管理软件屏蔽了雅盘阵列的物理细节，使OS的其它成份不知道磁盘阵列的存在；在它们看来，系统中存在一个大容量的逻辑璀盘。</li></ul><h4 id="条带Strip的粒度"><a href="#条带Strip的粒度" class="headerlink" title="条带Strip的粒度"></a>条带Strip的粒度</h4><ul><li>条带可以是细柱度的（如一个字节或字），也可以是粗柱度的（如一个扇区或多个扇区）.</li><li>若采用细粒度条带（每个磁盘都有这个进程的数据，一个请求，所有的磁盘都要动，其他进程的请求来的时候无法响应），几乎每个存取请求都会导致同时存取RAID中的所有磁盘，使得无法同时响应多个存取请求。因此，细柱度的条带只利于对单个存取请求进行并行处理</li><li>若采用粗粒度条带，不会使每个存取请求都同时存取RAID中的所有磁盘；但，多个独立的存取请求通常会导致同时存取RAID中的所有磁盘。显然，粗粒度的条带只利于对多个独立的存取请求进行并行处理</li><li>磁盘阵列管理软件在存储数据的同时还将存储相关的校验信息；</li><li>使得当磁盘阵列中的某个磁盘发生故障时，磁盘阵列管理软件可以恢复存储在该磁盘上的数据。</li></ul><h4 id="RAID中的数据校验方式"><a href="#RAID中的数据校验方式" class="headerlink" title="RAID中的数据校验方式"></a>RAID中的数据校验方式</h4><ul><li>对数据进行镜像存储，</li><li>对数据进行Hamming编码</li><li>存储数据的奇偶校验信息</li></ul><h4 id="RAID中奇偶校验信息的存储布局"><a href="#RAID中奇偶校验信息的存储布局" class="headerlink" title="RAID中奇偶校验信息的存储布局"></a>RAID中奇偶校验信息的存储布局</h4><ul><li>用一组专用磁盘存储奇偶校验信息</li><li>把奇偶校验信息分布存储在各个磁盘上</li><li>如果磁盘阵列管理软件在主机系统中执行，则属软件实现的RAID；如果磁盘阵列管理软件在磁盘子系统中执行，则属硬件实现的RAID，相应的硬件称为RAID控制器或RAID卡.</li><li>采用RAID控制器方案的成本较高，但其效率高，不增加主机负担。此类RAID技术对主机完全透明，在主机看来，RAID就是一个容量大、速度快、可靠性高的磁盘。</li></ul><h4 id="RAID的常见组织形式（6种）"><a href="#RAID的常见组织形式（6种）" class="headerlink" title="RAID的常见组织形式（6种）"></a>RAID的常见组织形式（6种）</h4><ul><li>RAID Level 0<ul><li>只有交叉存储，没有冗余，no-redundan，所以可靠性不高，但是成本较低，速率高</li><li>仅使用了条带化技术</li><li>不存储數据的校验信息</li><li>能提供大容量、快速的磁盘存储能力，</li><li>具备最好的读/写性能和最低的成本</li><li>磁盘的利用率是100%</li><li>但其安全性最低，其中任何一个磁盘损坏便会导致整个系统不可用</li></ul></li><li>RAID Level 1<ul><li>仅使用了磁盘镜像或磁盘双工技术；</li><li>能提供最好的安全性，其中任何一个磁盘损坏都不会导致数据丢失；</li><li>但磁盘容量的利用率只有50%，相对于其它RAID组织形式，成本较高；</li><li>相对于RAID 0，RAID 1的读性能较好</li></ul></li><li>RAID Level 2(redundancy through Hamming code)<ul><li>使用细粒度Strip</li><li>对数据进行Hamming编码：能纠正1位错误，检测2位错误（无法修复）</li><li>Hamming编码信息存放在专用的磁盘上</li><li>相对于RAID1，RAID2成本较低；但相对于RAID Level 3.4.5，RAID2成本较高；</li><li>相对于RAID Level 4，5，RAID2具有较好的数据传输性能，但具有较差的I/O请求响应能力（花太多时间在校验上面）</li></ul></li><li>RAID Level 3(bit-interleaved parity)<ul><li>使用细粒度Strip</li><li>存儲数据的奇偶校验信息</li><li>奇偶校验信息存放在一个专用的磁盘上(这样，这个盘的速度就成了一个瓶颈，使无法并行读取数据)</li><li>相对于RAID Level 2，RAID3成本较低</li></ul></li><li>RAID Level 4(block-level parity)<ul><li>使用粗粒度Strip</li><li>存储数据的奇偶校验信息</li><li>奇偶校验信息存放在专用的磁盘上(其缺点同3)</li><li>当用户进程请求把一个尺寸较小的数据写入RAID中时，需要读两次磁盘、写两次磁盘（rite Penalt）（读原始信息和校验信息）</li><li>任何情况下，一个写请求都会导致磁盘阵列管理软件访问奇偶校验盘；因此，多个独立的写请求很难真正并行处理。（Parity disk become a bottleck）</li></ul></li><li>RAID Level 5(block-level distributed parity)<ul><li>使用粗粒度Strip</li><li>存储数据的奇偶校验信息</li><li>奇偶校验信息分布存储在各个磁盘上</li><li>多个独立的写请求可以真正地被并行处理。</li></ul></li><li>还可对基本RAID级别进行组合</li></ul><h4 id="RAID的优点"><a href="#RAID的优点" class="headerlink" title="RAID的优点"></a>RAID的优点</h4><ul><li>效率高<ul><li>系统可以并行存取存储在RAID中的数据。</li></ul></li><li>可靠性高<ul><li>系统可以恢复存储在故障磁盘中的数据</li></ul></li><li>性价比高<ul><li>磁盘阵列可以用廉价磁盘组成。</li></ul></li></ul><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>【1】sectors（分区、扇区）<br>【2】transaction （事务）<br>【3】redundan（冗余）</p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System(6)</title>
      <link href="/2020/04/16/cao-zuo-xi-tong-6/"/>
      <url>/2020/04/16/cao-zuo-xi-tong-6/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统–储存管理（Memory-Management）"><a href="#操作系统–储存管理（Memory-Management）" class="headerlink" title="操作系统–储存管理（Memory Management）"></a>操作系统–储存管理（Memory Management）</h1><h3 id="操作系统启动"><a href="#操作系统启动" class="headerlink" title="操作系统启动"></a>操作系统启动</h3><blockquote><p>初始化流程分析：加电或复位 —&gt; BIOS的启动 —&gt; Boot Loader —&gt; 操作系统初始化</p></blockquote><p><strong><em>BIOS在ROM里面</em></strong></p><p><strong>加电或复位</strong></p><ul><li>CS寄存器=FFFF[0]；IP寄存器=0000[0]</li><li>CS:IP组合指向BIOS入口，作为处理器运行的第一条指令<br>注：CS（Code Segment）寄存器：存放当前运行段的起始地址；IP中（Instruction pointer）寄存器：存放指令在码段内的偏移量；CS:IP组合：确定下一条执行指令的物理地址。</li></ul><p><strong>BIOS的启动</strong></p><ul><li>BIOS：主要提供CPU需要的启动指令。后动程序的运行过程：上电自检-&gt;监测并连接系统硬件-&gt;从软盘/硬盘读入Boot Loader（硬盘的0面0道1扇区中）</li><li>BIOS还提供一组中断，以便对硬件设备的访问。在OS未装入前，负责响应中断。</li></ul><p><strong>Boot Loader</strong></p><ul><li>将系统启动代码读入内存</li></ul><p><strong>燥作系统初给化</strong></p><ul><li>当Boot Loader将控制权交给OS的初始代码以后，OS开始其初始化工作，负责：<ul><li>完成存储管理、设备管理、文件管理、进程管理的初始化</li></ul></li><li>当OS的初始化工作完成以后，进入用户态，等待用户的操作</li></ul><h3 id="存储管理概述"><a href="#存储管理概述" class="headerlink" title="存储管理概述"></a>存储管理概述</h3><h4 id="Outline（大纲）"><a href="#Outline（大纲）" class="headerlink" title="Outline（大纲）"></a>Outline（大纲）</h4><ul><li>Memory Management Requirements(存储管理的需求分析)</li><li>Memory Management Techniques（存储管理的技术）<ul><li>Partitioning（分区）</li><li>Simple Paging（简单分页）</li><li>Simple Segmentation（简单分段）</li></ul></li><li>Virtual Memory Management Techniques<ul><li>Virtual-Memory Paging</li><li>Virtual-Memory Segmentation</li></ul></li></ul><h4 id="overView"><a href="#overView" class="headerlink" title="overView"></a>overView</h4><p><strong>Memory Management（内存管理）</strong></p><ul><li>Subdividing memory to accommodate multiple processes.（分割内存以适应多个进程）</li><li>Memory needs to be allocated efficiently to pack as many processes into memory as possible.（需要高效地分配内存，以便将尽可能多的进程打包到内存中）</li></ul><p><strong>Memory Management Requirements</strong></p><ul><li>Relocation（重定位）</li><li>Memory Protection（存储保护）</li><li>Memory Sharing（存储共享）</li><li>Logical Organization（逻辑组织）</li><li>Physical Organization（物理组织）</li></ul><blockquote><p>对于操作系统的存储管理的子系统来说，它具有重定位功能。重定位功能是指在系统里面我的进程要把程序和数据从外存装到内存去，在外存的时候我们的程序的地址都是相对的地址，每个程序都从零地址开始。但是你的程序装到内存去，你的地址就会各不一样。两个程序在内存里面对应的物理地址不一样，就需要进行地址转换<br>因此重定位就是对它（进到内存里的程序）的地址进行重新计算</p></blockquote><blockquote><p>存储保护：内存里面有多个进程，各进程是相互独立的，父子进程之间都是相互独立的，要保证各个进程之间的数据受到保护，不能出现一个进程非法访问另外一个进程的数据</p></blockquote><blockquote><p>存储共享：在多道程序系统里面，有限的内存空间装入尽量多的进程，其中一个关键技术就是存储共享技术。多个进程都能访问同一段代码，那么将这段代码独立出来一个共享段，可以被多个进程通过指针来访问</p></blockquote><p><strong>Addresse</strong></p><ul><li>Logical<ul><li>reference to a memory location independent of the current assignment of data to memory.(引用独立于当前分配给内存的数据的内存位置)</li><li>translation must be made to the physical address.(必须对物理地址进行转换)</li></ul></li><li>Relative<ul><li>address expressed as a location relative to some known point.(地址表示为相对于某个已知点的位置)</li></ul></li><li>Physical<ul><li>the absolute address or actual location in main memory.(在主存中的绝对地址或实际位置)</li></ul></li></ul><p><strong>Protection</strong></p><ul><li>Processes should not be able to reference memorylocations in another process without permission.(未经允许，进程不能引用另一个进程中的内存位置)</li><li>Impossible to check absolute addresses in programs at compile time since the program could be relocated.(无法在编译时检查程序中的绝对地址，因为程序可能被重新定位:所以在运行的时候做)</li><li>Must be checked during execution by the processor(hardware) rather than OS(software)-Operating system cannot anticipate all of the memory references that a program will make.(必须由处理器(硬件)而不是操作系统(软件)在执行期间进行检查-操作系统无法预测程序将会产生的所有内存引用)</li></ul><p><strong>sharig</strong></p><ul><li>Allow several processes to access the same portion of memory.(允许多个进程访问同一内存段)</li><li>Better to allow each process (person) access to the same copy of the program rather than have their own separate copy.(最好允许每个进程(人员)访问程序的相同副本，而不是拥有自己的单独副本:节省内存空间)</li></ul><p><strong>Logical Organization（逻辑组织）</strong></p><ul><li>Programs are written in modules.(程序是在模块中编写的)</li><li>Modules can be written and compiled independently.(模块可以独立编写和编译)</li><li>Different degrees of protection given to modules (read-only, execute-only).(给模块不同程度的保护(只读，仅执行))</li><li>Share modules.(分享模块)</li></ul><p><strong>Physical Organization</strong></p><ul><li>Computer memory is organized into at least two levels, referred as <strong><em>main memory(主存)</em></strong> and <strong><em>secondary memory（外存）</em></strong>（计算机内存至少分为两个层次）</li><li>Memory available for a program plus its data may be insufficient.（可用于程序及其数据的内存可能不够）<ul><li>Overlaying allows various modules to be assigned the same region of memory.（覆盖技术允许将不同的模块分配到相同的内存区域）</li></ul></li><li>Programmer does not know how much space will be available.（程序员不知道有多少空间可用）</li></ul><h4 id="Memory-Management-Techniques（内存管理技术）"><a href="#Memory-Management-Techniques（内存管理技术）" class="headerlink" title="Memory Management Techniques（内存管理技术）"></a>Memory Management Techniques（内存管理技术）</h4><ul><li>Fixed Partitioning（固定分区）</li><li>Dynamic Partitioning（动态分区）</li><li>Simple Paging（简单分页）</li><li>Simple Segmentation（简单分段）</li><li>Virtual-Memory Paging（虚拟存储分页）</li><li>Virtual-Memory Segmentation（虚拟存储分段）</li></ul><blockquote><p>存储空间是否连续：如果对于一个进程，分给其一个连续内存空间，即对于一个进程来说只能占一块空间。<br>连续：分区<br>离散：分段、分页</p></blockquote><blockquote><p><strong>简单和虚拟的区别</strong>：简单存储：一个进程要执行之前，把它的程序数据全部装入内存。虚拟存储：在程序、进程执行之前，只把它的一部分数据装入内存，后面需要的部分再慢慢装入内存<br>根本区别：一个进程是否需要全部装入内存才能运行</p></blockquote><h3 id="Fixed-Partitioning-固定分区"><a href="#Fixed-Partitioning-固定分区" class="headerlink" title="Fixed Partitioning(固定分区)"></a>Fixed Partitioning(固定分区)</h3><p><strong>Partitioning Technique（分区技术）</strong></p><ul><li>Fixed Partitioning Technique（固定分区技术）</li><li>Dynamic Partitioning Technique（动态分区技术）</li><li>Buddy System（伙伴系统）</li></ul><p><strong>Fixed Partitioning</strong></p><ul><li>系统初始启动时将内存划分为数目固定、尺寸固定的多个分区。</li><li>这些分区的尺寸可以相等也可以不等。</li><li>Equal-size partitions(相同大小的分区)<ul><li>any process whose size is less than or equal to the partition size can be loaded into an available partition.(大小小于或等于分区大小的任何进程都可以加载到一个可用分区中)</li><li>if all partitions are full, the operating system can swap a process out of a partition.(如果所有分区都满了，操作系统可以将一个进程交换出一个分区.那这个进程的优先级比较高)</li></ul></li><li>A program may be too big to fit into a partition.The programmer must design the program with overlays.(一个程序可能太大而不能放入一个分区中。程序员必须用覆盖来设计程序)</li><li>Main memory use is inefficient.Any program，no matter how small，occupies an entire partition.This is called <strong><em>internal fragmentation（内零头）</em></strong>。(主存的使用效率很低。任何程序，不管多小，都会占用整个分区。这就是所谓的内部分裂(内零头))</li><li>Both of these problems can be lessened, though not solved, by using unequal-size partitions.(通过使用大小不相等的分区，这两个问题都可以减少，但不能解决)</li></ul><p><strong>Placement Algorithm with Partitions（分区布局算法）</strong></p><ul><li>Equal-size partitions<ul><li>because all partitions are of equal size, it does not matter which partition is used.</li></ul></li><li>Unequal-size partitions<ul><li>can assign each process to the smallest partition within which it will fit.</li><li>queue for each partition.（排队，合适的被占用了，就排着）</li><li>processes are assigned in such a way as tominimize wasted memory within a partition.</li></ul></li></ul><h4 id="Fixed-Partitioning（长处和不足）"><a href="#Fixed-Partitioning（长处和不足）" class="headerlink" title="Fixed Partitioning（长处和不足）"></a>Fixed Partitioning（长处和不足）</h4><p><strong>Advantages</strong></p><ul><li>实现简单；</li><li>系统开销小。</li></ul><p><strong>Disadvantages</strong></p><ul><li>存在Imternal Fragmen，存储利用率不高；</li><li>分区尺寸固定，系统无法运行大程序；</li><li>分区数目固定，使活动进程的数目受限</li></ul><h3 id="Dynamic-Partitioning（动态分区技术）"><a href="#Dynamic-Partitioning（动态分区技术）" class="headerlink" title="Dynamic Partitioning（动态分区技术）"></a>Dynamic Partitioning（动态分区技术）</h3><ul><li>Partitions are of variable length and number.(分区的长度和数量是可变的)</li><li>Process is allocated exactly as much memory as equired.(进程被精确地分配与所需要的内存相同的内存)</li><li>Eventually get holes in the memory.This is called <strong><em>external fragmentation（外零头）</em></strong>.</li><li>Must use <strong><em>compaction（紧凑）</em></strong>to shift processes so they are contiguous and all free memory is in one block.<ul><li>紧凑可以解决外零头问题，但是会很耗时间，系统开销很大</li></ul></li></ul><p><strong>外零头和紧凑技术</strong></p><ul><li>动态分区为进程分配大小合适的分区，消除了分区<strong><em>Internal Fragment</em></strong>.但是，却产生分区<strong><em>External Fragment</em></strong> </li><li><strong><em>Compaction</em></strong>：为了使外零头得到充分利用，可以将把内存中的所有空闲分区拼接成一个较大的空闲分区。即系统可以把内存中的所有进程移到内存的某一端；相应地，内存中的所有空闲分区将被移到内存的另一端。<ul><li>Compaction技术要求系统具有动态重定位的能力</li></ul></li></ul><blockquote><p>外零头：当采用动态分区技术的系统运行了一段时间以后，系统里面就会存在一些不连续的空闲分区，这些不连续的空闲分区总容量是比较大的，但是有要进来的进程需要的大小超过了任何分区的大小，我们就称这些空闲分区为<strong><em>外零头</em></strong><br>外零头是相对的。内零头是绝对的</p></blockquote><h4 id="Dynamic-Partitioning-Placement-Algorithm（动态分区布局算法）"><a href="#Dynamic-Partitioning-Placement-Algorithm（动态分区布局算法）" class="headerlink" title="Dynamic Partitioning Placement Algorithm（动态分区布局算法）"></a>Dynamic Partitioning Placement Algorithm（动态分区布局算法）</h4><ul><li>Operating system must decide which free block to allocate to a process.</li><li>Best-fit algorithm（最佳适应算法）<ul><li>Chooses the block that is closest in size to the request.（选择大小最接近请求的块）</li><li>Worst performer overall.(整体表现最差)</li><li>Since smallest block is found for process，the smallest amount of fragmentation is left.Memory compaction must be done more often.(因为为进程找到了最小的块，所以只剩下最小数量的碎片。必须更经常地进行内存压缩)</li></ul></li><li>First-fit algorithm（首次适应算法）<ul><li>Scan memory from the beginning and choose the first available block that is large enough.(从一开始就扫描内存，选择第一个足够大的可用块)</li><li>Simplest，Best and Fastest.(最简单，最好，最快)</li><li>May have many process loaded in the front end of memory that must be searched over when trying to find a free block.(可能有许多进程加载在内存前端，必须在试图查找时进行搜索)</li></ul></li><li>Next-fit（下次适应算法）<ul><li>Scan memory from the location of the last placement and choose the next available block that is large enough.(从最后一个位置扫描内存，然后选择下一个足够大的可用块)</li><li>More often allocate a block of memory at the end of memory where the largest block is found.(更常见的情况是，在内存的末尾，也就是找到最大内存块的地方，分配一块内存)</li><li>The largest block of memory is broken up into smaller blocks.(最大的内存块被分成更小的块)</li><li>Compaction is required more frequently to obtain a large block at the end of memory.(为了在内存结束时获得一个大的块，需要更频繁地进行压缩)</li></ul></li></ul><h4 id="Registers-Used-during-Execution-执行期间使用的寄存器"><a href="#Registers-Used-during-Execution-执行期间使用的寄存器" class="headerlink" title="Registers Used during Execution(执行期间使用的寄存器)"></a>Registers Used during Execution(执行期间使用的寄存器)</h4><ul><li>Base register（基址寄存器：记录当前执行进程的起始地址：其他不在运行的进程的起始地址放在各自的PCB里面）<ul><li>starting address for the process.(保存进程的地址)</li><li>单核CPU的基址寄存器只有一个。基址寄存器是被所有进程高度共享使用的、切换使用的</li></ul></li><li>Bounds register（界限寄存器:进程是否越界）<ul><li>ending location of the process.（进程的结束位置）</li></ul></li><li>These values are set when the process is loaded and when the process is swapped in.(这些值是在加载进程和交换进程时设置的，放入寄存器的话是进程被调度的时候)</li><li>The value of the base register is added to a <strong><em>relative address</em></strong> to produce an <strong><em>absolute address.</em></strong></li><li>The resulting address is compared with the value in the bounds register.</li><li>If the address is not within bounds, aninterrupt is generated to the operating system.</li></ul><p><img src="https://s1.ax1x.com/2020/04/18/JnMM8g.png" alt="示意图"></p><h3 id="简单分页技术Simple-Paging-Technique"><a href="#简单分页技术Simple-Paging-Technique" class="headerlink" title="简单分页技术Simple Paging Technique"></a>简单分页技术Simple Paging Technique</h3><ul><li>Partition memory into small equal-size chunks and divide each process into the same size chunks.(将内存划分为大小相等的小块，并将每个进程划分为大小相同的块。)</li><li>The chunks of a process are called pages and chunks of memory are called firames（页框、页帧）(进程的块被称为页面、内存所分的块被称为页框或页帧)</li><li>Operating system maintains a page table（页表）for each process.（操作系统为每个进程维护一张页表）<ul><li>contains the frame location for each page in the process.（包含进程中每个页面的帧位置）</li><li>logical address consists of a page number（页号）and an offset（偏移量）within the page.（逻辑地址由页号页内的偏移量组成）</li></ul></li><li>A single firee-frame list（空闲页框表）of all frames in main memory that are currently unoccupied and available for pages.（有一个空闲页框表，保存空闲可用的页框）</li></ul><h4 id="Logical-to-Physical-Address-Translation（逻辑-物理地址转换）"><a href="#Logical-to-Physical-Address-Translation（逻辑-物理地址转换）" class="headerlink" title="Logical-to-Physical Address Translation（逻辑-物理地址转换）"></a>Logical-to-Physical Address Translation（逻辑-物理地址转换）</h4><ul><li>Address translation is done by processor hardware（地址转换是由处理器硬件完成的）（MMU，存储管理单元：处理地址转换）.</li><li>The processor must know how to access the page table of the current process，using <strong><em>page table register（页表寄存器）.</em></strong>：只有当前执行进程的页表起始地址才会占用系统里面唯一的页表寄存器</li><li>Logical address : page number, offset.</li><li>Physical address: frame number, offset.</li></ul><blockquote><p>CPU直接到页表寄存器里取当前进程页表的起始地址，找到页表起始地址才找到了页表，然后从页表里面去找进程的某一页在内存里面的页框号。再用页框号加上相对地址才得到物理地址<br>页表里面有页号、页框号和其他控制信息</p></blockquote><p><strong>Logical-to-Physical Address Translation（逻辑地址到物理地址的转换）</strong><br>在分页系统中，地址变换步骤：</p><ol><li>根据逻辑地址及页大小求出页号和页内偏移；</li><li>用页号检索页表，查找指定页对应的页框号；</li></ol><p><strong>Translation Lookaside Buffer快表-加快页表检索速度</strong>为了加快地址转换而存在的catch</p><ul><li>Each virtual memory reference can cause two physical memory accesses.（每个虚拟内存引用都可能导致两次物理内存访问）<ul><li>one to fetch the page table.(获取页表)</li><li>one to fetch the data.（获取数据）</li></ul></li><li>To overcome this problem a high-speed cache is set up for page table entries.(为了克服这个问题，为页表条目设置了高速缓存)<ul><li>called the TLB-Translation Lookaside Buffer.</li><li>根据局部性原理，TLB里面放着最近使用的那些页表项</li></ul></li><li>Contains page table entries that have been most recently used.</li><li>Functions same way as a memory cache.(功能与内存缓存相同)</li></ul><p><strong>过程</strong></p><ul><li>Given a virtual address, processor examines the TLB.（给定一个虚拟地址，处理器检查TLB。）</li><li>If page table entry is present (a hit), the frame number is retrieved and the real address is formed.(如果存在页表条目(命中)，则检索帧号并形成实际地址)</li><li>If page table entry is not found in the TLB (a miss), the page number is used to index the process page table.(如果在TLB中没有找到页表条目(a miss)，则使用页码索引进程页表)</li></ul><blockquote><p>逻辑地址：这一条指令在该进程中的位置，相对于该进程的零号地址<br>PCB本身从物理上讲，它是放在系统区的。PCB只要记住自己进程的页表起始地址就可以了。页表本身可以跟PCB完全物理上分开</p></blockquote><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>16位的机器，页的大小位1KB。<br>页表：</p><table><thead><tr><th>页号</th><th>页框号</th></tr></thead><tbody><tr><td>0</td><td>000101</td></tr><tr><td>1</td><td>000110</td></tr><tr><td>2</td><td>011001</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>求相对地址1502的物理地址</p><p>答：1502/1024 = 1……478<br>1为页号，478为页内偏移量</p><p>478B = 01 1101 1110</p><p>物理地址等于 000 110 + 478B</p><blockquote><p>16位机器：2的16次方：由于页的大小为1024=2^10,所以有<strong><em>2^10来表示页内偏移量</em></strong>,有<strong><em>2^6来表示页号/页框号</em></strong></p></blockquote><h4 id="Size-of-Page-amp-Page-Tables"><a href="#Size-of-Page-amp-Page-Tables" class="headerlink" title="Size of Page &amp; Page Tables"></a>Size of Page &amp; Page Tables</h4><ul><li>Page size</li><li>Page table size</li><li>For huge page table <ul><li>Organization </li><li>Storage</li></ul></li></ul><p><strong>Page size</strong></p><ul><li>Less internal fragmentation, small page size Smaller page size, more pages required per process.(更小的页面大小会有更少的内零头,更小的页面大小，每个进程需要更多的页面)<ul><li>More pages per process means larger page tables.(每个进程拥有更多的页意味着更大的页表)</li><li>Larger page tables means large portion of page tables in virtual memory.(更大的页表意味着需要更大的空间)</li></ul></li><li>Secondary memory（外存） favors large page size<ul><li>Secondary memory is designed to efficiently transfer large blocks of data.(外存设计更大的页面会有更加快的效率)</li></ul></li><li>Small page size <ul><li>large number of pages will be found in main memory.</li><li>As time goes on during execution, the pages in memory will all contain portions of the process near recent references.</li><li>Page faults low.（缺页率低：虚拟内存的，还未进到内存的页面）</li></ul></li><li>Increased page size <ul><li>causes pages to contain locations further from any recent reference.(导致页面包含与最近引用距离更远的位置)</li><li>Page faults rise.（缺页率上升）</li></ul></li></ul><p><strong>Page Table Structure</strong></p><ul><li>许多计算机系统支持大容量虚拟内存.比如，在VAX系统中，每个进程使用的虚拟内存最大容量为2^31（=2G）个字节。</li><li>大容量虚拟内存的实现需要大页表.比如，在VAX系统中，页面的大小为2^9（=512）个字节，因此如果某进程使用的虚拟内存容量为系统规定的最大容量，那么该进程的页表将有多达2=4M）个表项.</li><li>下面介绍三种解决“大页表占用大内存”的方法</li></ul><p><strong>Virtual Page Tables(虚拟页表)</strong></p><ul><li>The entire page table may take up too much main memory.（整个页表可能占用太多的主内存）</li><li>Page tables are also stored in virtual memory.(页表也存储在虚拟内存中)</li><li>When a process is running, part of its page table is in main memory.(当一个进程正在运行时，它的页表的一部分位于主内存中。其他的再慢慢弄进来)</li></ul><p><strong>多级页表Two-Level Scheme for 32-bit Address</strong></p><p><img src="https://s1.ax1x.com/2020/04/19/JuY2lV.png" alt></p><p><strong>Inverted Page Table（反置页表）</strong><br>不是每个进程有一张页表，而是整个系统有一张。通过页框的数量来确定页表的大小。需要记载对应<br>进程的进程id</p><h3 id="简单分段技术和简单段页式技术"><a href="#简单分段技术和简单段页式技术" class="headerlink" title="简单分段技术和简单段页式技术"></a>简单分段技术和简单段页式技术</h3><h4 id="Simple-Segmentation-Technique"><a href="#Simple-Segmentation-Technique" class="headerlink" title="Simple Segmentation Technique"></a>Simple Segmentation Technique</h4><ul><li>基于模块化程序设计时，程序员常根据需要将进程分割成许多大小不一定相同的<strong><em>Segment</em></strong>，系统则将物理内存动态地划分成许多尺寸不一定相等的<strong><em>Partition.</em></strong></li><li>当一个进程被装入物理内存时，系统将为该进程的每个段独立地分配一个分区；<strong><em>同一进程的多个段不必存放在连续的多个分区中.</em></strong></li></ul><ul><li>All segments of all programs do not have to be of the same length.(所有程序的所有段不必具有相同的长度。)</li><li>There is a maximum segment length.(有一个最大的段长度)</li><li><strong><em>Logical address</em></strong> consists of two parts: a <strong><em>segment number</em></strong> and an <strong><em>offset</em></strong>.(逻辑地址由两部分组成:段号和偏移量。页的时候逻辑地址就是一维的)</li><li>Since segments are not equal, segmentation is similar to dynamic partitioning.(由于段是不相等的，分割类似于动态分区)</li></ul><h4 id="Data-Structure-in-Fragmentation-分段数据结构"><a href="#Data-Structure-in-Fragmentation-分段数据结构" class="headerlink" title="Data Structure in Fragmentation(分段数据结构)"></a>Data Structure in Fragmentation(分段数据结构)</h4><ul><li>Segment Table（段表）<ul><li>用于描述进程的分段情况，记载进程的各个段到物理内存中分区的映射情况。</li></ul><ul><li>基本元素：段号、段的物理起始地址、段长度</li></ul></li><li>Partition Table（分区表）<ul><li>用于记载物理内存的分区情况</li><li>内存使用分区的方式。</li></ul></li></ul><h4 id="分段系统中的地址变换和存储保护过程"><a href="#分段系统中的地址变换和存储保护过程" class="headerlink" title="分段系统中的地址变换和存储保护过程"></a>分段系统中的地址变换和存储保护过程</h4><p>在分段系统中，CPU将按照以下步骤进行地址变换和存储保护：</p><ul><li>以逻辑地址中的<strong>段号</strong>为索引栓索段表从而得到指定段所对应的段表项；</li><li>若逻辑地址中的<strong>段内偏移</strong>大于段表项中<strong>段的长度</strong>，则产生存储保护中断（该中断将由OS处理）；</li><li>把逻辑地址中的<strong>段内偏移</strong>与段表项中的<strong>分区的起始物理地址</strong>相加从而得到<strong>物理地址</strong></li></ul><h4 id="Segmentation-Table-Register-段表寄存器"><a href="#Segmentation-Table-Register-段表寄存器" class="headerlink" title="Segmentation Table Register(段表寄存器)"></a>Segmentation Table Register(段表寄存器)</h4><ul><li>在分段系统中，段表被保存在物理内存中。</li><li><strong><em>段表寄存器</em></strong>是CPU中的一个硬件设施，用来存放当前正在运行的进程其段表在物理内存中的<strong>起始物理地址*</strong>。</li><li>当系统调度某个进程运行时，它将从该进程的PCB中取出相应的值填入段表寄存器</li></ul><h4 id="Segment-Protection（段的保护）"><a href="#Segment-Protection（段的保护）" class="headerlink" title="Segment Protection（段的保护）"></a>Segment Protection（段的保护）</h4><ul><li>越界检查<ul><li>为了进行越界检查，系统在段表寄存器中保存当前进程的段表长度并在每个段表项中保存各个段的长度</li></ul></li><li>存取控制(RWX)<ul><li>为了进行存取控制，系统在每个段表项中设置一个“存取控制”字段，用于规定进程对段的访问权限</li></ul></li><li>为了进行环保护，系统将在每个段表项中保存各个段所在环的特权级别。</li><li>环保护通常遵循以下保护规则：<ul><li>一个程序可以<strong>调用</strong>驻留在同级环或较高特权环中的服务；</li><li>一个程序可以<strong>访问</strong>驻留在同级环或较低特权环中的数据</li></ul></li></ul><h4 id="Paging-vs-Segmentation-比较"><a href="#Paging-vs-Segmentation-比较" class="headerlink" title="Paging vs Segmentation(比较)"></a>Paging vs Segmentation(比较)</h4><ul><li>页面是信息的物理单位；在特定的系统中其大小是固定不变的，不随进程的不同而不同。</li><li>段是信息的逻辑单位，其长度不定；即使是属于同一进程的两个段其长度也可能不等</li><li>分页活动源于系统管理物理内存的需要，在系统内部进行，由系统实施，用户看不见.</li><li>分段活动源于用户进行模块化程序设计的需要，在系统外部进行，由用户实施，用户是知道的</li><li>在分页系统中，逻辑地址是一维的。</li><li>在分段系统中，逻辑地址是二維或多维的</li></ul><h4 id="Advantages-of-Segmentation-Paging（分段分页的各自优势）"><a href="#Advantages-of-Segmentation-Paging（分段分页的各自优势）" class="headerlink" title="Advantages of Segmentation/Paging（分段分页的各自优势）"></a>Advantages of Segmentation/Paging（分段分页的各自优势）</h4><ul><li>分页系统中，内零头得到了有效的抑制，外零头则完全被消除；因此，使用分页技术可以提高物理内存的利用率</li><li>分段系统中，动态数据结构、程序和数据共享、程序和数据保护等问题得到了妥善解决；因此，分段技术有利于模块化程序设计.</li><li>段页技术汲取了分页技术和分段技术的上述优点</li></ul><h4 id="Combined-Paging-and-Segmentation段页式"><a href="#Combined-Paging-and-Segmentation段页式" class="headerlink" title="Combined Paging and Segmentation段页式"></a>Combined Paging and Segmentation段页式</h4><ul><li>在段页存储管理系统中，每个进程均被编程人员分割成多个Segment，每个段又被系统分割成多个Page</li><li>相应地，物理内存被系统划分成多个Frame.</li><li>当一个进程被装入物理内存时，系统为该进程的每个段的各页面独立地分配一个Frame，一个进程的同一段的多个页面不必存放在连续的多个Frame中。</li><li>此时段表寄存器里面记录的是<strong>段号</strong>和<strong>段内页表起始地址</strong>和<strong>段的长度</strong></li><li>此时的逻辑地址：段号+段内页号+段内offset</li></ul><h3 id="虚拟存储管理"><a href="#虚拟存储管理" class="headerlink" title="虚拟存储管理"></a>虚拟存储管理</h3><p><strong>简单存储技术</strong>：当进程运行时，该进程相关的程序和数据全部驻留内存</p><h4 id="Hardware-and-Control-Structures（硬件和控制结构）"><a href="#Hardware-and-Control-Structures（硬件和控制结构）" class="headerlink" title="Hardware and Control Structures（硬件和控制结构）"></a>Hardware and Control Structures（硬件和控制结构）</h4><ul><li>Memory references are dynamically translated into physical addresses at run time.（内存引用在运行时被动态地转换为物理地址）<ul><li>A process may be swapped in and out of main memory such that it occupies different regions.（进程可以在主存中或主存外进行交换，以使其占据不同的区域）</li></ul></li><li>A process may be broken up into pieces that do not need to located contiguously in main memory.（一个进程可以被分成若干块，这些块不需要在主存中保持连续）<ul><li>All pieces of a process do not need to be loaded in main memory during execution.（在执行过程中，不需要将进程的所有部分加载到主内存中）</li></ul></li></ul><h4 id="Principle-of-Locality（时间-空间局部性原理）"><a href="#Principle-of-Locality（时间-空间局部性原理）" class="headerlink" title="Principle of Locality（时间/空间局部性原理）"></a>Principle of Locality（时间/空间局部性原理）</h4><ul><li>Program and data references within a process tend to cluster（簇）</li><li>Only a few pieces of a process will be needed over a short period of time.</li><li>Possible to make intelligent guesses about which pieces will be needed in the future.</li><li>This suggests that virtual memory may work efficiently.</li></ul><h4 id="Execution-of-a-Program"><a href="#Execution-of-a-Program" class="headerlink" title="Execution of a Program"></a>Execution of a Program</h4><ul><li>Operating system brings into main memory a few pieces of the program.(操作系统将程序的一些片段带入主存)</li><li>Resident set（驻留集）-portion of process that is in main memory.(部分进程的数据在主内存中)</li><li>An interrupt is generated when an address is needed that is not in main memory.(当需要的数据数据不在主存中的地址时，就会产生一个中断)</li><li>Operating system places the process in a blocked state.（操作系统将进程置于阻塞状态。得到需要的数据之后，进程进入就绪态）</li><li>Piece of process that contains the logical address is brought into main memory.<ul><li>Operating system issues a disk I/O Read request.(操作系统发出磁盘I/O读请求)</li><li>Another process is dispatched to run while the disk i/O takes place.(当磁盘i/O发生时，cpu会执行另外一个进程.<strong><em>磁盘I/O和cpu是并行的</em></strong>)</li><li>An interrupt is issued when disk IO complete which causes the operating systemto place the affected process in the Ready state.(当磁盘IO完成时，会发出一个中断，这会导致操作系统将受影响的进程置于就绪状态)</li></ul></li></ul><h4 id="Advantages-of-Breaking-up-a-Process（虚拟存储的好处）"><a href="#Advantages-of-Breaking-up-a-Process（虚拟存储的好处）" class="headerlink" title="Advantages of Breaking up a Process（虚拟存储的好处）"></a>Advantages of Breaking up a Process（虚拟存储的好处）</h4><ul><li><strong>More processes</strong> may be maintained in main memory.(可以在主存中维护更多进程)<ul><li>Only load in some of the pieces of each process.(仅加载每个进程的某些部分)</li><li>With so many processes in main memory, it is very likely a process will be in the Ready state at any particular time.(在主存中有这么多进程，很可能某个进程在任何特定时间都处于就绪状态)</li></ul></li><li>A process may be <strong>larger</strong> than all of main memory.(一个进程可能比所有的主存都大)</li></ul><h4 id="Types-of-Memory"><a href="#Types-of-Memory" class="headerlink" title="Types of Memory()"></a>Types of Memory()</h4><ul><li>Real memory<ul><li>Main memory (主存)</li></ul></li><li>Virtual memory<ul><li>Memory on disk（将一部分外存当成主存使用）</li><li>Allows for effective multiprogramming and relieves the user of tight constraints of main memory.（允许有效的多道程序设计，减轻用户对主存的严格限制）</li></ul></li></ul><blockquote><p>虚拟空间不是无限大的，机器的地址位数决定了虚拟存储空间的最大容量</p></blockquote><p><strong>Virtual Memory</strong></p><ul><li>使用虚拟存储管理技术，用户将会感觉到系统的内存空间比实际内存大.</li><li>系统的可用内存空间并非计算机系统中的实际物理内存，它包含物理内存及一部分磁盘空间。</li><li>习惯上，人们把这种用户感觉上存在但实际上并不存在的内存称为建拟内在。</li></ul><h4 id="Thrashins（抖动）"><a href="#Thrashins（抖动）" class="headerlink" title="Thrashins（抖动）"></a>Thrashins（抖动）</h4><ul><li>Swapping out a piece of a process just before that piece is needed.（在把页面交换出去之后，又要用到这个页面，又重新装回来，重复以此）</li><li>The processor spends most of its timeswapping pieces rather than executing user instructions.（处理器将大部分时间花在重叠的片段上，而不是执行用户指令）</li><li>驻留集小，每个进程分到的页框数很小</li><li>系统的负载过高（挂起进程来降低负载）</li></ul><h3 id="虚拟存储管理技术中的软件策略"><a href="#虚拟存储管理技术中的软件策略" class="headerlink" title="虚拟存储管理技术中的软件策略"></a>虚拟存储管理技术中的软件策略</h3><ul><li>Resident Set Management（驻留集管理：是动态变化的）</li><li>Placement Policy（放置策略）</li><li>Fetch Poliey（获取策略）</li><li>Replacement Poliey（置换策略）</li></ul><h4 id="Resident-Set-Management"><a href="#Resident-Set-Management" class="headerlink" title="Resident Set Management"></a>Resident Set Management</h4><ul><li>解决的问题：系统应当为每个活动进程分配多少个frame（页框）？</li><li>Resident Set：指进程驻留在内存中的页面所组成的集合</li><li>解决的基本问题即：每个活动进程驻留集的尺寸应当为多大？</li><li><strong>影响Frame分配的因素</strong><ul><li>分配给每个活动进程的frame款越少，在内存中驻留的活动进程款就越多，进程调度程序能调度就绪进程的概率就越大.</li><li>分配给每个活动进程的frame铁越少，每个活动进程在其运行过程中发生缺页中断的概率就越大.（系统的性能就会降低）</li><li>分配给每个活动进程的frame数超过一定限度时，多余的frame并不能显著地降低每个活动进程的缺页中断率。但是你分了很多的frame给一个进程，你就降低了内存中的进程数</li></ul></li></ul><h4 id="Resident-Set-Size（驻留集大小）"><a href="#Resident-Set-Size（驻留集大小）" class="headerlink" title="Resident Set Size（驻留集大小）"></a>Resident Set Size（驻留集大小）</h4><ul><li>Fixed-allocation（静态分配）<ul><li>gives a process a fixed number of pages within which to execute（给一个进程一个固定数量的页面，在其中执行）</li><li>when a <strong><em>page fault（缺页）</em></strong> occurs, one of the pages of that process must be replaced（当发生缺页的时候，只能在已经分配的空间里面进行置换）</li></ul></li><li>Variable-allocation（可变分配）<ul><li>number of pages allocated to a process varies over the lifetime of the process（分配给流程的页面数量在流程的生命周期中是变化的）</li></ul></li></ul><p><strong>调整驻留集尺寸的方法（工作集方法：1）</strong></p><ul><li>一个进程的工作集w（t，A）是指，在时间1之前的一段时间 内该进程所引用的全部页面的集合.</li><li>工作集w（t，A）是时间t的画数.一般说来，t不同，w（t，A）的尺寸和或元素也不同。</li><li>通常人们把A称为工作集w（t，A）的窗口尺寸，显然，工作集w（t，A）也是窗口尺寸a的函数，一般说来，窗口尺寸a越大，工作集尺寸1w（t，A）也就越大.</li><li>要保证一个进程有效地运行，系统就必须保证任何时候该进程的工作集都驻留在内存中.</li></ul><p><strong>调整驻留集尺寸的方法（工作集方法：2）</strong></p><ul><li>从理论上讲，系统可以通过监控一个进程的工作集来调整其驻留集.</li><li>然而，实践中，监拉各个进程的工作集将导致很大的系统开销.</li><li>而且，监控到的工作集信息是进程的历史；因此，据此调整各个进程的驻留集未必能够获得好的系统性能。·</li><li>此外，窗口尺寸的最佳值也是无法确定的.</li></ul><p><strong>调整驻留集尺寸的方法（PFF算法：1）</strong></p><ul><li>基于工作集方法的基本原理，人们在实践中提出了<strong><em>缺页频率算法</em></strong>（Page-Fault Frequeney Algorithm，简称PFF）.</li><li>使用PFF算法的系统通过监控各个进程的页面访问失败率来调整各个进程的驻留集尺寸。</li><li>如果缺页很少（缺页率很低），说明驻留集太大，浪费了内存空间，需要减少驻留集</li><li>如果缺页很多（缺页率很高），说明驻留集太小，就需要增加驻留集</li><li><strong><em>PFF算法将按照以下规则调整各进程的驻留集尺寸：</em></strong><ul><li>如果一个进程的缺页率低于某个最小阔值，那么系统持减小该进程的驻留集尺寸；</li><li>如果一个进程的缺页準高于某个最大阔值，那么系統將增加這进程的驻留集尺寸.</li></ul></li><li>因为缺页半与缺页时间间隔成反比，因此，可以通过测量缺页时间间隔来监控缺页率.</li></ul><blockquote><p>好的状况：如果前一个页面缺页装了进来，刚好装进来，发生下一次缺页，刚好处理完装进来，又发生下一次缺页</p></blockquote><h4 id="Placement-Policy（放置策略）"><a href="#Placement-Policy（放置策略）" class="headerlink" title="Placement Policy（放置策略）"></a>Placement Policy（放置策略）</h4><ul><li>解决的基本问题：系统应当在内存的什么位置为活动进程分配frame？</li><li>绝大多数使用虚拟存储分页技术的系统可以在内存中的任何位置为活动进程分配frame.</li><li>但是，有些系统需要专门技术解决内存中页面的放置问题</li></ul><h4 id="Fetch-Policy（获取策略）"><a href="#Fetch-Policy（获取策略）" class="headerlink" title="Fetch Policy（获取策略）"></a>Fetch Policy（获取策略）</h4><p>Determines when a page should be brought into memory?（确定何时将页面放入内存）</p><ul><li><strong><em>Demand paging</em></strong>（请求调页）only brings pages into main memory when a reference is made to a location on the page.（只有在引用页面上的某个位置时，才将页面放入主内存）<ul><li>Many page faults when process first started.（进程首次启动时出现许多缺页）</li></ul></li><li><strong><em>Prepaging</em></strong>（预调页）brings in more pages than needed.（带来比需要更多的页面）<ul><li>More efficient to bring in pages that reside contiguously on the disk（更有效地引入在磁盘上连续驻留的页面。空间局部性）</li><li>LInux上面有个swapping区，这个就是连续存储的。磁盘的其他位置可以离散也可以连续</li></ul></li></ul><h4 id="Replacement-Policy（置换策略）"><a href="#Replacement-Policy（置换策略）" class="headerlink" title="Replacement Policy（置换策略）"></a>Replacement Policy（置换策略）</h4><ul><li>Which page is replaced？</li><li>当一个页面欲装入内存时，系统应当在什么范围内判断已经没有空闲frame分配给新的页面？</li><li>当系统在指定的范围内发现已经没有空闲frame分配给新的页面时，系统应当从指定的范围内选择哪个页面移出内存？</li></ul><p><strong>Variable Allocation，Global Scope（可变分配，全局置换）</strong></p><ul><li>Easiest to implement.(最容易实现)</li><li>Adopted by many operating systems.(被许多操作系统采用。)</li><li>Operating system keeps list of free frames.(操作系统保存空闲帧/页框的列表)</li><li>Free frame is added to resident set of process when a page fault occurs.（当发生缺页时，将空闲页框添加到进程的驻留集）</li><li>If no free frame, replaces one from another process.（如果没有空闲页框，则替换另一个进程中的一个页框）</li></ul><p><strong>Variable Allocation，Local Scope（可变分配，局部置换）</strong></p><ul><li>When new process added, allocate number of page frames based on application type, program request, or other criteria.</li><li>When page fault occurs, select page from among the resident set of the process that suffers the fault.（从进程自己的页框进行置换）</li><li>Reevaluate allocation from time to time.</li></ul><blockquote><p>固定分配：局部置换。可变分配：局部置换或者全局置换</p></blockquote><h4 id="驻留集尺寸与置换范围"><a href="#驻留集尺寸与置换范围" class="headerlink" title="驻留集尺寸与置换范围"></a>驻留集尺寸与置换范围</h4><ul><li>固定分配策略将导致系统必须使用局部置捷策略；反之，全局置捷策感将导致系统必须使用可变分配策略</li><li>可变分配策略与局部置换策略也可组合，即系统可根据性能的需要增加或减少分配给每个活动进程的frame数；当进程的frame全部用完，而需要装入一个新的页面时，系统将在该进程的当前驻留集中选择一个页面移出内存</li></ul><h4 id="Replacement-Policy（置换注意事项）"><a href="#Replacement-Policy（置换注意事项）" class="headerlink" title="Replacement Policy（置换注意事项）"></a>Replacement Policy（置换注意事项）</h4><ul><li>Frame Locking<ul><li>If frame is locked, it may not be replaced.</li><li>Kernel of the operating system.</li><li>Control structures.（PCB）</li><li>I/O buffers.</li><li>Associate a lock bit with each frame.</li></ul></li></ul><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><ul><li>Page removed should be the page least likely to be referenced in the near future.（被删除的页面应该是近期内最不可能被引用的页面）</li><li>Most policies predict the future behavior on the basis of past behavior.（大多数政策都是根据过去的行为来预测未来的行为）</li></ul><h4 id="Basic-Replacement-Algorithms（基本置换算法）"><a href="#Basic-Replacement-Algorithms（基本置换算法）" class="headerlink" title="Basic Replacement Algorithms（基本置换算法）"></a>Basic Replacement Algorithms（基本置换算法）</h4><ul><li>Optimal Algorithm（最佳算法）</li><li>Least Recently Used Algorithm（最近最少使用算法）</li><li>First-in First-out Algorithm（先进先出算法）</li><li>Clock Algorithm（时钟算法） </li></ul><h4 id="Optimal-Algorithm（最佳置换算法）"><a href="#Optimal-Algorithm（最佳置换算法）" class="headerlink" title="Optimal Algorithm（最佳置换算法）"></a>Optimal Algorithm（最佳置换算法）</h4><ul><li>置换在将来再也不被访问的页面</li><li>置换在最远的将来才被访问的页面</li><li>从原理上讲，OPT算法在所有置换算法中具有最佳性能；但，Impossible to have perfect knowledge of future events</li><li>在OS研究领域，OPT算法常常被用作比较各种置换算法性能的参照标准。</li></ul><h4 id="Least-Recently-Used（LRU）（最近最少使用置换算法）"><a href="#Least-Recently-Used（LRU）（最近最少使用置换算法）" class="headerlink" title="Least Recently Used（LRU）（最近最少使用置换算法）"></a>Least Recently Used（LRU）（最近最少使用置换算法）</h4><ul><li>Replaces the page that has not been referenced for the longest time.（替换长时间未被引用的页面）</li><li>By the principle of locality, this should be the page least likely to be referenced in the near future.（根据局部性原则，这应该是在不久的将来最不可能被引用的页面）</li><li>Each page could be tagged with the time of last reference. This would require a great deal of overhead.（每一页都可以加上最后一次引用的时间。这将需要大量的开销）</li><li>以时间判断为标准</li><li>从原理上讲，LRU算法可以被实现；但任何一种实现方法都将产生很大的系统开销。因此，许多Os均使用近似LRU算法.</li><li>一些应用程序具有很强的非局部存储引用（比如顺序存储引用）特征。对于此类应用程序，LRU算法将有很差的表现</li></ul><h4 id="First-in-first-out-FIFO"><a href="#First-in-first-out-FIFO" class="headerlink" title="First-in, first-out (FIFO)"></a>First-in, first-out (FIFO)</h4><ul><li>Treats page frames allocated to a process as a circular buffer.（将分配给进程的页帧视为环形缓冲区）</li><li>Pages are removed in round-robin style.（页面以循环方式删除）</li><li>Simplest replacement policy to implement.（实现最简单的替换策略）</li><li>Page that has been in memory the longest is replaced.（内存中存在时间最长的页面被替换）</li><li>These pages may be needed again very soon.（这些页面可能很快就会再次需要）</li><li>FIFO算法最简单，最容易实现</li><li>如果应用程序具有顺序存储引用特征，那么使用FIFO算法将获得很好的性能。</li><li>不过，大多数应用程序具有局部存储引用特征。对于此类应用程序，FIFO算法的性能是很差的.</li></ul><ul><li>容易产生抖动。</li><li>可能存在Belady现象。</li><li><strong><em>Belady现象</em></strong>：虚拟存储系统中的一种异常现象，即增加进程的页框数，缺页率反而上升.（驻留集扩大，局部性变大）</li></ul><h4 id="Clock-Policy（时钟置换算法）"><a href="#Clock-Policy（时钟置换算法）" class="headerlink" title="Clock Policy（时钟置换算法）"></a>Clock Policy（时钟置换算法）</h4><ul><li>Additional bit called a use bit.（附加位称为use位）</li><li>When a page is first loaded in memory, the <strong><em>use bit</em></strong> is set to 1.（当一个页面第一次载入内存时，use位被设置为1）</li><li>When the page is referenced, the use bit is set to 1.（当页面被引用时，use位被设置为1）</li><li>When it is time to replace a page, the first frameencountered with the use bit set to 0 is replaced.（当需要替换页面时，第一个use位设置为0的帧将被替换）</li><li>During the search for replacement, each use bit set to 1 is changed to 0.（在寻找替换的过程中，设置为1的每个use位被更改为0）</li></ul><blockquote><p>就是两次置换之间没有用过的置换出去，用过的use位置为0，等待下次置换的时候可以被换掉。但是不一定是在两次置换之间</p></blockquote><ul><li>CLOCK算法中，系统将置换范围内的所有frame组成一个环形缓冲区，并为其设置一个<strong><em>扫描指针</em></strong></li><li>没有进行页面置换时，扫描指针总是指向上一次进行页面置换时被置换页面所在位置的下一个位置</li><li>当需要进行页面置换时，系统将移动扫描指针搜索置换范围内的各个frame以便找到一个U位为0的frame：<ul><li>如果当前扫描指针所指向的frame其U位为1，那么系统将该frame的U位设置为0，扫描指针移到下一个位置，继续搜索；</li><li>如果当前扫描指针所指向的frame其U位为0，则系统将该frame中的页面作为被置换页面，同时把扫描指针移到下一个位置，停止搜索。</li></ul></li></ul><h4 id="时钟置换算法的改进"><a href="#时钟置换算法的改进" class="headerlink" title="时钟置换算法的改进"></a>时钟置换算法的改进</h4><ul><li><p>系统把一个页面移出内存时，如果该页面驻留内存期间没有被修改过，那么不必把它写回辅存，否则系统必须把它写回辅存。这表明，换出未修改过的页面比换出被修改过的页面开销小.</p></li><li><p>显然，可以依据上述结论改进CLOCK算法。改进后的CLOCK算法将在置换范围内首选在最近没有使用过、没有被修改过的页面作为被置换页面</p></li><li><p>系统为内存的每个frame配置一个Molify Bit（简称为M位）</p></li><li><p>改进后的CLOCK算法在选择被置换页面时将同时考虑U位和M位.</p></li><li><p>一个页面的U位与M位共有四种组合：</p><ul><li>U-0，M-0：最近没有被使用过，也没有被修改过</li><li>U-1，M-0：最近被使用过，但没有被修改过；</li><li>U-0，M-1：最近没有被使用过，但被修改过；</li><li>U-1，M-1：最近被使用过，也被修改过；</li></ul></li></ul><p><strong>·改进后的CLOCK算法按下列步骤选择被置换页面：</strong></p><ol><li>从当前位置开始搜索U<strong><em>=0且M=0</em></strong>的frame.但不修改任何U位，若找到第一个U=0且M=0的frame，那么系统将该frame中的页面置换出去，算法终止.</li><li>如果第一步没有成功，那么扫描指针将回到原住，再次搜索<strong><em>U=0但M=1</em></strong>的frame.此搜索过程中，如果遇到U位为1的frame，则将其U往修改为0，若找到第一个U=0但M=1的frame，那么系统将该frame中的页面选作被置接页面，算法终止。</li><li>如果第二步也没有成功，那么扫描指针将再次回到原位且置换范围内的所有frame其U住均为0，此时，算法将返回第一步继续执行.</li></ol><h4 id="Basic-Replacement-Algorithms"><a href="#Basic-Replacement-Algorithms" class="headerlink" title="Basic Replacement Algorithms"></a>Basic Replacement Algorithms</h4><ul><li>Page Buffering（页面缓冲）<ul><li>Replaced page is added to one of two lists<ul><li>free page list if page has not been modified</li><li>modified page list(修改过内容的页面集中起来，集中进行磁盘操作，提升效率)</li></ul></li></ul></li></ul><h4 id="Cleaning-Policy（清除策略）"><a href="#Cleaning-Policy（清除策略）" class="headerlink" title="Cleaning Policy（清除策略）"></a>Cleaning Policy（清除策略）</h4><ul><li>解决的基本问题：系统应当在何时把一个已修改的页面写回辅存？</li><li>Demand cleaning（很及时处理，但是系统的性能降低）<ul><li>a page is written out only when it has been selected for replacement</li></ul></li><li>Precleaning<ul><li>pages are written out in batches</li></ul></li></ul><p><strong>Precleaning预清洗</strong></p><ul><li>Best approach uses page buffering.（最好的方法是使用页面缓冲）<ul><li>Replaced pages are placed in two lists.（替换的页面放在两个列表中）<ul><li>Modified and unmodified.（修改和未修改的）</li></ul></li><li>Pages in the modified list are periodically written out in batches.（修改列表中的页是周期性地分批写出来的）</li><li>Pages in the unmodified list are either reclaimed if referenced again or lost when its frame is assigned to another page.（未修改列表中的页在再次引用时被回收，或者在其帧被分配给另一个页时被丢失）</li></ul></li></ul><h4 id="Load-Control（负载控制）"><a href="#Load-Control（负载控制）" class="headerlink" title="Load Control（负载控制）"></a>Load Control（负载控制）</h4><ul><li>Determines the number of processes that will be resident in main memory.（决定驻留在主内存中的进程的数量）</li><li>Too few processes, many occasions when all processes will be blocked and much time will be spent in swapping.（进程太少，在很多情况下，所有进程都将被阻塞，并且在交换上花费大量时间）</li><li>Too many processes will lead to thrashing.（太多进程可能引起抖动）</li></ul><p><strong>均衡负载的方法</strong></p><ul><li>工作集方法、PFF算法等蕴涵着负载控制</li><li>L-S准则：如果发生页面失败的平均时间等于处理页面失败的平均时间，那么CPU的利用率将达到最大.</li><li>如果系统使用全局置换策略以及（LOCK置换算法，那么系统可以通过监视扫描指针的移动速率来调整系统负载：<ul><li>若扫描指针的移动述率低于某个给定的阀值，那么意味着近期顶失殿的次敏较少或者近期没有被引用的页面数较多（在内存里面的页面多，而且还没有被用到）；此时，系统可以放心地增加驻留内存的活动进程数。</li><li>若扫描指针的移动选率超出某个给定的闷值，那么意味着逆朝页面失败的次较较多或者近期没有被引用的页面较较少；此时，系统应当减少驻留内存的活动进程数</li></ul></li></ul><h4 id="Process-Suspension-（选择哪个进程进行中止）"><a href="#Process-Suspension-（选择哪个进程进行中止）" class="headerlink" title="Process Suspension （选择哪个进程进行中止）"></a>Process Suspension （选择哪个进程进行中止）</h4><ul><li>Lowest priority process.</li><li>Faulting process（缺页的进程）<ul><li>this process does not have its working set in main memory so it will be blocked anyway.</li></ul></li><li>Last process activated（最后被激活的进程：工作过的时间短，代价小）<ul><li>this process is least likely to have its working set resident.</li></ul></li><li>Process with smallest resident set（驻留集最小的进程：代价小）<ul><li>this process requires the least future effort to reload.</li></ul></li><li>Largest process（最大的进程：释放的空间大）<ul><li>obtains the most free frames</li></ul></li></ul><h4 id="Examples-of-OS"><a href="#Examples-of-OS" class="headerlink" title="Examples of OS"></a>Examples of OS</h4><ul><li>UNIX and Solaris Memory Management：Paging System.</li><li>Linux Memory Management：Page directory，Page middle directory（页间目录），Page table.</li><li>Windows 2000 Memory Management: W2K Paging.</li></ul><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>【1】Partitioning（分区）<br>【2】Paging（分页）<br>【3】Segmentation（分段）<br>【4】Relocation（重定位）<br>【5】Logical Organization（逻辑结构）<br>【6】Physical Organization（逻辑结构）<br>【7】Logical Physical Address（逻辑物理地址）<br>【8】Relative Absolute Address（相对绝对地址）<br>【9】Overlay（覆盖）<br>【10】Page Frame（页框）<br>【11】Translation Lookaside Buffer（联想存储器，快表）<br>【12】Intermal External Fragmentation（内外零头）<br>【13】Compaction（紧凑）<br>【14】Dynamic Partitioning（动态分区）<br>【15】Subdividing （分割）<br>【16】Modules（模块）<br>【17】Insufficient（不足的）<br>【18】Offset（偏离量）<br>【19】Thrashing（抖动）<br>【20】Suspension（中止）</p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System(5)</title>
      <link href="/2020/04/16/cao-zuo-xi-tong-5/"/>
      <url>/2020/04/16/cao-zuo-xi-tong-5/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统–进程管理–死锁与饥饿"><a href="#操作系统–进程管理–死锁与饥饿" class="headerlink" title="操作系统–进程管理–死锁与饥饿"></a>操作系统–进程管理–死锁与饥饿</h1><h3 id="内容提要"><a href="#内容提要" class="headerlink" title="内容提要"></a>内容提要</h3><p>·产生死锁与饥饿的原因<br>·解决死锁的方法<br>·死锁/同步的经典问题：哲学家进餐问题</p><h4 id="Deadlock（死锁定义）"><a href="#Deadlock（死锁定义）" class="headerlink" title="Deadlock（死锁定义）"></a>Deadlock（死锁定义）</h4><ul><li>Permanent blocking of a set of processes that either compete for system resources or communicate with each other.（因为竞争资源或者通信不当而造成的进程永久阻塞现象就称为死锁）</li><li>No efficient solution.（没有有效的解决办法：需要外力作用才能解开这种阻塞）</li><li>Involve conflicting needs for resources by two or more processes.（涉及两个或多个进程之间竞争资源产生的冲突）</li><li>存在单进程死锁问题，但是很少</li></ul><h4 id="Reusable-Resources（可重用资源）"><a href="#Reusable-Resources（可重用资源）" class="headerlink" title="Reusable Resources（可重用资源）"></a>Reusable Resources（可重用资源）</h4><ul><li>Used by one process at a time and not depleted（耗尽）by that use.(一次只被一个进程所使用但是这次使用并不会把资源消耗掉)</li><li>Processes obtain resources that they later release for reuse by other processes.（进程获取资源，之后它会释放这个资源给其他进程再次使用）</li><li>Processors，I/O channels，main and secondary memory，files，databases，and semaphores.（资源包括：处理器、I/O通道、主存和副存、文件、数据库和信号量。）</li><li>Deadlock occurs if each process holds one resource and requests the other.（如果每个进程持有一个资源并请求另一个资源，就会发生死锁）</li></ul><p><strong>Another Example of Deadlock（另一个死锁的例子）</strong></p><ul><li>Space is available for allocation of 200K bytes, and the following sequence of events occur.（空间可用来分配200K字节，并发生以下事件序列。）</li><li>进程A申请80K内存空间，进程B申请70K内存空间，进程A还要60K的内存资源，进程B也还要80K的内存。这样就会竞争内存资源而引起死锁</li><li>Deadlock occurs if both processes progress to their second reguest.（如果两个进程都进展到第二个请求，就会发生死锁。）</li></ul><h4 id="Consumable-Resources（可消耗资源）"><a href="#Consumable-Resources（可消耗资源）" class="headerlink" title="Consumable Resources（可消耗资源）"></a>Consumable Resources（可消耗资源）</h4><ul><li>Created（produced）and destroyed（consumed）by a process.（由进程创建(产生)和销毁(消耗)。）</li><li>Interrupts，signals，messages，and information in I/O buffers.（中断、信号、消息和I/O缓冲区中的信息。）</li></ul><p><strong>Example of Deadlock</strong></p><ul><li>Deadloclk occurs if receive is blocking（如果receive被阻塞，就会发生死锁）</li><li>P1; Receive(p2);Send(p2,M1);  P2;Receive(p1);Send(p1,M1); 都是只有接收了对方的信息才能发出信息给对方，因此双方都无法发消息给彼此，陷入死锁</li><li>此类死锁是由于设计失误造成的，很难发现，且潜伏期较长</li></ul><h4 id="死锁的产生条件Conditions-for-Deadlock"><a href="#死锁的产生条件Conditions-for-Deadlock" class="headerlink" title="死锁的产生条件Conditions for Deadlock"></a>死锁的产生条件Conditions for Deadlock</h4><ul><li>Mutual exclusion（互斥）<ul><li>only one process may use a resource at a time.（同一时间只允许一个进程使用这个资源）</li></ul></li><li>Hold-and-wait（保持并等待）<ul><li>A process may hold allocated resourees while awaiting assignment of other resources.（进程可以持有已分配的资源，同时等待其他资源的分配。）</li></ul></li><li>No preemption（不剥夺）<ul><li>No resource can be forcibly removed from a process holding it.（任何资源都不能从进程中强制移除）</li></ul></li><li>Circular wait（环路等待：有环路就一定有死锁）<ul><li>A closed chain of processes exists，such that each process holds at least one resource needed by the next process in the chain.（存在一个封闭的进程链，每个进程至少拥有该链中下一个进程所需的一个资源）</li></ul></li></ul><blockquote><p>互斥、保特并等待不夺是死锁产生的必要条件而不是充分条件(有可能会产生死锁)<br>出现环路就一定有死锁</p></blockquote><h3 id="解决死锁"><a href="#解决死锁" class="headerlink" title="解决死锁"></a>解决死锁</h3><h4 id="死锁的预防"><a href="#死锁的预防" class="headerlink" title="死锁的预防"></a>死锁的预防</h4><ul><li>间接方法，禁止前3个条件之一的发生：<ol><li>互压：是某些系统资源固有的属性，不能禁止</li><li>禁止“保赫并茎”条件：要求进程一次性地申请其所需的全部资源。若系统中没有足够的资源可分配给它，则进程阻塞。</li><li>禁止“不剩”条件：①若一个进程占用了某些系统资源，又申请新的资源，则不能立即分配给它。必须让它首先释放出已占用资源，然后再重新申请；②若一个进程申请的资源被另一个进程占有，0S可以剥夺低优先权进程的资源分配给高优先权的进程（要求此类可剥夺资源的状态易于保存和恢复，否则不能剥夺）</li></ol></li><li>直接方法，禁止条件4（环路等待）的发生<ol><li>即禁止“环整爹”条件：可以将系统的所有资源按类型不同进行线性排队，并赋予不同的序号。进程对某类资源的申请只能按照序号递增的方式进行。</li></ol></li></ul><blockquote><p>显然，此方法是低效的，它将影响进程执行的速度，甚至阻碍资源的正常分配。</p></blockquote><h4 id="避免死锁Deadlock-Avoidance"><a href="#避免死锁Deadlock-Avoidance" class="headerlink" title="避免死锁Deadlock Avoidance"></a>避免死锁Deadlock Avoidance</h4><ul><li>避免死镀的关键在于为进程分配资源之前，首先通过计算，判断此次分配是否会导致死锁，只有不会导致死锁的分配才可实行。</li><li>A decision is made dynamically whether thecurrent resource allocation request will，if granted，potentially lead to a deadlock.（动态地决定当前的资源分配请求如果被授予，是否会导致死锁）</li><li>Requires knowledge of future process request.（需要了解未来的进程要求）</li></ul><p><strong>Approaches to Deadlock Avoidance（避免方法）</strong></p><ul><li>Do not start a process if its demands might lead to deadlock.(如果进程的要求可能导致死锁，则不要启动该进程,即阻塞)</li><li>Do not grant an incremental resource request to a process if this allocation might lead to deadlock.（如果分配可能导致死锁，则不要向进程授予增量资源请求，让此进程阻塞）</li></ul><p><strong>Resource Allocation Denial（拒绝资源分配）</strong></p><ul><li>Referred to as the banker’s algorithm.(银行家算法)</li><li>State of the system is the currentallocation of resources to process.(系统状态是要处理的资源的当前位置)<ul><li>Safe state is where there is at least one sequence that does not result in deadlock.(安全状态是指至少有一个序列不会导致死锁)</li><li>Unsafe state is a state that is not safe.</li></ul></li></ul><p><strong>Safe State</strong></p><ul><li>指系统能按某种顺序如&lt;P1，P2，…，Pn&gt;（称&lt;P1，P2，..，Pn&gt;为安全序列），来为每个进程分配其所需资源，直至最大需求，使每个进程都可顺序完成，则称系统处于safe state</li></ul><p><strong>Safe State vs Unsafe State</strong></p><ul><li>并非所有不安全状态都是死锁状态</li><li>当系统进入不安全状态后，便可能进入死锁状态</li><li>只要系统处于安全状态，则可避免进入死锁状态</li></ul><p><strong>例：</strong></p><ul><li>假设系统中有3个进程P1、P2、P3，共有12台磁带机。进程P1共需要10台，P2、P3分别需要4台和9台。设T0时刻，进程P1、P2、P3已分别获得5台、2台和2台，尚有3台未分配。</li><li>T0时刻系统是安全的，因为存在一个安全序列&lt;P2，Pl，P3&gt;，即只要系统按此进程序列分配资源，每个进程都可顺利完成。</li><li>但是，如果不按照安全序列分配资源，则系统可能会由安全状态进入不安全状态<ul><li>例如，T0时刻以后，P3又申请1台磁带机。若系统将剩余3台中的1台分配给P3，则系统进入不安全状态。</li></ul></li></ul><h3 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h3><ul><li>该算法可用于银行发放一笔贷款前，预测该笔贷款是否会引起银行资金周转问题。</li><li>这里，银行的资金就类似于计算机系统的资源，贷款业务类似于计算机的资源分配。银行家算法能预测一笔贷款业务对银行是否是安全的，该算法也能预测一次资源分配对计算机系统是否是安全的。</li><li>为实现银行家算法，系统中必须设置若干数据结构。</li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ol><li>可利用资源向量Available：是一个具有m个元素的数组，其中的每一个元素代表一类可利用资源的数目，其初始值为系统中该类资源的最大可用数目。其值将随着该类资源的分配与回收而动态改变。Available[j]=k，表示系统中现有Rj；类资源k个。</li><li>最大需求矩阵Max：是一个n*m的矩阵，定义了系统中n个进程中的每一个进程对m类资源的最大需求。Max（i,j）=k，表示进程i对Rj类资源的最大需求数目为k个。</li><li>分配矩阵Allocation：是一个n*m的矩阵，定义了系统中每一类资源的数量。例如，Allocation（i，j）=k，表示进程i当前已分得R类资源的数目为k个。</li><li>需求矩阵Need：是一个n*m的矩阵，用以表示每一个进程尚需的各类资源数。例如，Need[i，j]=k，表示进程i还需要Rj，类资源k个，方能完成其任务。</li></ol><blockquote><p>上述三类矩阵存在下述关系：Need[i，i] = Max[i，j] - Allocation[i，j];需求矩阵=最大需求矩阵-已分配矩阵</p></blockquote><h4 id="流程-是下标，如P-i-为P下标为i"><a href="#流程-是下标，如P-i-为P下标为i" class="headerlink" title="流程 ({}是下标，如P{i} 为P下标为i)"></a>流程 ({}是下标，如P{i} 为P下标为i)</h4><p>设Request{i}；是进程P{i}；的请求向量。Request{i}[j]=k，表示进程P{i}，需要k个R{j}类资源。当进程P{i}，发出资源请求后，系统按下述步骤进行检查：</p><ol><li>如果，Request{i}；≤Need{i}；则转向步骤2；否则，出错</li><li>如果，Request{i}；≤Available，则转向步骤3；否则，表示尚无足够资源可供分配，进程P{i}；必须阻塞等待。</li><li>系统试探性地将P{i}；申请的资源分配给它，并修改下列数据结构中的值：Available：=Available - Request{i};  Allocation ：=Allocation +Request{i}; Need{i}：=Need{i}-Request{i}；</li><li>系统利用安全性算法，检查此次资源分配以后，系统是否处于安全状态。若安全，才正式将资源分配给进程P{i}，完成本次资源分配；否则，试探分配失效，让进程P{i}阻塞等待。</li></ol><h4 id="安全性算法"><a href="#安全性算法" class="headerlink" title="安全性算法"></a>安全性算法</h4><p>（1）设置两个工作向量：<br>①设置一个数组Finish[n]。当Finish[i]=True（0≤i≤n，n为系统中的进程数）时，表示进程P{i}，可以获得其所需的全部资源，而顺利执行完成。<br>②设置一个临时向量Work，表示系统可提供给选程继续运行的资源的集合，安全性算法随开始执行时。Work：=Available<br>（2）从进程集合中找到一个满足下列条件的进程：Finish[i]=false；并且Need≤Work；若找到满足该条件的进程，则执行步骤（3），否则执行步骤（4）；<br>（3）当进程P获得资源后，将顺利执行直至完成，并释放其所拥有的全部资源，故应执行以下操作：Work：=Work+Allocation{i}（Allocation{i}就是之前分配给P{i}的资源数）；以及Finish[i]：=True；转向步骤（2）；<br>（4）如果所有进程的Finish[i]=True，则表示系统处于安全状态，否则系统处于不安全状态。</p><p><strong>举例</strong><br>T0，时刻的资源分配情况</p><ul><li>假定系统中有四个进程P1，P2，P3，P4和三种类型的资源R1，R2，R3，每一种资源的数量分别为9、3、6，T，时刻的资源分配情况如下表所示：</li><li>从T0时刻的安全性分析可知，T0时刻存在着一个安全序列&lt;P2，P1，P4，P3&gt;，故，T0时刻系统是安全的。</li><li>假设T0时刻，进程P1申请资源，其请求向量为Request1（0，0，1），系统按银行家算法进行检查：Request1（0，0，1）≤Need（2，2，2），且Request1（0，0，1）≤ Available（0，1，1）</li><li>故，系统试探性地为P1分配资源，并修改Available，Allocation，和Need，向量。</li></ul><h4 id="Deadlock-Detection（检测死锁）"><a href="#Deadlock-Detection（检测死锁）" class="headerlink" title="Deadlock Detection（检测死锁）"></a>Deadlock Detection（检测死锁）</h4><h4 id="哲学家进餐问题Dining-Philosophers-Problem"><a href="#哲学家进餐问题Dining-Philosophers-Problem" class="headerlink" title="哲学家进餐问题Dining Philosophers Problem"></a>哲学家进餐问题Dining Philosophers Problem</h4><ul><li><strong>描述：</strong>有5个哲学家，他们的生活方式是交替地进行思考和进餐。哲学家们共用一张圆桌，分别坐在周围的五张椅子上。圆桌中间放有一大碗面条，每个哲学家分别有1个盘子和1支叉子。如果哲学家想吃面条，则必须拿到靠其最近的左右两支叉子。进餐完毕，放下叉子继续思考。</li><li><strong>要求：</strong>设计一个合理的算法，使全部哲学家都能进餐（非同时）。算法必须避免死锁和饥饿，哲学家互斥共享叉子。</li></ul><p><img src="https://s1.ax1x.com/2020/04/16/JEiDWF.png" alt="哲学家进餐问题示意图"></p><pre class="line-numbers language-java"><code class="language-java">Program diningphilosophers<span class="token punctuation">;</span>Var fork<span class="token operator">:</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">]</span>of <span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Var i<span class="token operator">:</span>integer<span class="token punctuation">;</span>procedure <span class="token function">philosopher</span><span class="token punctuation">(</span>i<span class="token operator">:</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>begin     repeat         think<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*哲学家正在思考*/</span>        <span class="token function">wait</span><span class="token punctuation">(</span>fork<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*产取其左边的筷子。*/</span>         <span class="token comment" spellcheck="true">/**在这个wait之后可能会被中断，那么就有可能产生5个哲学家每个人都只有拿到一个叉子*/</span>        <span class="token function">wait</span><span class="token punctuation">(</span>fork<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>mod <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*取其右边的筷子 mod 5是为了形成环路*/</span>        eat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*吃面条*/</span>        <span class="token function">signal</span><span class="token punctuation">(</span>fork<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>mod <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*放回右边的筷子制*/</span>        <span class="token function">signal</span><span class="token punctuation">(</span>fork<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*放回左边的筷子*/</span>    forever end<span class="token punctuation">;</span>begin parbegin     <span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>可能产生死锁！在第一个wait之后可能会被中断，那么就有可能产生5个哲学家每个人都只有拿到一个叉子</strong></li><li>可行的解决方案：只允许4个哲学家同时进餐厅用餐，则至少有一个哲学家可以拿到两支叉子进餐，完毕，放下叉子，其他哲学家就可进餐。不会出现死锁和饥饿</li></ul><pre class="line-numbers language-java"><code class="language-java">Program diningphilosophers<span class="token punctuation">;</span>Var fork<span class="token operator">:</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">]</span>of <span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Var room<span class="token operator">:</span><span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Var i<span class="token operator">:</span>integer<span class="token punctuation">;</span>procedure <span class="token function">philosopher</span><span class="token punctuation">(</span>i<span class="token punctuation">;</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>begin     repeat         think<span class="token punctuation">;</span><span class="token operator">/</span>哲学家正在思考<span class="token operator">*</span><span class="token operator">/</span>        <span class="token function">wait</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*第5位哲学家将被阻塞在room信号量队列*/</span>        <span class="token function">wait</span><span class="token punctuation">(</span>fork<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*取其左边的筷子*/</span>        <span class="token function">wait</span><span class="token punctuation">(</span>fork<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>mod <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*取其右边的筷子*/</span>        <span class="token function">signal</span><span class="token punctuation">(</span>fork<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>mod <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*放回右边的筷子*/</span>        <span class="token function">signal</span><span class="token punctuation">(</span>fork<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*放回左边的筷子*/</span>        <span class="token function">signal</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*唤醒阻塞在room信号量队列中的哲学家*/</span>    forever end<span class="token punctuation">;</span>begin parbegin     <span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">philosopher</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parend end<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>room这个信号量使得只有4个哲学家可以同时进入抢查找</p></blockquote><blockquote><p>银行家问题：了解怎么样解决多进程高度竞争资源而引起系统里面可能出现的死锁的一个通用方法问题</p></blockquote><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>【1】Involve（涉及）<br>【2】forcibly （强制地）<br>【3】Allocation（分配）</p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System(4)</title>
      <link href="/2020/04/11/cao-zuo-xi-tong-4/"/>
      <url>/2020/04/11/cao-zuo-xi-tong-4/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统–进程管理–进程并发"><a href="#操作系统–进程管理–进程并发" class="headerlink" title="操作系统–进程管理–进程并发"></a>操作系统–进程管理–进程并发</h1><h3 id="互斥与同步概述"><a href="#互斥与同步概述" class="headerlink" title="互斥与同步概述"></a>互斥与同步概述</h3><h4 id="Concurrency（并发性）"><a href="#Concurrency（并发性）" class="headerlink" title="Concurrency（并发性）"></a>Concurrency（并发性）</h4><ul><li>Mutual Exclusion and Synchronization</li><li>Deadlock And Starvation</li></ul><blockquote><p>Mutual Exclusion(互斥)：计算机里面一些硬件或者软件资源必须是互斥（不能同时）被访问的<br>Synchronization(同步)：当进程A因为资源C不能获取而进行自我阻塞，当进程B将C资源释放之后，进程B会通知其他进程资源C可以进行使用</p></blockquote><blockquote><p>Deadlock（死锁）：进程之间对资源的高度竞争，造成死锁问题<br>Starvation（饥饿）：进程长时间无法得到服务</p></blockquote><h4 id="Learning-objectives"><a href="#Learning-objectives" class="headerlink" title="Learning objectives"></a>Learning objectives</h4><p><strong>By the end of this lecture you should be able to：</strong></p><ul><li>Explain what’s Concurreney，Synchronization，Mutual exclusion，Deadlock，Starvation，Critical sections（临界区:对应临界资源，只能互斥使用：访问临界资源的代码叫做临界区）</li><li>掌握Requirements for Mutual Exclusion</li><li>掌握Approaches of Mutual Exclusion:Software Approaches&amp;Hardware Support-Semaphores、Monitors、Message Passing</li><li>区别掌握Types and meanings of Semaphores</li><li>掌握3个经典问题的解决方法：Producer/Consumer Problem、Readers/Writers Problem、Dining Philosophers Problem</li><li>理解Conditions for Deadlock、Deadlock Prevention、Deadlock Avoidance、Deadlock Detection、Strategies once Deadlock Detected，Banker’s Algorithm（Safe State irs.Unsafe State）</li></ul><h3 id="并发原理"><a href="#并发原理" class="headerlink" title="并发原理"></a>并发原理</h3><h4 id="Design-Issues-of-Concurrency（并发性的设计问题）"><a href="#Design-Issues-of-Concurrency（并发性的设计问题）" class="headerlink" title="Design Issues of Concurrency（并发性的设计问题）"></a>Design Issues of Concurrency（并发性的设计问题）</h4><ul><li>Communication among processes（进程之间的通信）</li><li>Sharing/Competing of resources（共享/竞争资源）</li><li>Synchronization of multiple processes（多进程同步）</li><li>Allocation of processor time（分配进程占有的时间）</li></ul><h4 id="Difficulties-with-Concurrency（设计并发的困难）"><a href="#Difficulties-with-Concurrency（设计并发的困难）" class="headerlink" title="Difficulties with Concurrency（设计并发的困难）"></a>Difficulties with Concurrency（设计并发的困难）</h4><ul><li>Sharing global resources(全局资源的共享)</li><li>Management of allocation of resources（资源的分配的管理）</li><li>Programming errors difficult to locate（程序错误）</li></ul><h4 id="Operating-System-Concerns（操作系统的关注点）"><a href="#Operating-System-Concerns（操作系统的关注点）" class="headerlink" title="Operating System Concerns（操作系统的关注点）"></a>Operating System Concerns（操作系统的关注点）</h4><ul><li>Keep track of active processes:PCB（对进程的PCB进行跟踪）</li><li>Allocate and deallocate resources（分配和回收资源）<ul><li>Processor time:scheduling</li><li>Memory:virtual memory</li><li>Files</li><li>I/O devices</li></ul></li><li>Protect data and resources（保护数据跟资源：是否可以进行无限制的修改等）</li><li>Result of process must be independent of the speed of execution of other concurrent processes.（进程的结果必须独立于其他并发进程的执行速度）</li></ul><h4 id="Process-Interaction（进程之间的相互作用-关系）"><a href="#Process-Interaction（进程之间的相互作用-关系）" class="headerlink" title="Process Interaction（进程之间的相互作用/关系）"></a>Process Interaction（进程之间的相互作用/关系）</h4><ul><li>Processes unaware of each other（进程之间都不知道其他进程的存在）<ul><li>Competition</li><li>Mutual exclusion，Deadlock，Starvation</li></ul></li><li>Processes indirectly aware of each other(进程间接地知道彼此)<ul><li>Cooperation by sharing(合作共享)</li><li>Mutual exclusion，Deadlock，Starvation，Data coherence（一致性：写数据的时候，不允许其他进程操作数据）</li></ul></li><li>Process directly aware of each other(进程之间地知道彼此)<ul><li>Cooperation by communication（进行通信）</li><li>Deadlock，Starvation</li></ul></li></ul><h3 id="临界资源、临界区与互斥"><a href="#临界资源、临界区与互斥" class="headerlink" title="临界资源、临界区与互斥"></a>临界资源、临界区与互斥</h3><h4 id="Competition-Among-Processes-for-Resources（进程之间的资源竞争）"><a href="#Competition-Among-Processes-for-Resources（进程之间的资源竞争）" class="headerlink" title="Competition Among Processes for Resources（进程之间的资源竞争）"></a>Competition Among Processes for Resources（进程之间的资源竞争）</h4><ul><li>Mutual Exclusion（互斥）<ul><li>Critical sectiors（临界区）:涉及到使用资源的的这一段代码就叫做临界区<ul><li>Only one program at a time is allowed in its critical section.（临界区一次只允许一个进程访问）</li><li>Eg.Only one process at a time is allowed to send command to the printer（打印机）（<strong><em>critical resource</em></strong>）.</li></ul></li></ul></li><li>Deadlock（死锁）</li><li>Starvation</li></ul><p><strong>Deadlock</strong></p><ul><li>例如，有两个进程P1、P2，竞争两个资源A、B。假设：<ul><li>占用：P1（B）and P2（A）</li><li>申请：P1（A）and P2（B）</li><li>结果：P1、P2永久等待（死锁）</li><li>P1占有B资源又申请A资源，而p2占有A资源又去申请B资源，就形成一个环路，P1、P2互相等待，<strong>都处于阻塞态，都在等待对方把资源释放然后来唤醒自己</strong></li></ul></li></ul><h4 id="Mutual-Exclusion-Mechanism（互斥机制）"><a href="#Mutual-Exclusion-Mechanism（互斥机制）" class="headerlink" title="Mutual Exclusion Mechanism（互斥机制）"></a>Mutual Exclusion Mechanism（互斥机制）</h4><blockquote><p>entry section(进入区：判断是否能进去) ==&gt; critical section(临界区) ==&gt; exit section(退出区：退出之后要有表明自己已经退出来的动作)</p></blockquote><h4 id="Cooperation-Among-Processes-by-Sharing（通过共享进行进程之间的合作）"><a href="#Cooperation-Among-Processes-by-Sharing（通过共享进行进程之间的合作）" class="headerlink" title="Cooperation Among Processes by Sharing（通过共享进行进程之间的合作）"></a>Cooperation Among Processes by Sharing（通过共享进行进程之间的合作）</h4><ul><li>Writing must be mutually exclusive.(写数据必须保存互斥)</li><li>Critical sections are used to provide data integrity（临界区来保证数据完整性）.</li><li>Messages are passed（消息的传递）<ul><li>Mutual exclusion is not a control requirement.（不要求要进行互斥）</li></ul></li><li>Possible to have deadlock（可能会产生死锁）<ul><li>Each process waiting for a message from the other process.（每个进程都在等待来自另一个进程的消息。）</li></ul></li><li>Possible to have starvation（可能会产生饥饿）<ul><li>Two processes sending message to each other while another process waits for a message.（有三个进程进行通信：两个进程相互发送消息，而另一个进程等待消息）</li></ul></li></ul><h4 id="Requirements-for-Mutual-Exclusion（互斥的要求）"><a href="#Requirements-for-Mutual-Exclusion（互斥的要求）" class="headerlink" title="Requirements for Mutual Exclusion（互斥的要求）"></a>Requirements for Mutual Exclusion（互斥的要求）</h4><ul><li>Only one process at a time is allowed in the critical section for a resource.（在资源的临界区一次只允许一个进程）</li><li>A process that halts in its non-critical section must do so without interfering with other processes.（一个进程在它的非临界区停止时，必须在不干扰其他进程的情况下停止）</li><li>No deadlock or starvation.（没有死锁和饥饿）</li><li>A process must not be delayed access to a critical section when there is no other process using it.（如果没有进程在使用临界区，那么进程在要申请进入临界区的时候不允许被延误，必须马上执行）</li><li>No assumptions are made about relativeprocess speeds or number of processes.（不要做任何关于进程速度或进程数量的假设）</li><li>A process remains inside its critical section for a finite time only.（一个进程仅在有限的时间内保持在其临界区内。）</li></ul><blockquote><p>空闲让进、忙着等待、有限等待、让权等待。(让权等待:不能拿着这个临界资源又去等待其他的资源 )</p></blockquote><h4 id="Approaches-of-Mutual-Exclusion（解决互斥的方法）"><a href="#Approaches-of-Mutual-Exclusion（解决互斥的方法）" class="headerlink" title="Approaches of Mutual Exclusion（解决互斥的方法）"></a>Approaches of Mutual Exclusion（解决互斥的方法）</h4><ul><li>Software Approaches(软件方法)<ul><li>Memory access level</li><li>Access to the same location in main memory are serialized by some sort of memory arbiter.</li><li>Dekker’s Algorithm</li><li>Peterson’s Algorithm</li><li>To mutual exclusion for two processes.</li><li>To illustrate most of the common bugs encountered in developing concurrent programs.</li><li>Is likely to have high processing overhead.</li><li>The risk of logical errors is significant.</li></ul></li><li>Hardware Support(硬件方法)</li><li><strong><em>Semaphores(信号量方法)</em></strong></li><li>Monitors(管程方法)</li><li>Message Passing(消息传递方法)</li></ul><h3 id="Mutual-Exclusion-Hardware-Support-硬件方式实现互斥"><a href="#Mutual-Exclusion-Hardware-Support-硬件方式实现互斥" class="headerlink" title="Mutual Exclusion:Hardware Support(硬件方式实现互斥)"></a>Mutual Exclusion:Hardware Support(硬件方式实现互斥)</h3><h4 id="屏蔽中断"><a href="#屏蔽中断" class="headerlink" title="屏蔽中断"></a>屏蔽中断</h4><ul><li>Interrupt Disabling(中断不可用)<ul><li>A process runs until it invokes an operating-system service or until it is interrupted.（进程将一直运行，直到调用操作系统服务或中断为止）</li><li>Disabling interrupts guarantees mutual exclusion.（停止中断保证互斥）</li></ul></li><li>The price of this approach is high.（这种方式的代价很高）</li><li>Multiprocessing（多处理机系统）<ul><li>Disabling interrupts on one processor will not guarantee mutual exclusion.（在一个处理器上禁用中断并不保证互斥。）</li></ul></li></ul><blockquote><p>Disable interrupts(禁止中断) –&gt; critical section（进入临界区） –&gt; Enable interrupts（允许中断）</p></blockquote><h4 id="Test-and-Set-指令"><a href="#Test-and-Set-指令" class="headerlink" title="Test and Set 指令"></a>Test and Set 指令</h4><blockquote><p>机器指令期间没有中断点</p></blockquote><p><strong>Special Machine Instructions（·特殊的机器指令）</strong></p><ul><li>Performed in a single instruction cyele.（在一个指令周期内执行。）</li><li>Not subject to interference from other</li><li>instructions（避免冲突）</li><li>Reading and writing</li><li>Reading and testing</li></ul><p><strong>Test and Set Instruction</strong></p><pre class="line-numbers language-java"><code class="language-java">function <span class="token function">testset</span><span class="token punctuation">(</span>var i<span class="token operator">:</span> integer<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>begin <span class="token keyword">if</span> i<span class="token operator">=</span><span class="token number">0</span> then     begin         i<span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         testset<span class="token operator">:</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>     end     <span class="token keyword">else</span> testset<span class="token operator">:</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> end<span class="token comment" spellcheck="true">//i=0,testset:=true; 处于空闲状态。i=1，testset:=false; 处于忙状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">program mutualexclusion；<span class="token keyword">const</span> n<span class="token operator">=</span><span class="token punctuation">.</span>…<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*进程数*/</span>var bolt<span class="token operator">:</span>integer<span class="token punctuation">;</span>procedure P（i<span class="token operator">:</span>integer）<span class="token punctuation">;</span>begin     repeat         repeat <span class="token punctuation">{</span>nothing<span class="token punctuation">}</span>until testset（bolt）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果testset是false，就在此循环检测，是true就进入到临界区&lt;进入区></span>        <span class="token operator">&lt;</span>临界区<span class="token operator">></span><span class="token punctuation">;</span>        bolt：<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出了临界区，把bolt设置为0，让其他进程可以占用这个临界区&lt;退出区></span>        <span class="token operator">&lt;</span>其余部分<span class="token operator">></span>    forever end<span class="token punctuation">;</span>begin<span class="token operator">/</span><span class="token operator">*</span>主程序<span class="token operator">/</span>bolt：<span class="token operator">=</span><span class="token number">0</span>；    parhegin         <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">P</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    parend end<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Exchange Instruction</strong>（交换指令）</p><pre class="line-numbers language-java"><code class="language-java">procedure <span class="token function">exchange</span><span class="token punctuation">(</span>var r<span class="token operator">:</span> register<span class="token punctuation">;</span>var m<span class="token operator">:</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span>var temp<span class="token punctuation">;</span> begin     temp<span class="token operator">:</span><span class="token operator">=</span>m<span class="token punctuation">;</span>     m<span class="token operator">:</span><span class="token operator">=</span>r<span class="token punctuation">;</span>     r<span class="token operator">:</span><span class="token operator">=</span>temp<span class="token punctuation">;</span> end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">program mutualexclusion<span class="token punctuation">;</span><span class="token keyword">const</span> n<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*进程数*/</span>var holt<span class="token operator">:</span>integer<span class="token punctuation">;</span>procedure <span class="token function">P</span><span class="token punctuation">(</span>i<span class="token operator">:</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>var key<span class="token operator">:</span>integer<span class="token punctuation">;</span>begin     repeat         key<span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        repeat <span class="token function">eschange</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>bolt<span class="token punctuation">)</span>until key<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>临界区<span class="token operator">></span><span class="token punctuation">;</span>        bolt<span class="token operator">:</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>其余部分<span class="token operator">></span>    forever end<span class="token punctuation">;</span>begin<span class="token operator">/</span><span class="token operator">*</span>主程序<span class="token operator">/</span>bolt：<span class="token operator">=</span><span class="token number">0</span>；    parhegin         <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">P</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    parend end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Advantages(优势)</strong></p><ul><li>Applicable to any number of processes on either a single processor or multiple processors sharing main memory.（适用于共享主存的单处理器或多处理器上的任意数量的进程。）</li><li>It is simple and therefore easy to verify.</li><li>It can be used to support multiple critical sections.</li></ul><p><strong>Disadvantages（缺陷）</strong></p><ul><li>Busy-waiting is employed.（忙等待使用。：降低处理器的使用效率）</li><li>Starvation is possible.<ul><li>when a process leaves a critical section and more than one process is waiting.</li></ul></li><li>Deadlock is possible.<ul><li>If a low priority process has the critical region and a higher priority process needs, the higher priority process will obtain the processor to wait for the critical region.（如果一个低优先级的进程有临界区，而一个高优先级的进程需要，高优先级的进程将获得处理器来等待临界区。低优先级占有临界区，但是高优先级进程占有处理器，低优先级进程退出临界区需要处理器）</li></ul></li></ul><h3 id="信号量Semaphores"><a href="#信号量Semaphores" class="headerlink" title="信号量Semaphores"></a>信号量Semaphores</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>Special variable called a semaphore is used for signaling.(一种特殊变量信号量用于发送信号：进程之间用来交换信息的)</li><li>If a process is waiting for a signal, it is blocked until that signal is sent.（如果一个进程在等待一个信号，那么他将会被阻塞直到哪个信号被发送）</li><li>Wait and Signal operations cannot be interrupted.（等待和信号操作不能被中断）</li><li>Queue is used to hold processes waiting on the semaphore.（队列用于保持进程对信号量的等待。）</li><li>Semaphore is a variable that has an integer value.（信号量是一个拥有整数值的变量）<ul><li>May be initialized to a nonnegative number.（可能初始化一个非负整数）</li><li>Wait and Signal are primitives(atomic, cannot be interrupted and each routine can be treated as an indivisible step).（等待和信号是基本的(原子的，不能被中断，每个例程可以被视为一个不可分割的步骤)。）</li></ul></li><li>Wait operation decrements the semaphore value<ul><li><strong><em>wait（s）：s-1</em></strong></li><li>wait操作：申请资源且可能阻塞自己（s&lt;0）</li></ul></li><li>Signal operation increments semaphore value<ul><li><strong><em>signal（s）：s+1</em></strong></li><li>signal操作：释放源并乘醒醒塞进程（s&lt;0）(唤醒之后的进程不用再执行wait操作，直接进入临界区)</li></ul></li></ul><h4 id="Types-of-Semaphores（信号量类型）"><a href="#Types-of-Semaphores（信号量类型）" class="headerlink" title="Types of Semaphores（信号量类型）"></a>Types of Semaphores（信号量类型）</h4><ul><li>General Semaphore（通用信号量）<ul><li>通用信号量是记录型，其中一个域为整型，另一个域为队列，其元素为等待该信号量的阻塞进程（FIFO）</li></ul></li><li>Binary Semaphore（二进制信号量）<ul><li>只能是0或1</li></ul></li></ul><p><strong>General Semaphore</strong></p><pre class="line-numbers language-java"><code class="language-java">type semaphore<span class="token operator">=</span>record count<span class="token operator">:</span>integer<span class="token punctuation">;</span> queue<span class="token operator">:</span>list of process end<span class="token punctuation">;</span>var s<span class="token operator">:</span>semaphore<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="wait-signal-Operations-wait-signal操作"><a href="#wait-signal-Operations-wait-signal操作" class="headerlink" title="wait/signal Operations(wait/signal操作)"></a>wait/signal Operations(wait/signal操作)</h4><p><strong>General Semaphore</strong>定义Semaphore</p><pre class="line-numbers language-java"><code class="language-java">type semaphore<span class="token operator">=</span>record count<span class="token operator">:</span>integer<span class="token punctuation">;</span> queue<span class="token operator">:</span>list of process end<span class="token punctuation">;</span>var s<span class="token operator">:</span>semaphore<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>wait(s)</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">wait</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span>s<span class="token punctuation">.</span>count<span class="token operator">:</span><span class="token operator">=</span>s<span class="token punctuation">.</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">if</span> s<span class="token punctuation">.</span>count<span class="token operator">&lt;</span><span class="token number">0</span> then begin     block P<span class="token punctuation">;</span>     insert P into s<span class="token punctuation">.</span>queue<span class="token punctuation">;</span> end<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>signal(s)</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">signal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span>s<span class="token punctuation">.</span>count<span class="token operator">:</span><span class="token operator">=</span>s<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">if</span> s<span class="token punctuation">.</span>count ≤ <span class="token number">0</span> then begin <span class="token comment" spellcheck="true">/*发现阻塞队列里面有进程，唤醒其中一个*/</span>    wakeup the first P<span class="token operator">:</span>     remove the P from s<span class="token punctuation">.</span>queue<span class="token punctuation">;</span> end<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**wait(s)和signal(s)的使用</p><pre class="line-numbers language-java"><code class="language-java">program mutualexcdlusian<span class="token keyword">const</span> n<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*进程数*/</span>var s<span class="token operator">:</span><span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义信号量s,s.count初始化为1,可以为其他值？*/</span>procedure <span class="token function">P</span><span class="token punctuation">(</span>i<span class="token operator">:</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>begin     repeat         <span class="token function">wait</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>临界区<span class="token operator">></span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>其余部分<span class="token operator">></span>    forever end<span class="token punctuation">;</span>begin<span class="token operator">/</span><span class="token operator">*</span>主程序<span class="token operator">/</span>bolt：<span class="token operator">=</span><span class="token number">0</span>；    parhegin         <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">P</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    parend end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="信号量的类型"><a href="#信号量的类型" class="headerlink" title="信号量的类型"></a>信号量的类型</h4><ul><li>信号量分为：互斥信号量和资源信号量。</li><li>互斥信号量用于申请或释放资源的使用权，常初始化为1。</li><li>资源信号量用于申请或归还资源，可以初始化为大于1的正整数，表示系统中某类资源的可用个数。</li><li>wait操作用于申请资源（或使用权），进程执行wait原语时，可能会阻塞自己；</li><li>signal操作用于释放资源（或归还资源使用权），进程执行signal原语时，有责任唤醒一个阻塞进程。</li><li>信号量的意义<ul><li>1.互后信号量：申请/释放使用权，常初始化为1</li><li>2.资源信号量：申请/归还资源，资源信号量可以初始化为一个正整数（表示系统中某类资源的可用个数），s.count的意义为：s.count&gt;0：表示还可执行wait（s）而不会阻塞的进程数（可用资源数）。s.count&lt;0：表示s.queue队列中阻塞进程的个数（被阻塞进程数）</li></ul></li></ul><p><strong>s.count的取值范围</strong></p><ul><li>当仅有两个并发进程共享临界资源时，互斥信号量仅能取值0，1，-1；</li><li>其中：<ul><li>s.count=1，表示无进程进入临界区</li><li>s.count=0，表示已有一个进程进入临界区</li><li>s.count=-1，则表示已有一进程正在等待进入临界区</li></ul></li><li>当用s来实现n个进程的互斥时，s.count函敢值范围为1 ~ -(n-1)</li></ul><blockquote><p>操作系统内核以系统调用形式提供wait和signal原语，应用程序通过该系统调用实现进程间的互斥<br>工程实践证明，利用信号量方法实现进程互斥是高效的，一直被广泛采用。</p></blockquote><h3 id="生产者-消费者问题Producer-Consumer-Problem"><a href="#生产者-消费者问题Producer-Consumer-Problem" class="headerlink" title="生产者/消费者问题Producer/Consumer Problem"></a>生产者/消费者问题Producer/Consumer Problem</h3><ul><li>One or more producers are generating data and placing data in a buffer.(一个或多个生产者正在生成数据并将数据放在缓冲区中)</li><li>A single consumer is taking items out of the buffer one at time(单个消费者每次从缓冲区中取出一个项)</li><li>Only one producer or consumer may access the buffer at any one time(互斥使用buffer：任何时候只有一个生产者或消费者可以访问缓冲区)</li></ul><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p><strong>·任务及要求</strong></p><ul><li>1.buffer不能并行操作（互斥），即某时刻只允许一个实体（ producer or consumer）访问buffer</li><li>2.控制 producer and consumer同步读/写buffer（同步），即不能向满 buffer写数据;不能在空buffer中取数据</li></ul><p><strong>生产者/消费者必须互斥</strong></p><ul><li>如果对生产者和消费者都不加以控制，那么生产者和消费者可能同时进入缓冲区，甚至可能同时读/写一个存储单元，将导致执行结果不确定</li><li>这显然是不允许的。必须使生产者和消费者互斥进入缓冲区。即，某时刻只允许一个实体（生产者或消费者）访问缓冲区，生产者互斥消费者和其它任何生产者</li></ul><p><strong>生产者/消费者必须同步</strong></p><ul><li>生产者不能向满缓冲区写数据，消费者也不能在空缓冲区中取数据，即生产者与消费者必须同步。</li></ul><h4 id="生产者与消费者问题解决流程"><a href="#生产者与消费者问题解决流程" class="headerlink" title="生产者与消费者问题解决流程"></a>生产者与消费者问题解决流程</h4><p><img src="https://s1.ax1x.com/2020/04/16/JFwHud.png" alt="生产者/消费者执行流程图"></p><p><strong>流程的伪代码</strong></p><pre class="line-numbers language-java"><code class="language-java">program producer_consumersizeofbuffer<span class="token operator">=</span>…<span class="token punctuation">;</span><span class="token operator">/</span>缓冲区大小<span class="token operator">*</span><span class="token operator">/</span><span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span>互斥信号量s，初始化为<span class="token number">1</span><span class="token operator">*</span>n<span class="token operator">:</span> <span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*资源信号量n，数据单元，初始化为0*/</span>e<span class="token operator">:</span> <span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span> sizeofbuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*资源信号量e，空存储单元*/</span><span class="token comment" spellcheck="true">/*生产者*/</span>procedure producer<span class="token punctuation">;</span>begin    repeat        生产一条数据<span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        存入一条数据<span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*生产了一条数据*/</span>    foreverend<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*消费者*/</span>procedure consumer<span class="token punctuation">;</span>begin    repeat        <span class="token function">wait</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        取一条数据<span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*取了数据多了一个空单元，并且可能唤醒生产者*/</span>        消费数据；    foreverend<span class="token punctuation">;</span>begin<span class="token operator">/</span><span class="token operator">*</span>主程序<span class="token operator">/</span>bolt：<span class="token operator">=</span><span class="token number">0</span>；    parhegin         producer<span class="token punctuation">;</span>        consumer<span class="token punctuation">;</span>    parend end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>wait,signal的位置都不能交换</p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>1.进程应该先申请资源信号量，再申请互斥信号量，顺序不能颠倒。</li><li>2.对任何信号量的wlit与 signal操作必须配对。同一进程中的多对wait与 signal语句只能嵌套，不能交叉。</li><li>3.对同一个信号量的wat与 signal可以不在同个进程中。</li><li>4.wait与signal语句不能颠倒顺序，wait语句定先于signal语句。</li><li>先获取资源，再获取使用权</li></ul><h3 id="读者-写者问题Readers-writers-problem"><a href="#读者-写者问题Readers-writers-problem" class="headerlink" title="读者/写者问题Readers /writers problem"></a>读者/写者问题Readers /writers problem</h3><ul><li>Any number of readers may simultaneously read the file（任何数量的读者都可以同时读取文件）</li><li>Only one writer at a time may write to the file（一个时间内，只有一个写者可以向文件里面写数据）</li><li>If a writer is writing to the file,no reader may read it.（如果写者正在对文件进行写入，则任何读者都不能读它。互斥）</li></ul><blockquote><p>可用于解决多个进程共享一个数据区(文件、内存区、一组寄存器等),其中若干读进程只能读数据,若干写进程只能写数据等实际问题。</p></blockquote><p>读者优先：文件里面有读者，那么待会有写者和读者过来，那么读者可以进去，写者等待，等读者全部出来了，写者才能进去<br>写者优先：文件里面有读者，如果来了写者，那么接下来的读者来了之后都不可以进去文件，等到里面的读者出来了之后，写者进去，待写者也结束了操作之后，后来的读者才可以进去文件</p><h4 id="读者优先（要求理解）"><a href="#读者优先（要求理解）" class="headerlink" title="读者优先（要求理解）"></a>读者优先（要求理解）</h4><blockquote><p><strong>Readers have priority:</strong>指一旦有读者正在读数据,允许多个读者同时进入读数据,只有当全部读者退出,才允许写者进入写数据。<strong><em>Writers are subject to starvation(容易导致写者饥饿)</em></strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java">对readercount的修改要求互斥，一次只能有一个修改readercount，通过信号量x来达成互斥program reader_writers<span class="token keyword">const</span> readcount<span class="token operator">:</span> integer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//统计读者个数</span>var x<span class="token punctuation">,</span>wsem<span class="token operator">:</span> <span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//互斥信号量,初始化为1</span>procedure readerbegin    repeat        <span class="token function">wait</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        readcount<span class="token operator">:</span> <span class="token operator">=</span> readcount <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> readcount<span class="token operator">=</span> <span class="token number">1</span> then <span class="token function">wait</span><span class="token punctuation">(</span>wsem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*如果里面有写者wait(wsem)会使读者在此阻塞*/</span>        <span class="token comment" spellcheck="true">/*如果第一个读者没有被阻塞，那么wesm信号量减一会小于0，就是说写者将无法进入文件，写者会被阻塞*/</span>        <span class="token function">signal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        读数据<span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        readcount<span class="token operator">:</span><span class="token operator">=</span> readcount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> readcount <span class="token operator">=</span> <span class="token number">0</span> then <span class="token function">signal</span><span class="token punctuation">(</span>wsem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*最后一个退出的读者要唤醒写者的进程*/</span>        <span class="token function">signal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    foreverend<span class="token punctuation">;</span>procedure writer<span class="token punctuation">;</span>begin    repeat<span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span>wsem<span class="token punctuation">)</span><span class="token punctuation">;</span>    写数据<span class="token punctuation">;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>wsem<span class="token punctuation">)</span><span class="token punctuation">;</span>foreverend<span class="token punctuation">;</span>begin<span class="token comment" spellcheck="true">/*主程序*/</span>readcount <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>parbegin    reader<span class="token punctuation">;</span>    writer<span class="token punctuation">;</span>parend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写者优先"><a href="#写者优先" class="headerlink" title="写者优先"></a>写者优先</h4><blockquote><p><strong>Writers have priority（写者优先）:</strong>指只要有一个 writer申请写数据,则不再允许新的 reader进入读数据</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*不懂*/</span>program readers_writers<span class="token punctuation">;</span><span class="token keyword">const</span> readcount<span class="token punctuation">,</span> writecount<span class="token operator">:</span> integer<span class="token punctuation">;</span>var x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>Z<span class="token punctuation">,</span>rsem<span class="token punctuation">,</span>wsem<span class="token operator">:</span> <span class="token function">semaphore</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*各种信号量，，达成互斥的目的*/</span>procedure reader<span class="token punctuation">;</span>    repeat        <span class="token function">wait</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>rsem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        readcount <span class="token operator">:</span><span class="token operator">=</span> readcount <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> readcount<span class="token operator">=</span> <span class="token number">1</span> then <span class="token function">wait</span><span class="token punctuation">(</span>wsem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>rsem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        读数据<span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        readcount<span class="token operator">:</span> readcount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> readcount <span class="token operator">=</span><span class="token number">0</span> then <span class="token function">signal</span><span class="token punctuation">(</span>wsem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    foreverend<span class="token punctuation">;</span>procedure writer<span class="token punctuation">;</span>begin     repeat         <span class="token function">wait</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        writecount<span class="token operator">:</span><span class="token operator">=</span>writecount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> writecount<span class="token operator">=</span><span class="token number">1</span> then <span class="token function">wait</span><span class="token punctuation">(</span>rsem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span>wsem<span class="token punctuation">)</span><span class="token punctuation">;</span>        写数据<span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>wsem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        writecount<span class="token operator">:</span><span class="token operator">=</span>writecount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> writecount<span class="token operator">=</span><span class="token number">0</span> then <span class="token function">signal</span><span class="token punctuation">(</span>rsem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    forever end<span class="token punctuation">;</span>begin<span class="token comment" spellcheck="true">/*主程序*/</span>readcount<span class="token operator">:</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>writecount<span class="token operator">:</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>parbegin     reader<span class="token punctuation">;</span>    writer<span class="token punctuation">;</span>parendend<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Monitor（管程）——-面向对象方法"><a href="#Monitor（管程）——-面向对象方法" class="headerlink" title="Monitor（管程）—— 面向对象方法"></a>Monitor（管程）—— 面向对象方法</h3><blockquote><p>类似工具包</p></blockquote><ul><li>用信号量实现互斥，编程容易出错（wait、signal的出现顺序和位置非常重要）</li><li>Support at Programming-language level</li><li>管程是用并发pascal、paseal plus、Modula-2、Modula-3等语言编写的程序，现在已形成了许多库函数。管程可以锁定任何对象，如链表或链表的元素等。</li><li>用管程实现互斥比用信号量实现互斥，更简单、方便</li><li>Monitor is a software module（管程是软件模块），由若干过程、局部于管程的数据、初始化语句（组）组成，是一个封装对象</li><li>Chief characteristics(主要特点)<ul><li>Local data variables are accessible only by the monitor.(局部变量只能在管程里面使用)</li><li>Process enters monitor by invoking one of its procedures.（进程要使用临界资源的话是通过调用管程里面的一个过程来实现的）</li><li>Only one process may be executing in the monitor at a time.（一次只允许一个进程进到管程里面去使用）</li></ul></li></ul><h3 id="消息传递-Message-Passing"><a href="#消息传递-Message-Passing" class="headerlink" title="消息传递 Message Passing"></a>消息传递 Message Passing</h3><blockquote><p>消息传递本来是一种进程通信方式</p></blockquote><ul><li>Enforce mutual exclusion</li><li>Exchange information <ul><li>send(destination,message)</li><li>receive(source,message)</li></ul></li></ul><blockquote><p>send,receive也是原语</p></blockquote><p><strong>Synchronization</strong></p><ul><li>Sender and receiver may or may not be blocked（waiting for message）.（发送方和接收方可能被阻塞，也可能没有被阻塞(等待消息）</li><li>Blocking send，blocking receive（阻塞发送，阻塞接收）<ul><li>Both sender and receiver are blocked until message is delivered.（发送方和接收方都被阻塞，直到消息被发送。）</li><li>Called a rendezvous（紧密同步，汇合）</li><li>A向B发送消息，A要阻塞等待B给它一个回应，B要等待A给它的信息</li></ul></li><li>Nonblocking send, blocking receive（非阻塞发送，阻塞接收）<ul><li>Sender continues processing such as sending messages as quickly as possible.（发送方持续处理，如尽快发送消息）</li><li>Receiver is blocked until the requested message arrives.（接收方被阻塞，直到请求的消息到达。）</li></ul></li><li>Nonblocking send,nonblocking receive（都不需要阻塞）<ul><li>Neither party is required to wait（都不需要等待）</li></ul></li></ul><p><strong>Addressing（寻址）</strong></p><ul><li>Direct addressing<ul><li>Send primitive includes a specifie identifier of the destination process.</li><li>Receive primitive could know ahead of time which process a message is expected.</li><li>Receive primitive could use source parameter to return a value when the receive operation has been performed.</li></ul></li><li>Indirect addressing<ul><li>messages are sent to a shared data structure consisting of queues.*</li><li>queues are called mailboxes.</li><li>one process sends a message to the mailbox and the other process picks up the message from the mailbox.</li></ul></li></ul><h4 id="Message-Passing-Mutual-Exclusion"><a href="#Message-Passing-Mutual-Exclusion" class="headerlink" title="Message Passing(Mutual Exclusion)"></a>Message Passing(Mutual Exclusion)</h4><ul><li>若采用Nonblocking send，blocking receive（<strong><em>非阻塞发送，阻塞接收</em></strong>）</li><li>多个进程共享<strong><em>邮箱mnutex</em></strong>。若进程申请进入临界区，首先申请从mutex邮箱中接收一条消息。若邮箱空，则进程阻塞；若进程收到邮箱中的消息，则进入临界区，执行完毕退出，并将该消息放回邮箱mutex。该消息as a <strong><em>token</em></strong>在进程间传递。<strong><em>消息只有一条</em></strong></li></ul><h4 id="Message-Passing-Producer-Consumer-Problem"><a href="#Message-Passing-Producer-Consumer-Problem" class="headerlink" title="Message Passing(Producer/Consumer Problem)"></a>Message Passing(Producer/Consumer Problem)</h4><ul><li>解决有限buffer Producer/Consumer Problem</li><li>设两个邮箱：<ul><li>Mayconsume:Producer存放数据，供Consumer取走（即buffer数据区）</li><li>Mayproduce：存放空消息的buffer空间()</li></ul></li></ul><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>【1】Concurrency（并发性）<br>【2】Mutual Exclusion（互斥）<br>【3】Synchronization（同步）<br>【4】Deadlock（死锁）<br>【5】Starvation（饥饿）<br>【6】Critical sections（临界区）<br>【8】Monitors（管程）<br>【9】initialized（初始化）<br>【10】primitives（基元：原子）<br>【11】buffer（缓冲）</p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MCS51单片机</title>
      <link href="/2020/03/24/dan-pian-ji-c51-1/"/>
      <url>/2020/03/24/dan-pian-ji-c51-1/</url>
      
        <content type="html"><![CDATA[<h1 id="C51单片机"><a href="#C51单片机" class="headerlink" title="C51单片机"></a>C51单片机</h1><h3 id="单片机概述"><a href="#单片机概述" class="headerlink" title="单片机概述"></a>单片机概述</h3><h4 id="单片机主要技术指标"><a href="#单片机主要技术指标" class="headerlink" title="单片机主要技术指标"></a>单片机主要技术指标</h4><ul><li><strong>字长</strong><ul><li>8位机，16位机，32位机</li></ul></li><li><strong>内存容量：</strong><ul><li>容量单位：1K=2^10=1024，1M=2^20  8K、64K、16M、64M。  </li></ul></li><li><strong>运算速度：</strong><ul><li>时钟频率、主频、每秒运算次数 6MHz、12MHz、24MHz、100MHz、300MHz。</li></ul></li><li><strong>内存存取周期</strong>：<ul><li>50nS、70nS、200nS。</li></ul></li></ul><h4 id="单片机运算基础"><a href="#单片机运算基础" class="headerlink" title="单片机运算基础"></a>单片机运算基础</h4><ul><li><strong>进制转换</strong></li><li>原码</li><li>反码</li><li>补码</li></ul><h4 id="结构框图"><a href="#结构框图" class="headerlink" title="结构框图"></a>结构框图</h4><p><img src="https://s1.ax1x.com/2020/03/24/8Lb6UJ.png" alt="8051单片机的主要功能方框图"></p><p>振荡器和时序OSC：时钟，主频</p><blockquote><ul><li>中断:打断程序运行（中断有优先级）<ul><li>内部中断：我自己编一条指令让其中断</li><li>外部中断</li></ul></li></ul></blockquote><h3 id="单片机结构"><a href="#单片机结构" class="headerlink" title="单片机结构"></a>单片机结构</h3><p><img src="https://s1.ax1x.com/2020/03/24/8Lb6UJ.png" alt="8051单片机的主要功能方框图"></p><blockquote><p>计算机由：CPU（中央处理器）+存储器+I/O设备(这三个部分通过总线连接)<br>总线（Bus）：这个总线既可以走数据，还可以走一些控制命令，是一个公共的通道（公共的数据通道或者说地址通道）<br>数据总线：走数据的，地址总线：走地址的，控制总线：走控制的</p></blockquote><p><strong>单片机：就是把这三个部件加三条总线都把它们合到一块去了，做成一个芯片</strong></p><blockquote><p>指令:是计算机能够运行的最小单位(C语言的一条语句，可能相当于我们计算机的指令的几条甚至是几十条)</p></blockquote><ul><li>程序存储器（ROM）：存放代码的，只读存储器</li><li>数据存储器（RAM）：存放临时的数据，既可读也可以写，但是一断电就数据就消失（128B，字节）</li></ul><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><strong>共性：</strong></p><ul><li>一个8位CPU；</li><li>片内振荡和定时电路；</li><li>128B内部RAM（00H~7FH）；</li><li>4个8位并行I/0口；</li><li>2个16位可编程定时/计数器；一个全双工串行口；</li><li>5个中断源（可编程为两个优先级）；</li><li>22个SFR（除PC外，其余21个分散在80H~FFH之间）</li><li>堆栈深度可达80B（30H~7FH）；</li><li>16B（128位，20H~2FH）可位寻址区。</li></ul><h4 id="硬件系统结构"><a href="#硬件系统结构" class="headerlink" title="硬件系统结构"></a>硬件系统结构</h4><h5 id="CPU内部结构"><a href="#CPU内部结构" class="headerlink" title="CPU内部结构"></a>CPU内部结构</h5><ul><li>1.算术逻辑运算单元ALU（8位）：同一个时刻做8位的加法或减法<ul><li>+、一、×、÷算术运算，与、或、非、异或逻辑运算、循环移位、位处理。</li></ul></li><li>2.寄存器阵列<ul><li>（1）工作寄存器<strong><em>R0~R7（8位）</em></strong>（什么叫做寄存器？就是能够把我们的二进制数放在里面的，叫寄存器，<strong><em>就是临时存放数据的地方</em></strong>）<ul><li>暂存运算数据和中间结果。</li><li><strong><em>4个工作寄存器区，工作寄存器0区~3区</em></strong>。每个区均含8个寄存器RO~R7。</li><li>用<strong><em>PSW</em></strong>中的两位PSW.4和PSW.3（RS1和RS0）来切换工作寄存器区，选用一个工作寄存器区进行读写操作。</li></ul></li><li>（2）累加器Acc（8位）（既是算术逻辑单元也是通用寄存器）<ul><li>需要ALU处理的数据和计算结果多数要经过A累加器。</li></ul></li><li>（3）寄存器B（8位）<ul><li>与A累加器配合执行乘、除运算。也可用作通用寄存器。</li></ul></li><li>（4）程序状态字PSW（8位）<ul><li>存放ALU运算过程的标志状态Cy AC FO RS1 RSO OV-P</li></ul></li><li>（5）数据指针DPTR（16位）<ul><li>存放片外存储器地址，作为片外存储器的指针。可分成两个8位寄存器DPH、DPL使用。</li></ul></li><li>（6）堆栈指针SP（8位）<ul><li>堆栈是按“先进后出”原则存取数据的存储区。</li><li>MCS-51堆栈设在片内RAM区。数据入栈/出栈时，SP自动加1/减1，其内容始终为栈顶地址。</li><li>复位时SP=07H。</li></ul></li><li>（7）程序计数器PC（16位）<ul><li>CPU总是按PC的指示读取程序。PC可自动加1。因此CPU执行程序一般是顺序方式。当发生转移、子程序调用、中断和复位等操作，PC被强制改写，程序执行顺序也发生改变。复位时，PC=0000H。</li></ul></li></ul></li></ul><h4 id="存储器结构"><a href="#存储器结构" class="headerlink" title="存储器结构"></a>存储器结构</h4><p><img src="https://s1.ax1x.com/2020/03/24/8OeUi9.png" alt="8051存储器结构"></p><p>程序存储器：64K=1024X64=65536=2^16(16位的二进制数0000H~0FFFFH)(前面如果是一个数据的话，最高一位是字母ABCDEF，前面加一个0以示区别),外部扩展不一定有，但是最大的存储空间就是64K</p><h5 id="程序存储器"><a href="#程序存储器" class="headerlink" title="程序存储器"></a>程序存储器</h5><ul><li>在MCS-51的指令系统仅有两条：<ul><li>MOVC A，@A+DPTR</li><li>MOVC A，@A+PC</li></ul></li><li>复位后，程序计数器PC的内容为0000H</li><li>MCS-51最多可外扩64K字节程序存储器<br><img src="https://s1.ax1x.com/2020/03/24/8OK0te.png" alt></li></ul><h5 id="数据存储器"><a href="#数据存储器" class="headerlink" title="数据存储器"></a>数据存储器</h5><ul><li>（1）从00H~1FH的32B单元是4个工作寄存器组。</li><li>（2）地址20H~2FH的16B共128位，是可位寻址的内部RAM区，它们既可字节寻址，亦可位寻址。（P14表2-3）</li><li>（3）其他80B是只能按字节寻址的内部RAM区，为用户区。MCS-51单片机的堆栈安排在内部RAM内，堆栈的深度以不超过内部RAM的空间为限。</li></ul><h5 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h5><ul><li>堆栈是一种只允许在其一端进行数据插入和删除操作的一种数据结构。数据存取为“后进先出”。</li><li>堆栈功能：保护断点和现场信息。</li><li>堆栈的建立：MCS-51的堆栈是设置在内部RAM30H~7FH空间中，栈底为低地址单元，堆栈指针为SP。</li></ul><h5 id="特殊功能寄存器SFR"><a href="#特殊功能寄存器SFR" class="headerlink" title="特殊功能寄存器SFR"></a>特殊功能寄存器SFR</h5><p><img src="https://s1.ax1x.com/2020/03/24/8OQKG4.png" alt="SFR"></p><p><strong>SFR区部分寄存器功能介绍如下：</strong></p><ul><li>程序计数器（PC、16位）：存放将要执行的指令地址。</li><li>累加器（ACC、8位）：存放数据或中间结果。</li><li>B寄存器（8位）：主要用于乘、除运算。</li><li>数据指针（DPTR、16位）：存放外部数据存储器的地址。</li><li>程序状态字（PSW、8位）：用于寄存程序运行的状态信息。格式如下：</li></ul><p><img src="https://s1.ax1x.com/2020/03/24/8Ola7V.png" alt="程序状态字PSW"></p><p><strong>标志位功能：</strong></p><ul><li>CY:<ul><li>（1）执行算术运算时，最高位向前进位或借位时，CY为1；否则，CY为0。</li><li>（2）在位操作中，作“位”累加器。</li></ul></li><li>AC：用于十进制调整。当低四位向高四位进位或借位时，AC为1；否则AC为0。</li><li>FO：供用户定义的标志位，可以用指令置位或复位，用以控制程序的转向。</li><li>OV:<ul><li>（1）在带符号数的加减运算中，结果产生溢出，0V=1；否则，0V=0。</li><li>（2）在乘法运算中，乘积超过255，0V=1，表示积存放在B与A中；否则，0V=0，表示积只存放在A中。</li><li>（3）在除法运算中，当除数为0时，0V=1，除法无意义。</li></ul></li><li>P：累加器A中数的奇偶性，若A中“1”的个数为奇数，则P=1；否则，P=0。</li></ul><blockquote><p>注：SFR只能使用直接寻址方式来访问它们，书写时既可使用寄存器名，也可使用寄存器单元地址。<br>在21个特殊功能寄存器中，有11个特殊功能寄存器具有位寻址能力，它们的字节地址正好能被8整除，其十六进制地址的末位，只能是0H或8H。</p></blockquote><h5 id="外部数据存储器-可以没有"><a href="#外部数据存储器-可以没有" class="headerlink" title="外部数据存储器(可以没有)"></a>外部数据存储器(可以没有)</h5><ul><li>MCS-51外部数据存储器寻址空间为64KB</li><li>MCS-51同外部数据存储器的指令有4条：<ul><li>MOVX A，@Ri </li><li>MOVX A，@DPTR </li><li>MOVX @Ri，A </li><li>MOVX @DPTR，A </li></ul></li><li>RO，R1为8位寄存器，寻址范围256B DPTR为16位的数据指针，寻址范围64KB。</li></ul><blockquote><p>程序存储器（MOVC）外部数据存储器（MOVX）内部存储器（MOV）</p></blockquote><h5 id="I-O端口"><a href="#I-O端口" class="headerlink" title="I/O端口"></a>I/O端口</h5><ul><li>MCS-51有4个双向的8位并行I/0口：PO~P3</li><li>每一个口都有一个8位的锁存器</li><li>复位后它们的初始状态为全“1”</li></ul><blockquote><p>三态：0，1，高阻状态（线断开）。双向：既可以输出也可以输入</p></blockquote><ul><li>PO口是三态双向口：既可作为并行I/0口，也可作为数据总线口。当外部扩展了存储器或I/O端口，则只能作数据总线和地址总线低8位。</li><li>P1口是专门供用户使用的I/0口,是准双向接口</li><li>P2口是准双向接口,既可作为并行I/0口,也可作为地址总线高8位口。当外部扩展了存储器或I/0端口,则只能作地址总线高8位    </li><li>P3口是准双向口,又是双功能口。该口的每一位均可独立地定义为第二功能,作为第一功能使用时,口的结构与操作与P1口相同    </li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8XKlPe.png" alt></p><h5 id="复位电路"><a href="#复位电路" class="headerlink" title="复位电路"></a>复位电路</h5><ul><li>复位后PC值为0000H，故复位后的程序入口地址为0000H；</li><li>复位后PSW=00H，使片内存储器中选择0区工作寄存器，用户标志为FO为0状态；</li><li>复位后SP-07H，设定推栈栈底为07H；</li><li>复位后的P1，P2，P3口锁存器全为1状态，使这些准双向口皆处于输入状态；</li><li>内部RAM不受复位影响</li></ul><blockquote><p>复位电路的基本功能是：系统上电时提供复位信号，在加电瞬间，RST端出现一定时间的高电平，直至系统电源稳定后，撤销复位信号。</p></blockquote><h5 id="CPU时序"><a href="#CPU时序" class="headerlink" title="CPU时序"></a>CPU时序</h5><p>MCS-51内部有一个用于构成振荡器的高增益反相放大器，引脚XTAL1和XTAL2分别是此放大器的输入端和输出端。</p><ul><li><strong><em>CPU执行一条指令的时间称为指令周期</em></strong>，它是以机器周期为单位的，MCS-51典型的<strong><em>指令周期为一个机器周期。</em></strong></li><li>每个机器周期由6个状态周期组成，每个状态周期由2个振荡周期组成，状态周期即S1、S2、S3、S4、S5、S6，而每个状态周期由两个节拍P1，P2组成。</li><li>大多数8051指令执行时间为一个机器周期，MUL（乘法）和DIV（除法）需要4个机器周期。</li></ul><blockquote><p>一个机器周期是有12个时钟周期（晶体振荡周期）</p></blockquote><h4 id="引脚功能"><a href="#引脚功能" class="headerlink" title="引脚功能"></a>引脚功能</h4><ul><li>1.端口线（4×8=32条）(点灯)<ul><li>1）PO.0-P0.7</li><li>2）P1.0-P1.7</li><li>3）P2.0-P2.7</li><li>4）P3.0-P3.7</li></ul></li><li>2.电源线（2条）：VCC为+5V电源线，VSS为地线</li><li>3.控制线（6条）</li><li>ALE/PROG：地址锁存允许/编程线</li><li>EA/VPP：允许访问片外存储器/编程电源线</li><li>PSEN：片外ROM选通线</li><li>RST/VPD：复位/备用电源线</li><li>XTAL1和XTAL2：片内振荡电路输入/输出线</li></ul><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><ul><li>复位方式<ul><li>单片机在开机时都需要复位，以便CPU以及其他功能部件都处于一个确定的初始述态，并从这个状态开始工作</li><li>RST引脚是复位信号的输入端</li><li>复位信号是高电平有效，持续时间要有24个时钟周期以上</li><li>若时钟频率为12MHz，则复位脉冲宽度至少应为2uS（2微秒）。</li><li>单片机复位后，其片内各寄存器状态。这时，堆栈指针SP为07H、ALE、PSEN、PO、P1、P2、和P3口各引脚均为高电平，片内RAM中内容不变。</li></ul></li><li>程序执行方式<ul><li>单步执行方式<ul><li>单步执行方式是指按一次单步执行键就执行一条用户指令的方式。单步执行方式常常用于用户程序的调试。单步执行方式是利用单片机外部中断功能实现的。</li></ul></li><li>连续执行方式<ul><li>连续执行方式是单片机都需要的一种工作方式被执行程序可以放在片内或片外ROM中由于复位后程序计数器PC=0000H，可以预先在0000H处放一条转移指令，以便跳转到0000H~0FFFFH中的任何地方执行程序。</li></ul></li></ul></li><li>节电方式（待机方式和掉电方式都是由电源控制寄存器PCON的有关位来控制的。）<ul><li>待机方式<ul><li>待机方式的进入：使用指令将PCON寄存器的IDL位置1即可。</li><li><strong><em>单片机进入待机方式时振荡器仍然运行CPU不工作</em></strong></li><li><strong><em>通用寄存器都保持原有状态不变</em></strong></li><li><strong><em>退出待机方式的方法有两种：中断和硬件复位。</em></strong></li></ul></li><li>掉电保护方式<ul><li>掉电保护方式的进入：使用指令将PCON寄存器的PD位置1即可。</li><li><strong><em>单片机的一切工作全部停止</em></strong></li><li><strong><em>只有内部的RAM单元的内容被保存</em></strong></li><li><strong><em>I/0引脚状态和相关的特殊功能寄存器的内容相对应</em></strong></li><li><strong><em>ALE和为逻辑低电平。</em></strong></li><li>退出掉电保护方式的方法只有一个：硬件复位。复位后特殊功能寄存器的内容被初始化，但RAM的内容仍然保持不变。</li></ul></li></ul></li><li>EPROM的编程和校验方式</li></ul><h3 id="MSC-51指令系统"><a href="#MSC-51指令系统" class="headerlink" title="MSC-51指令系统"></a>MSC-51指令系统</h3><h4 id="指令编码格式及分类"><a href="#指令编码格式及分类" class="headerlink" title="指令编码格式及分类"></a>指令编码格式及分类</h4><p>一、指令编码格式<br>一条指令表示计算机所完成的某种操作。它通常由<strong><em>操作码</em></strong>和<strong><em>操作数</em></strong>两部分组成。例如：MOV A,R1 </p><p><strong>本系统有下列三种指令编码格式</strong></p><ul><li>单字节指令（49条）<ul><li>两种格式</li></ul></li><li>双字节指令（46条）（加法）<ul><li>格式：操作码+数据或地址</li></ul></li><li>三字节指令（16条）<ul><li>格式：操作码+数据或地址+数据或地址</li></ul></li></ul><p><strong>例如：</strong></p><ul><li>一字节指令空操作<strong><em>NOP</em></strong>的编码格式为：操作码 00000000 。数据传送指令<strong><em>MOV A,R1</em></strong>编码格式为：11101001。（前5不变，后三个表示R1~R7）</li><li>两字节指令<strong><em>MOV A,#40H</em></strong>的编码格式为：操作码 01110100+立即数40H 01000001。</li></ul><p>二、指令分类<br>按指令功能分为：</p><ul><li>数据传送类指令（29条）；</li><li>算术运算类指令（24条）；</li><li>逻辑运算类指令（24条）；</li><li>控制转移类指令（17条）；</li><li>位操作指令（17条）。</li></ul><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><blockquote><p>寻址方式是指操作数存放存储单元地址的表示形式。</p></blockquote><p><strong>MCS-51指令系统共提供七种寻址方式：</strong></p><ul><li>1、立即寻址<ul><li>该方式把操作数（即立即数）包含在指令字节中。</li><li>在指令格式中，在立即数前冠以符号”#”表示立即寻址方式</li></ul></li><li>2、直接寻址<ul><li>该方式是把操作数的地址包含在指令字节中，而操作数本身则存放在该地址指示的数据存储单元中。</li><li>在指令格式中，操作数的地址直接写在指令中。</li><li>例如：MOV A, 40H;A&lt;—（40H）。设：（40H）=2BH</li></ul></li><li>3.寄存器寻址方式<ul><li>该方式把操作数存放在指定的寄存器中。能实现这种寻址的寄存器有：<strong>RO~R7、A、B、DPTR。</strong></li></ul></li><li>4.寄存器间接寻址方式<ul><li>该方式是把操作数的所在地址存放在指定的寄存器中。</li><li>能实现这种寻址方式的寄存器有：<strong>RO、R1、DPTR。</strong></li><li>在指令格式中，在寄存器前面冠以符号“@”表示例如：MOV A，@RO；A&lt;-（（RO））  </li></ul></li><li>5.基址加变址寻址方式<ul><li>该方式把DPTR或PC寄存器作为基址寄存器，累加器A作为变址寄存器，（A）+（PC）或（A）+（DPTR）的和作为操作数的16位地址。</li><li>这种寻址方式的指令只有三条：<ul><li>MOVC A，@A+DPTR；A&lt;-（（A）+（DPTR）） DPTR的地址加上A的地址得到源地址，取出源地址的数据再送到A寄存器</li><li>MOVC A，@A+PC；A&lt;-（（A）+（PC））</li><li>JMP @A+DPTR；跳转至（A）+（DPTR）  </li><li>前两条是程序存储器读指令，用MOVC助记符</li></ul></li></ul></li><li>6.相对寻址方式<ul><li>这种寻址方式是以程序计数器PC的当前值为基准，加上指令中给出的相对偏移量rel以形成且标地址。</li><li>该寻址方式常用在条件转转指令中，相对偏移量rel给出相对于PC当前值的跳转范围，其值是一个带符号的8位二进制数，取值范为-128~127，以补码形式置于操作码之后存放。</li></ul></li><li>7、位寻址方式<ul><li>MCS-51具有位处理功能，可以对二进制“位”进行操作。</li><li>（1）位寻址的寻址范围<ul><li>内部RAM中的20H-2FH字节地址范围，共128位，位地址为00H-7FH。</li><li>特殊功能寄存器的可寻址位。可位寻址的特殊功能寄存器有B、ACC、<strong><em>PSW</em></strong>、IP、IE、SCON、TCON、PO~P3，共11个。</li><li>PSW中的CY作为位累加器。1</li></ul></li><li>（2）位寻址方式<ul><li>位寻址方式使用直接寻址方式，有下列四种表示形式：</li><li>直接地址方式：在指令中直接给出位地址。</li><li>点操作符方式：在字节地址或寄存器名与位序号之间加一个点。</li><li>位名称方式：直接给出寄存器的位名称。</li></ul></li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8jOsk8.png" alt="位寻址方式例子(C是CY)"></p><blockquote><p>所有的程序的代码都在程序存储器中</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/25/8jXtEV.png" alt="寻址方式与寻址储存空间"></p><p><strong>指令表中符号意义的说明：</strong></p><ul><li>Rn:n=0～7，即RO~R7</li><li>Ri:i=0、1，即RO、R1</li><li>direct：表示直接寻址方式</li><li>#data：8位立即数</li><li>#data16：16位立即数</li><li>addr16：16位地址</li><li>addr11：11位地址</li><li>rel：相对偏移量</li><li>bit：直接寻址位</li></ul><h4 id="数据传送类指令"><a href="#数据传送类指令" class="headerlink" title="数据传送类指令"></a>数据传送类指令</h4><p><strong>格式：MOV目标，源；目标&lt;–源</strong><br>特点：</p><ul><li>（1）指令中有数据源地址和传送数据目标地址，传送方向由源地址中的数据传送到目的地址中，源地址中的内容不变。</li><li>（2）数据传送类指令的执行结果不影响程序状态寄存器（PSW）中的各标志位。</li></ul><h5 id="数据传送类指令分为以下几种："><a href="#数据传送类指令分为以下几种：" class="headerlink" title="数据传送类指令分为以下几种："></a>数据传送类指令分为以下几种：</h5><ul><li>1.内部数据传送指令<ul><li>数据传送在单片机内部进行，不通过外部总线，传送速度快。</li><li>指令格式如下：**（A，Rn,Ri,DPTR,data）<ul><li>MOV A，#data；A&lt;-data </li><li>MOV Rn，#data；Rn-data </li><li>MOV direct，#data；direct-data </li><li>MOV @Ri，#data；（Ri）&lt;-data </li><li>MOV DPTR，#datal6；DPTR&lt;-datal6</li><li>MOV A，Rn；A&lt;-（Rn）</li><li>MOV Rn，A；Rn&lt;-A</li></ul></li></ul></li><li>2.累加器与外部RAM之间的数据传送指令<ul><li>（1）由Ri提供外部RAM的单元地址。格式：<ul><li>MOVX A，@Ri；A&lt;-（（Ri）），i=0，1</li><li>MOVX @Ri，A；（Ri）-（A），i=0，1</li><li>只能访问外部RAM *<em>00H-FFH *</em>256个存储单元。</li></ul></li><li>（2）由DPTR提供外部RAM单元地址。格式：<ul><li>MOVX A，@DPTR；A&lt;-（（DPTR））</li><li>MOVX @DPTR，A（DPTR）-（A）</li><li>可以访问外部RAM的任意一个存储单元。</li></ul></li></ul></li><li>3.程序存储器数据传送指令(程序存储器是只能读的无法写进去数据，所以无法反过来)<ul><li>包括内部程序存储器和外部程序存储器。只能读数据传送是单方向的。格式如下：<ul><li>MOVC A，@A+DPTR A&lt;-（（A）+（DPTR））</li><li>MOVC A，@A+PC；A&lt;-（（A）+（PC））</li><li>这两条指令同常用于查找程序中的数据表格</li></ul></li></ul></li><li>4.堆栈操作指令<ul><li>堆栈是建立在内部RAM中，通过堆栈指示器SP进行读写操作。指令格式为：<ul><li>PUSH direct；SP&lt;-（SP）+1，（SP）&lt;-（direct）</li><li>POP direct；direct&lt;-（（SP）），（SP）&lt;-（SP）-1</li></ul></li></ul></li><li>5.数据交换指令<ul><li>（1）字节交换指令,格式为：<ul><li>XCH A，Rn；（A）&lt;—→（Rn），n=0～7</li><li>XCH A，direc；（A）&lt;-→（direct）</li><li>XCH A，@Ri；（A）&lt;—→（（Ri）），i=0，1</li></ul></li><li>（2）半字节交换指令,格式为：<ul><li>XCHD A，@Ri；（A3～0）&lt;-→（（Ri）3～0）</li><li>SWAP A；（A3～0）&lt;-→（A7～4）这两条指令通常用于十六进制数或BCD码的数位交换。</li></ul></li></ul></li></ul><h4 id="算术运算类指令"><a href="#算术运算类指令" class="headerlink" title="算术运算类指令"></a>算术运算类指令</h4><blockquote><p>该类指令有加、减、乘、除四种，其特点是运算结果影响程序状态寄存器PSW中的标志位。</p></blockquote><p><strong>一、加法类运算指令</strong>(cy:进位位，AC：半进位位，P:奇偶位)</p><ul><li>1.加法指令（影响CY、OV、AC、P）<ul><li>ADD A，#data；A&lt;—（A）+data ADD A，Rn；A·—（A）+（Rn）</li><li>ADD A，direct；A&lt;—（A）+（direct）</li><li>ADD A，@Ri；A&lt;—（A）+（（Ri））</li></ul></li><li>2.带进位位CY的加法（影响CY、OV、AC、P）<ul><li>ADDC A，#data；A&lt;—（A）+data+CY </li><li>ADDC A，Rn；A&lt;-（A）+（Rn）+CY </li><li>ADDC A，direct；A&lt;—（A）+（direct）+CY</li><li>ADDC A，@Ri；A&lt;-（A）+（（Ri））+CY</li></ul></li><li>3.加1指令<ul><li>INC A；A&lt;—（A）+1（影响P）</li><li>INC Rn；Rn&lt;—（Rn）+1</li><li>INC direct；direct&lt;—（direct）+1</li><li>INC @Ri；（Ri）&lt;—（（Ri））+1  </li></ul></li></ul><p><strong>二.减法运算指令</strong></p><ul><li>1.带借位位CY的减法（影响CY、OV、AC、P）<ul><li>SUBB A，#data；A&lt;—（A）-data-CY </li><li>SUBB A，Rn；A&lt;—（A）-（Rn）-CY</li><li>SUBB A，direct；A&lt;—（A）-（direct）-CY SUBB A，@Ri；A·—（A）-（（Ri））-CY</li></ul></li><li>2.减1指令<ul><li>DEC A；A&lt;—（A）-1（影响P）</li><li>DEC Rn；Rn&lt;-（Rn）-1</li><li>DEC direct；direct&lt;—（direct）-1</li><li>DEC @Ri；（Ri）&lt;—（（Ri））-1</li></ul></li></ul><p><strong>三、乘除指令</strong></p><ul><li>1.乘法指令<ul><li>MUL AB；B、A&lt;—（A）x（B），影响OV、P,</li><li>若（B）&gt;0，则OV=1；否则OV=0。</li></ul></li><li>2.除法指令<ul><li>DIV AB；A、B&lt;—（A）/（B），影响OV、P </li><li>A中存放被除数，B中存放除数，执行之后A中存放商，B中存放余数。若除数为0，则OV=1，表示除法无意义。</li></ul></li></ul><p><strong>四、十进制调整指令</strong></p><ul><li>十进制调整指令用于对BCD码十进制数加法运算的结果进行调整。<ul><li>格式：DA A</li></ul></li><li>调整方法为：<ul><li>A中低四位大于9或标志位AC=1，则低四位加6调整，即A&lt;—（A）+06H。</li><li>A中高四位大于9或标志位CY=1，则高四位加6调整，即A&lt;—（A）+60H。</li></ul></li></ul><h4 id="逻辑运算类指令"><a href="#逻辑运算类指令" class="headerlink" title="逻辑运算类指令"></a>逻辑运算类指令</h4><p><strong>一.单操作数逻辑运算指令</strong></p><ul><li>1.累加器清零<ul><li>CLR A；A&lt;-0。</li></ul></li><li>2.累加器取反<ul><li>CPL A；A&lt;-（A）</li></ul></li><li>3.累加器循环左移（最高位移到最低位）<ul><li>RL A;</li></ul></li><li>4.累加器循环右移（最低位移到最高位）<ul><li>RR A；</li></ul></li><li>5.累加器带进位CY循环左移（最高位进入CY寄存器，CY寄存器的内容移到最低位）<ul><li>RLC A;</li></ul></li><li>累加器带进位CY循环右移（最低位移到CY，CY移到最高位）<ul><li>RRC A;</li></ul></li></ul><p><strong>二.双操作数逻辑运算指令</strong></p><ul><li>1.逻辑与<ul><li>ANL A，#data；A&lt;-（A）^data </li><li>ANL A，Rn；A&lt;-（A）^（Rn），n=0~7</li><li>ANL A，direct；A&lt;-（A）（direct）</li><li>ANL A，@Ri；A&lt;-（A）^（（Ri）），i=0，1</li><li>ANL direct，A；direct&lt;—（direct）^（A）</li><li>ANL direct，#data；direct&lt;—（direct）^data</li></ul></li><li>2.逻辑或<ul><li>ORL A，#data；A&lt;-（A）Vdata </li><li>ORL A，Rn；A&lt;—（A）V（Rn），n=0~7</li><li>ORL A，direct；A&lt;-（A）V（direct）</li><li>ORL A，@Ri；A&lt;-（A）V（（Ri）），i=0，1</li><li>ORL direct，A；direct&lt;-（direct）V（A）</li></ul></li><li>3.逻辑异或<ul><li>XRL A，#data；A&lt;-（A）④data </li><li>XRL A，Rn；A&lt;—（A）④（Rn），n=0-7</li><li>XRL A，direct；A&lt;-（A）④（direct）</li><li>XRL A，@Ri；A&lt;—（A）④（（Ri）），i=0，1</li><li>XRL direct，A；direct&lt;-（direct）④（A）</li><li>XRL direct，#data；direct&lt;-（direct）④data</li></ul></li></ul><h4 id="控制程序转移类指令"><a href="#控制程序转移类指令" class="headerlink" title="控制程序转移类指令"></a>控制程序转移类指令</h4><blockquote><p>共分三种：无条件转移、条件转移和循环转移。</p></blockquote><ul><li>1、无条件转移<ul><li>（1）长转移指令<ul><li>格式：LJMP标号；转移至标号处执行，转移范围为<strong>64KB。</strong></li></ul></li><li>（2）短转移指令<ul><li>格式：SJMP标号；转移至标号处执行，转移范围为<strong>256B。</strong></li></ul></li><li>（3）绝对转移指令<ul><li>格式：AJMP标号；转移范围为<strong>2KB</strong></li></ul></li><li>（4）相对转移指令<ul><li>格式：JMP标号；转移目标地址为（A）+（DPTR）—&gt;PC。</li></ul></li></ul></li><li>2、条件转移指令<ul><li>（1）累加器判零转移指令<ul><li>JZ标号；若（A）=0，转至标号执行。</li><li>JNZ标号；若（A）&gt;0，转至标号执行。</li></ul></li><li>（2）比较转移指令<ul><li>CJNE A，#data，标号；（A）&gt;data，转至标号执行</li><li>CJNE A，direct，标号；（A）&gt;（direct），转至标号执行</li><li>CJNE Rn，#data，标号；（Rn）&gt;data，转至标号执行</li><li>CJNE @Ri，#data，标号；（（Ri））&gt;data，转至标号执行</li></ul></li><li>（3）减‘1’不为零转移指令<ul><li>DJNZ Rn，标号；Rn&lt;-（Rn）-1，若（Rn）&gt;0，转至标号执行。</li><li>DJNZ direct，标号；direct&lt;-（direct）-1，若（direct）&gt;0，转至标号执行。  </li></ul></li></ul></li><li>3、空操作指令<ul><li>NOP；PC&lt;—（PC）+1，不作任何操作，只消耗一个机器周期的时间，常用于程序的等待和延时。 </li></ul></li></ul><h4 id="位操作类指令"><a href="#位操作类指令" class="headerlink" title="位操作类指令"></a>位操作类指令</h4><ul><li>1、位传送指令<ul><li>MOV C，bit；CY&lt;—（bit）</li><li>MOV bit，C；bit&lt;-（CY）</li></ul></li><li>2、位置位和清除指令<ul><li>CLR C；CY&lt;-0</li><li>SETB C；CY&lt;-1</li><li>CLR bit；bit&lt;-0</li><li>SETB bit；bit&lt;1</li></ul></li><li>3、位运算指令<ul><li>ANL C，bit；CY&lt;-（CY）^（bit）</li><li>ANL C，/bit；CY&lt;-（CY）^（bit(取反)）</li><li>ORL C，bit；CY&lt;-（CY）V（bit）</li><li>ORL C，/bit；CY&lt;-（CY）V（bit(取反)）</li><li>CPL C；CY&lt;-（CY取反）</li><li>CPL bit；bit&lt;—（bit取反）</li></ul></li><li>4、位控制转移指令<ul><li>JC标号；若（CY）=1，转至标号处执行</li><li>JNC标号；若（CY）=0，转至标号处执行</li><li>JB bit,标号; 若（bit）=1，转至标号处执行</li><li>JNB bit,标号; 若（bit）=0，转至标号处执行</li><li>JBC bit,标号; 若（bit）=1，转至标号处执行，并且0-&gt;bit。</li></ul></li></ul><h3 id="汇编语言及程序设计"><a href="#汇编语言及程序设计" class="headerlink" title="汇编语言及程序设计"></a>汇编语言及程序设计</h3><h4 id="汇编语言语句格式"><a href="#汇编语言语句格式" class="headerlink" title="汇编语言语句格式"></a>汇编语言语句格式</h4><p><strong>一、指令格式</strong></p><ul><li>[标号：]助记符 操作数1，操作数2[；注释]<ul><li>注释：为不可执行部分，对程序加以说明。</li><li>助记符：MOV等</li><li>标号：由1-8个字符组成，且第一个字符必须是字母。用于指示指令的地址。</li><li>操作数：可使用二（B结尾）、十（D结尾或省略）、十六（H结尾）进制数和字符串（加“”）。</li></ul></li></ul><p><strong>二、伪指令格式</strong><br>伪指令是不可执行的指令，其功能是为汇编程序提供信息。<br>常用伪指令有：</p><ul><li>1、汇编起始地址命令：<ul><li>ORG格式：ORG 地址</li><li>功能：规定程序的起始地址，省略时起始地址从0000H开始。</li></ul></li><li>2、汇编终止命令：<ul><li>END格式：END 表达式</li><li>功能：源程序汇编终止。在主程序模块中含有“表达式”给出程序的起始地址，在其它模块（子程序）中表达式可省略。</li></ul></li><li>3、赋值命令：<ul><li>EQU格式：字符名称 EQU 表达式</li><li>功能：将表达式的值赋给字符名称。表达式可以是常数、地址、标号和表达式。</li><li>赋值之后的字符名称可以在程序中使用。</li></ul></li><li>4、定义数据命令：DB，DW）<ul><li>格式：[标号：]DB字节数据项表</li><li>功能：从指定地址（即标号）开始，在<strong><em>程序存储器</em></strong>中定义字节数据。</li><li>格式：[标号：]DW字数据项</li><li>功能：从指定地址（即标号）开始，在程序存储器中定义16位字数据。高8位数据在低地址单元，低8位数据在高地址单元。</li></ul></li><li>5、定义存储区命令：DS<ul><li>格式：[标号：] DS 表达式</li><li>功能：从指定地址（即标号）开始，保留指定数目（表达式的值）的字节单元作为存储区，供程序运行使用（用于程序存储器）。</li><li>例如：ORG 2000H ; TAB: DS 05H</li></ul></li><li>6、位定义命令：BID<ul><li>格式：字符名称 BIT 位地址</li><li>功能：将位地址赋给字符名称。位地址为绝对地址或符号地址。</li><li>例如：HULED BIT P1.0</li></ul></li></ul><h4 id="分支程序设计"><a href="#分支程序设计" class="headerlink" title="分支程序设计"></a>分支程序设计</h4><blockquote><p>一般情况下，程序按顺序方式执行，但根据实际需要也可改变程序的执行顺序，称为分支程序。<br>分支程序是根据给出的条件满足与否执行不同的走向，基本结构分为单分支、双分支和多分支程序。</p></blockquote><h4 id="循环程序设计"><a href="#循环程序设计" class="headerlink" title="循环程序设计"></a>循环程序设计</h4><p><strong>一、循环程序的基本结构</strong><br>在基本设计中，控制一部分指令重复执行若干次，用简短的程序完成大量的处理任务，这种按某种控制规律重复执行的程序，称为循环程序。</p><ul><li>1.先执行后判断结构此结构</li><li>2.先判断后执行结构</li></ul><p><strong>循环程序由以下四个基本组成部分.</strong></p><ul><li>（1）置循环初值。设置循环开始的初始值，为循环做准备。如设计数器，工作单元初值。</li><li>（2）循环处理。循环程序中重复执行的内容。</li><li>（3）循环修改。修改循环参数，为执行下一次循环做准备。</li><li>（4）循环控制。判断是否结束循环</li></ul><p><strong>设计20ms延时程序</strong></p><ul><li>延时程序与MCS-51指令执行时间有很大的关系。</li><li>在使用12MHz晶振时，一个机器周期为luS，执行一个条“DJNZ”指令的时间为2uS(2微秒)，</li><li>20ms=2uS×10000，由于8位的计数值最大为256，这时可用双重循环方法</li><li>20ms=2uS×100×100，延时20ms程序如下的：</li></ul><pre><code>D20MS: MOV R4，#100; 20ms=2uS×100×100；外循环初值=100DY1:MOV R3，#100; 内循环初值=100DY2：DJNZ R3,DY2; 100×2=200=0.2msDJNZ R4,DY1; 0.2×100=20ms RET</code></pre><h4 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h4><blockquote><p>子程序的主要特点是：在执行过程中需要由其它程序来调用，执行完毕又需要把执行流程返回到调用该子程序的程序中。</p></blockquote><p><strong>在子程序调用过程中须解决以下两个方面的问题：</strong></p><ul><li>程序之间的调用与返回；</li><li>调用程序与被调用程序之间的参数传送。</li></ul><h5 id="程序设计举例"><a href="#程序设计举例" class="headerlink" title="程序设计举例"></a>程序设计举例</h5><p><strong>查表程序</strong><br>在很多情况下，通过查表程序可以简化计算，简化程序的多分支结构，提高程序的运行效率。<br>查表所使用的数据表格是按一定顺序排列的常数，存放在程序存储器中。</p><p>MCS-5l指令系统用于查表的指令有两条；</p><ul><li>MOVC A,@A+DPTR</li><li>MOVC A,@A+PC</li></ul><p><strong>布尔处理程序</strong></p><h3 id="C51"><a href="#C51" class="headerlink" title="C51"></a>C51</h3><p><img src="https://s1.ax1x.com/2020/03/26/GSQ4Ts.png" alt="C51存储类型"><br><img src="https://s1.ax1x.com/2020/03/26/GS1dIA.png" alt="C51存储类型"></p><h4 id="C-51程序结构"><a href="#C-51程序结构" class="headerlink" title="C-51程序结构"></a>C-51程序结构</h4><ul><li>C51的数据声明的一般格式如下<ul><li>[类型说明符][修饰符]标识符[=初值]…..</li><li>例如：unsigned char code Flag=0xOf；就是声明一个无符号的char型变量Flag，并给他赋初值为0×0f；并且声明他所在的存储空间在片内统一编址的ROM中。</li><li>声明中，如果没有修饰符，则数据默认的存储空间为data型，也就是在片内RAM中。</li></ul></li><li>与一般C语言的结构相同，以main）函数为程序人口，程序体中包含若干语句还可以包含若干函数。</li></ul><p><img src="https://s1.ax1x.com/2020/03/26/GSNotg.png" alt="基本数据类型"></p><h5 id="C-51的数据类型扩充定义"><a href="#C-51的数据类型扩充定义" class="headerlink" title="C-51的数据类型扩充定义"></a>C-51的数据类型<strong><em>扩充定义</em></strong></h5><ul><li>sfr：特殊功能寄存器声明</li><li>sfr16：sfr的16位数据声明</li><li>sbit：特殊功能位声明</li><li>bit：位变量声明</li><li>例：<ul><li>sfr SCON=0X98；</li><li>sfr16 T2=0xCC；</li><li>sbit OV=PSW~2；</li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/03/26/GSaBJe.png" alt="C-51数据的存储类型"></p><h5 id="中断服务程序"><a href="#中断服务程序" class="headerlink" title="中断服务程序"></a>中断服务程序</h5><p>函数名（）interrupt n<br>{  }</p><h5 id="I-0口定义"><a href="#I-0口定义" class="headerlink" title="I/0口定义"></a>I/0口定义</h5><ul><li>#include&lt;absacc.h&gt;</li><li>#define prot xbyte[0x1000]</li></ul><p>或<br>用指针定义</p><h3 id="定时器-计数器"><a href="#定时器-计数器" class="headerlink" title="定时器/计数器"></a>定时器/计数器</h3><blockquote><p>频率固定称为计时</p></blockquote><h4 id="定时方法"><a href="#定时方法" class="headerlink" title="定时方法"></a>定时方法</h4><p>1.软件定时<br>2.硬件定时<br>3.可编程的定时器定时</p><blockquote><p>MCS-51单片机内共有两个可编程的定时/计数器T0和T1。它们都是十六位加法计数器结构，分别由THO、TL0和TH1、TL1四个8位计数器组成，每个定时/计数器都具有定时和计数两种功能。</p></blockquote><p><strong>功能</strong></p><ul><li>1.计数功能:对外来脉冲进行计数计数脉冲的输入端来自单片机的两个信号引脚TO（P3.4）和T1（P3.5），外部输入的脉冲在负跳变(由正到负)时有效，计数脉冲的频率最高为振荡频率的1/24。</li><li>2.定时功能：（记一个数就是一微秒）定时功能也是通过计数器的计数来实现的，不过这时的计数脉冲来自单片机的内部，即每个机器周期产生一个计数脉冲。因此，计数频率为振荡频率的1/12。这样，不但可以根据计数器的预置值计算出定时时间，也可以反过来按定时时间的要求，计算出计数器的预置值。</li></ul><p><strong>二、与定时/计数器有关的寄存器</strong></p><ul><li>1.定时器控制寄存器（TCON）<ul><li>该寄存器既参与中断控制又参与定时控制。</li><li>其主要功能是：定时器在溢出时，设定标志位（TFx），并控制定时器的运行或停止等（TRx）。</li></ul></li><li></li></ul><p>M1MO：工作方式选择位：<br>M1MO=00，方式0：13位计数（TLO-4、THO-7）M1MO=01，方式1：16位计数M1MO=10，方式2：8位计数，有自动装入功能。<br>M1MO=11，方式3：T0分为两个8位计数器，TLO允许作为定时或计数方式，THO只能作为定时方式。</p><h4 id="定时器的工作方式"><a href="#定时器的工作方式" class="headerlink" title="定时器的工作方式"></a>定时器的工作方式</h4><h5 id="方式0"><a href="#方式0" class="headerlink" title="方式0"></a>方式0</h5><p>方式0工作逻辑图</p><p><img src="https://s1.ax1x.com/2020/03/26/GpPlrV.png" alt="方式0工作逻辑图"></p><ul><li>fosc：晶振频率/主频</li><li>C/T = 0==&gt; 定时（对内部的机器周期进行计数） 。C/T = 1==&gt;计数（对T1的管脚进行计数(脉冲)，也可以进行定时：前提是外部输入的频率固定）</li><li>当十六位满了之后，进一位到<strong><em>TF1</em></strong></li><li>软件启动方式：SETB TR1 ;  门（GATE）设置为0起效</li><li>方式0是13位结构的工作方式，其计数器由TH1的全8位和TL1的低5位构成。TL1的高3位弃之不用。</li><li>计数方式：计数值的范围为：1~8192（218）定时方式：定时时间T的计算公式为：<ul><li>T=（2^13一计数初值x）×晶振周期×12</li><li>或T=（2^13一计数初值x）x机器周期</li><li>启动的条件是：（TRx=1）AND（GATE=0 OR INTX=1）</li></ul></li><li>TMOD寄存器初始化<ul><li>定时器1，M1MO=00H方式，C/T=0（定时），GATE=0（以软件启动定时器），不用的位设定为0，最后得TMOD应初始化00H。(MOV TMOD,#00H)</li></ul></li><li>用TCON寄存器的TR1位来启动（=1）或停止（=0）定时器。</li></ul><p><strong>程序设计</strong><br>查询方式：</p><pre><code>    MOV TMOD,#00H;T1工作在方式0    SETB TR1; 启动T1工作LOOP:MOV TL1,#03H     MOV TH1，#OFCH;置定时初值WAIT:JNB TF1,WAIT; 定时未到，循环等待    CLR TF1; 定时到，清TF1    CPL P1.0; 由P1.0输出，信号取反    SJMP LOOP;循环输出方波</code></pre><blockquote><p>2.方式1其逻辑电路和工作情况与方式0完全相同。所不同的只是组成计数器的位数为16位。</p></blockquote><h5 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h5><p><img src="https://s1.ax1x.com/2020/03/26/GpYkLV.png" alt="工作方式2逻辑结构图"></p><ul><li>TH0（八位）作为一个自动重装的寄存器，进位之后会自动把TH0里面的初值重新赋给TL0</li><li>方式2具有<strong><em>自动重新加载功能</em></strong>，即自动加载计数初值。该方式把16位计数器分为两部分，既以TL1作计数器，以TH1作预置计数器，初始化时把计数初值分别装入TL1和TH1中。</li><li>当计数溢出后，由预置寄存器TH1，以硬件方法自动给计数器TL1重新加载。最大计数值只能到255。这种工作方式非常适用于循环定时或循环计数应用。</li></ul><p><img src="https://s1.ax1x.com/2020/03/26/GpNtxA.png" alt></p><pre><code>程序设计（查询方式）：MOV TMOD，#02H;TO工作在方式2MOV TLO，#OCEH MOV THO，#0CEH；置定时初值SETB TRO; 启动TO工作WAIT:JNB TFO，WAIT; 定时未到，循环等待CLR TFO;  定时到，清TFO /CPL P1.0;   由P1.0输出，信号取反SJMP WAIT; 循环输出方波</code></pre>]]></content>
      
      
      <categories>
          
          <category> C51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C51 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System(3)</title>
      <link href="/2020/03/19/cao-zuo-xi-tong-3/"/>
      <url>/2020/03/19/cao-zuo-xi-tong-3/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统–进程管理–进程调度"><a href="#操作系统–进程管理–进程调度" class="headerlink" title="操作系统–进程管理–进程调度"></a>操作系统–进程管理–进程调度</h1><h4 id="进程调度的概述"><a href="#进程调度的概述" class="headerlink" title="进程调度的概述"></a>进程调度的概述</h4><p><strong>Process Scheduling</strong></p><ul><li>Types of scheduling（调度方式）</li><li>Scheduling Criteria（准则）</li><li>Scheduling Algorithms（调度算法）</li><li>Real-Time Scheduling（实时调度）</li></ul><h5 id="learn-objective（学习目标）"><a href="#learn-objective（学习目标）" class="headerlink" title="learn objective（学习目标）"></a>learn objective（学习目标）</h5><ul><li>Explain what’s Response Time（响应时间：分时系统里面），Turnaround time（周转时间：批处理系统，提交到完成的时间，包括在队列里面等待的时间），Deadlines（截止时间：实时系统），Throughput（吞吐量：批处理系统）</li><li>理解进程调度的目标、类型、原则</li><li>理解Decision Mode:Nonpreemptive（非剥夺：强制剥夺的是CPU的资源）&amp;Preemptinve（剥夺）</li><li>研究经典进程调度算法：FCFS.Round Robin（轮转），Shortest Process Next（进程最短的优先），Shortest Remaining Time（剩余时间最短优先），Highest Response Ratio Next（响应比高的优先），Feedback（反馈调度法）</li><li>理解Real-Time Systems及类型</li><li>理解掌握：Real-Time Scheduling，Deadline Scheduling，Rate Monotonic Scheduling（速度单调）</li></ul><h4 id="调度的类型"><a href="#调度的类型" class="headerlink" title="调度的类型"></a>调度的类型</h4><p><strong>Aim of Scheduling（调度的目标）</strong></p><ul><li>Response time（响应时间，时间要短）</li><li>Throughput（系统吞吐量：吞吐量要大）</li><li>处理机的效率要高</li><li>调度的公平性要好，防止产生进程饥饿</li></ul><blockquote><p>进程饥饿：进程长时间得不到调度，没有得到服务</p></blockquote><blockquote><p>在磁盘外存里面的是<strong>作业，任务</strong>的概念，到了内存里面才是<strong>进程</strong></p></blockquote><h5 id="Types-of-Scheduling（调度类型）"><a href="#Types-of-Scheduling（调度类型）" class="headerlink" title="Types of Scheduling（调度类型）"></a>Types of Scheduling（调度类型）</h5><ul><li><strong>按0S的类型划分：</strong><ul><li>批处理调度、分时调度、实时调度、多处理机调度</li></ul></li><li><strong>按调度的层次划分：</strong><ul><li>Long-term scheduling（长程调度）</li><li>Medium-term scheduling（中程调度）</li><li>Short-term scheduling（短程调度）</li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/03/19/8sBhUx.md.png" alt></p><blockquote><p>短程调度在内存里面完成，中程调度在内外存之间，长程调度是基于作业的，将外存的作业调度到内存里面，创建一个新的线程</p></blockquote><blockquote><p>通常的阻塞队列回到就绪队列不需要通过调度，磁盘调度例外</p></blockquote><h4 id="进程调度的类型：长、中、短程调度"><a href="#进程调度的类型：长、中、短程调度" class="headerlink" title="进程调度的类型：长、中、短程调度"></a>进程调度的类型：长、中、短程调度</h4><h5 id="Long-term-scheduling"><a href="#Long-term-scheduling" class="headerlink" title="Long-term scheduling"></a>Long-term scheduling</h5><ul><li>又称为<strong>高级潮度、作业调度</strong>，它为被调度作业或用户程序创建进程、分配必要的系统资源，并将新创建的进程插入<strong>就绪队列</strong>，等待Short-term scheduling</li><li>Determines <strong>which</strong> programs are admitted to the system for processing(确定系统允许哪些程序进行处理)<ul><li>这取决于调度算法，如FCFS、短作业优先、基于优先权、响应比高者优先等调度算法</li></ul></li><li><strong>How many</strong> programs are admitted to the system?(允许多少个进程进入系统)<ul><li>Controls the degree of multiprogramming （由系统的性能来决定的，要控制多道程序的度）</li></ul></li><li><strong>When</strong> does the scheduler be invoked?（什么时候会启动作业调度）<ul><li>Each time a job terminates（有作业终止，可以装新的进来）</li><li>Processor is idle exceeds a certain threshold（处理器空闲超过某个阈值）</li></ul></li></ul><h5 id="Medium-term-scheduling（pc机，Windows-Linux不支持这种调度）"><a href="#Medium-term-scheduling（pc机，Windows-Linux不支持这种调度）" class="headerlink" title="Medium-term scheduling（pc机，Windows,Linux不支持这种调度）"></a>Medium-term scheduling（pc机，Windows,Linux不支持这种调度）</h5><ul><li>又称为<strong>中级调度</strong>，它调度换出到磁盘的进程进入内存，准备执行</li><li><strong>中程调度</strong>配合<strong>对换技术</strong>使用。</li><li>其目的是为了提高内存的利用率和系统吞吐量。</li><li>在多道程序度允许的情况下，从外存选择一个挂起状态的进程调度到内存（换入）</li></ul><h5 id="Short-term-scheduling"><a href="#Short-term-scheduling" class="headerlink" title="Short-term scheduling"></a>Short-term scheduling</h5><ul><li>又称为<strong>进程调度，低级调度</strong>，调度内存中的就绪进程执行。</li><li>Known as the dispatcher：决定就绪队列<strong><em>Which</em></strong>进程将获得处理机</li><li>Executes most frequently(执行次数最频繁)</li><li>Invoked when an event occurs<ul><li>Clock interrupts（时钟中断）</li><li>I/O interrupts（I/O中断）</li><li>Operating system calls</li><li>Signals（信号，信号发生的时候会有新进程）</li></ul></li></ul><h4 id="进程调度（短程调度）"><a href="#进程调度（短程调度）" class="headerlink" title="进程调度（短程调度）"></a>进程调度（短程调度）</h4><h5 id="User-oriented（面向用户）"><a href="#User-oriented（面向用户）" class="headerlink" title="User-oriented（面向用户）"></a>User-oriented（面向用户）</h5><ul><li><strong>Response Time（响应时间）</strong><ul><li>Elapsed time between the submission of a request until there is output.（请求提交到输出之间的运行时间）</li><li>常用于评价分时系统的性能。</li></ul></li><li><strong>Turnaround time（周转时间）：很多都是在队列里面等待所花的时间</strong><ul><li>是指从作业提交给系统开始，到作业完成为止的这段时间间隔（也称为作业周转时间）</li><li>常用于评价批处理系统的性能。</li></ul></li><li><strong>Deadlines（截止时间）：不一定能保证控制成功</strong><ul><li>是指某任务必复始益查的最迟时间（Starting deadline），或必复完成的最迟时间（Completion deadline）</li><li>常用于评价实时系统的性能。</li></ul></li></ul><h5 id="System-oriented（面向系统）"><a href="#System-oriented（面向系统）" class="headerlink" title="System-oriented（面向系统）"></a>System-oriented（面向系统）</h5><ul><li><strong>Throughput（吞吐量）</strong><ul><li>单位时间内系统所完成的作业数（尽量提高其吞吐量）</li><li>用于评价批处理系统的性能</li></ul></li><li><strong>处理机利用率</strong><ul><li>This is the percentage of time that the processor is busy.（这是处理器繁忙的时间百分比）</li><li>Effective and efficient utilization of the processor.（对处理器的有效利用）</li></ul></li><li><strong>Balancing Resource（资源平衡</strong>：作业调度可以现在偏于I/O或偏于计算的，可以做到资源平衡使用，进程调度无法考虑这个问题）<ul><li>Keep the resources of the system busy.（）</li><li>适用于长程调度和中程调度</li></ul></li><li>Fairness（公平性）<ul><li>Process should be treated the same，and no process should suffer starvation.（没有进程处于饥饿状态）</li></ul></li></ul><h5 id="Priorities"><a href="#Priorities" class="headerlink" title="Priorities"></a>Priorities</h5><ul><li>Scheduler will always choose a process of higher priority over one of lower priority.（选择优先级高的进程先进行运行）</li><li>Have multiple Ready queues to represent each level of priority.（根据不同的优先级来设置不同的就绪队列）</li><li>Lower-priority may suffer starvation.（这样处理就有可能使优先级低的进程进入饥饿状态）<ul><li>allow a process to change its priority based on its age（生存期）or execution history.（通过允许进程通过他自身存在的生存时间来改变其优先级）</li></ul></li></ul><h4 id="处理机和CPU区别"><a href="#处理机和CPU区别" class="headerlink" title="处理机和CPU区别"></a>处理机和CPU区别</h4><blockquote><p><strong>处理机</strong><br>处理机是计算机系统中存储程序和数据，并按照程序规定的步骤执行指令的部件。程序是描述处理机完成某项任务的指令序列。指令则是处理机能直接解释、执行的信息单位。<strong><em>处理机包括中央处理器（cpu），主存储器,输入-输出接口。</em></strong>处理机加接外围设备就构成完整的计算机系统</p></blockquote><blockquote><p><strong>CPU</strong><br>中央处理器（CPU，Central Processing Unit）是一块超大规模的集成电路，是一台计算机的运算核心（Core）和控制核心（ Control Unit）。它的功能主要是解释计算机指令以及处理计算机软件中的数据。</p></blockquote><h4 id="先来先服务算法"><a href="#先来先服务算法" class="headerlink" title="先来先服务算法"></a>先来先服务算法</h4><h5 id="Decision-Mode（决策模式）"><a href="#Decision-Mode（决策模式）" class="headerlink" title="Decision Mode（决策模式）"></a>Decision Mode（决策模式）</h5><ul><li><strong>Nonpreemptive（非剥夺方式）</strong><ul><li>Once a process is in the running state，it will continue until it terminates or blocks itself for I/O.（一旦一个进程进入Running状态，除非是自己执行完毕或者自身要进行I/O阻塞，否则不会被中断）</li><li>主要用于批处理系统。（减少了中断次数，减少运行周期的时间）</li></ul></li><li><strong>Preemptive（剥夺方式）</strong><ul><li>Currently running process may be interrupted and moved to the Ready state by the operating system（正在运行的进程可能被系统强制中断，进入到就绪状态）</li><li>Allows for better service since any one process cannot monopolize the processor for very long.（允许更好的服务，因为任何一个进程都不可能长时间独占处理器，可以及时响应优先级高的进程）</li><li>主要用于实时性要求较高的实时系统及性能要求较高的批处理系统和分时系统。</li></ul></li></ul><h5 id="First-Come-First-Served（FCFS）"><a href="#First-Come-First-Served（FCFS）" class="headerlink" title="First-Come-First-Served（FCFS）"></a>First-Come-First-Served（FCFS）</h5><ul><li>A short process may have to wait a very long time before it can execute.</li><li>Favors（有利于） CPU-bound（CPU型，即计算型的，需要用到大量的CPU资源） processes.<ul><li>I/O processes have to wait until CPU-bound process completes.</li></ul></li><li>不需要估计服务时间</li></ul><p><strong>FCFS算法的实际应用</strong></p><ul><li>一般，FCFS与其他调度算法混合使用。</li><li>系统可以按照不同的优先级维护多个就绪队列，每个队列内部按照FCFS算法调度。</li></ul><h4 id="其他调度算法"><a href="#其他调度算法" class="headerlink" title="其他调度算法"></a>其他调度算法</h4><h5 id="Round-Robin（Virtual-round-robin）轮转调度法"><a href="#Round-Robin（Virtual-round-robin）轮转调度法" class="headerlink" title="Round Robin（Virtual round robin）轮转调度法"></a>Round Robin（Virtual round robin）轮转调度法</h5><ul><li>轮转调度法：轮转调度就是希望能够兼顾各个进程都能得到一些服务，给所有的进程都是一个固定长的时间片，计时时间片开始，那么进程开始执行，时间片一到，就中止执行，然后调度下一个进程</li><li>虚拟轮转调度：希望改进I/O型的进程不要在排队花太长时间，多设置一个就绪队列，是经过一个完整的时间片（Time out）的进程返回到原来的就绪队列排队，而经过I/O过程之后的进程进入到优先级较高的队列进行排队，</li><li>不需要估计服务时间</li></ul><h5 id="Shortest-Process-Next（短进程优先）"><a href="#Shortest-Process-Next（短进程优先）" class="headerlink" title="Shortest Process Next（短进程优先）"></a>Shortest Process Next（短进程优先）</h5><ul><li>短进程优先进行</li><li>这样短进程过多的时候，就会使长进程等待的时间过多</li><li>需要估计服务时间</li></ul><h5 id="响应比高者优先（理想化，算这个响应比太过耗资源）"><a href="#响应比高者优先（理想化，算这个响应比太过耗资源）" class="headerlink" title="响应比高者优先（理想化，算这个响应比太过耗资源）"></a>响应比高者优先（理想化，算这个响应比太过耗资源）</h5><ul><li>响应比 = （进程服务时间 + 等待时间）/ 进程服务时间</li><li>等待时间长的先执行</li><li>需要估计服务时间</li></ul><h5 id="Feedback（反馈调度法）"><a href="#Feedback（反馈调度法）" class="headerlink" title="Feedback（反馈调度法）"></a>Feedback（反馈调度法）</h5><ul><li>反馈调度法：准备多个就绪队列，每个队列的每个时钟的时间片逐渐升高，刚进来的进程都在第一个队列排队，在经过一个时间片的执行之后，如果该进程没有执行完毕，就会进入下一个队列排队，再经过一个时间片的执行，还没有完成，就会再进入更下一个的队列排队，其优先级越来越低，第一个队列的优先级最高</li></ul><h4 id="实时系统与实时任务"><a href="#实时系统与实时任务" class="headerlink" title="实时系统与实时任务"></a>实时系统与实时任务</h4><p>Real-Time Scheduling（实时调度）</p><h5 id="Real-Time-Systems"><a href="#Real-Time-Systems" class="headerlink" title="Real-Time Systems"></a>Real-Time Systems</h5><ul><li>Correctness of the system depends not only on the logical result of the computation but also on the time at which the results are produced.（系统的正确性不仅取决于计算的逻辑结果，而且取决于产生结果的时间。）</li><li><strong>Tasks or processes</strong> attempt to control or react to events that take place in the outside world.（在这个系统里面，任务和进程没有区分）</li><li>These events occur in “real time”and process must be able to keep up with them.（事件是实时发生的，进程能够跟得上）</li></ul><p><strong>使用的实例</strong></p><ul><li>Control of laboratory experiments(实验室实验控制)</li><li>Process control plants</li><li>Robotics</li><li>Air traffic control</li><li>Telecommunications</li><li>Military command and control systems</li></ul><blockquote><p>实时系统：指能及时响应外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致地运行的计算机系统。</p></blockquote><blockquote><ul><li><strong>实时控制系统</strong>，指要求进行实时控制的系统。用于生产过程的控制，实时采集现场数据，并对所采集的数据进行及时处理。如飞机的自动驾驶系统，以及导弹的制导系统等。</li><li><strong>实时信息处理系统</strong>，指能对信息进行实时处理的系统。典型的实时信息处理系统有：飞机订票系统、情报检索系统等。</li></ul></blockquote><h5 id="Real-time-Task-实时任务"><a href="#Real-time-Task-实时任务" class="headerlink" title="Real-time Task(实时任务)"></a>Real-time Task(实时任务)</h5><ul><li><strong>按任务执行时是否呈现周期性来划分</strong><ul><li>periodic（周期性）实时任务</li><li>aperiodic（非周期性）实时任务，必须联系着一个deadline</li></ul></li><li><strong>根据对截止时间的要求来划分</strong><ul><li>hard real-time task（硬实时任务），系统必须满足任务对截止时间的要求，否则可能出现难以预测的结果。</li><li>soft real-time task（软实时任务）</li></ul></li></ul><h5 id="Characteristics-of-Real-Time-Operating-Systems（实时操作系统的特征）"><a href="#Characteristics-of-Real-Time-Operating-Systems（实时操作系统的特征）" class="headerlink" title="Characteristics of Real-Time Operating Systems（实时操作系统的特征）"></a>Characteristics of Real-Time Operating Systems（实时操作系统的特征）</h5><ul><li>Deterministic（确定性）<ul><li>Operations are performed at fixed，predetermined times or within predetermined time intervals.(操作是在固定的、预定的时间或预定的时间间隔内执行的)</li><li>Concerned with how long the operating system delays before acknowledging an interrupt.（获取一个中断之后，要多久才去响应）</li></ul></li><li>Responsiveness(响应性)<ul><li>How long, after acknowledgment, it takes the operating system to service the interrupt.</li><li>Includes amount of time to begin execution of the interrupt.（包括开始执行中断所需的时间）</li><li>Includes the amount of time to perform the interrupt.（包括执行中断的时间。）</li></ul></li></ul><blockquote><p>中断处理过程：系统收到中断以后会进行个判优，获取中断号，然后根据中断号获取中断向量表地址，（中间的查询方式有向量方式和非向量方式）得到地址之后就会跳转到中断处理程序，这个期间要进行一个中断引指令（作用：保存断点，转向中断程序）中断要保存现场，处理完毕之后要恢复现场，开中断，然后返回中断断点</p></blockquote><blockquote><p>系统必须要预设好系统自身能处理哪些中断例程</p></blockquote><h5 id="Features-of-Real-Time-Operating-Systems"><a href="#Features-of-Real-Time-Operating-Systems" class="headerlink" title="Features of Real-Time Operating Systems"></a>Features of Real-Time Operating Systems</h5><ul><li>Fast context switch</li><li>Small size </li><li>Ability to respond to external interrupts quickly.</li><li>Multitasking with interprocess communicationtools such as semaphores，signals and events.（使用进程间通信工具(如信号量、信号和事件)进行多任务处理。）</li><li>Files that accumulate（存储）data at a fast rate.</li><li>Use of special sequential files that can accumulate data at a fast rate.（按照某种顺序来存储文件，尽量提高速度）</li><li>Preemptive scheduling base on priority.(基于优先级的抢占式调度)</li><li>Minimization of intervals during which interrupts are disabled.(最小化禁用中断的间隔。)</li><li>Delay tasks for fixed amount of time.(不可能一直等待反馈信息，一段时间没有接收到，就会进行相应的处理)</li><li>Special alarms and timeouts（报警和超时处理）.</li></ul><h4 id="实时系统的调度"><a href="#实时系统的调度" class="headerlink" title="实时系统的调度"></a>实时系统的调度</h4><p><strong>Scheduling of a Real-Time Process</strong></p><ul><li>Real-Time Scheduling</li><li>Deadline Scheduling</li><li>Rate Monotonic Scheduling</li></ul><p><strong>Scheduling of a Real-Time Process（实时进程的调度）</strong></p><ul><li>Round Robin Preemptive Scheduler（基于时间片的轮转调度法）<ul><li>响应时间在秒级</li><li>广泛应用于分时系统，也可用于一般的实时信息处理系统</li><li>不适合于要求严格的实时控制系统。</li></ul></li><li>Priority-driven Nonpreemptive Scheduler（基于优先级非剥夺调度法）<ul><li>为实时任务赋予较高的优先级，将它插入就绪队列队首，只要正在执行的进程释放Processor，则立即调度该实时任务执行。</li><li>响应时间一般在邀百毫秒至教秘范围。</li><li>多用于多道批处理系统，也可以用于要求不太严格的实时系统。</li></ul></li><li>Priority-driven Preemptive Scheduler（基于优先级的剥夺调度法）<ul><li>当实时任务到达后，可以在时钟中断时，剥夺正在执行的低优先级进程的执行，调度执行高优先级的任务</li><li>响应时间较短，一般在几士毫秒或几毫秒。</li></ul></li><li>Immediate Preemptive Scheduler（立即剥夺调度法）<ul><li>要求操作系统具有快速响应外部事件的能力。一旦出现外部中断，只要当前任务未处于临界区，便立即剥夺其执行，把处理机分配给请求中断的紧迫任务。（并不是能立刻中断的，比如原语进程）</li><li>调度时延可以降至100激秒，甚至更低。</li></ul></li></ul><p><strong>Aim of Real-Time scheduling（实时调度的目标）</strong></p><ul><li><strong><em>hard real-time task</em></strong>，在其规定的截止时间内完成尽可能使<strong><em>soft real-time task</em></strong>也能在规定的截止时间内完成。</li><li>公平性和最短平均响应时间等要求已不再重要。</li><li>但是，大多数现代实时操作系统无法直接处理任务的截止时间，它们只能尽量提高响应速度，以尽快地调度任务。</li></ul><h5 id="Real-Time-Scheduling"><a href="#Real-Time-Scheduling" class="headerlink" title="Real-Time Scheduling"></a>Real-Time Scheduling</h5><ul><li>Statie table-driven（静态表驱动调度法）（建立一张表，这张表里面要记载你哪个实时任务何时到，你的截止时间是什么时候，每次调度的时候查询这张表来决定下一次调度哪个任务来执行）<ul><li>Determines at run time when a task begins execution.</li></ul></li><li>Static priority-driven preemptive（静态优先级剥夺调度法）<ul><li>Traditional priority-driven scheduler is used.</li></ul></li><li>Dynamie planning-based（动态计划调度法）</li><li>Dynamic best effort（动态最大努力调度法）</li></ul><p><strong>Static table-driven approaches（静态表驱动方法）</strong></p><ul><li>用于<strong><em>调度周超性实时在多。</em></strong></li><li>按照任务周期到达的时间、执行时间、完成截止时间（ending deadline）以及任务的优先级，<strong><em>制订调度表</em></strong>，调度实时任务。</li><li>最早截止时间优先（EDF）调度算法即属于此类。</li><li>此类算法不灵活，任何任务的调度申请改动都会引起调度表的修改。</li></ul><p><strong>Static priority-driven preemptive approaches</strong></p><ul><li>此类算法多用于非实时多道程序系统。</li><li>优先级的确定方法很多，例如在分时系统中，可以对I/O bound 和processor bound的进程赋予不同的优先级。</li><li>实时系统中一般根据对在务的跟定时间赋予优先级，例如速度单调算法（RM）即是为实时任务赋予静态优先级。</li></ul><p><strong>Dynamic planning-based approaches</strong></p><ul><li>当实时任务到达以后，系统为新到达的任务和正在执行的任务<strong><em>动态创建一张调度表。</em></strong></li><li>在当前执行进程不会错过其截止时间的条件下，如果也能使新到达任务在截止时间内完成，则立即调度执行新任务。</li></ul><p><strong>Dynamic best effort approaches</strong></p><ul><li>实现简单，广泛用于<strong><em>非周期性实时在多调度</em></strong>。</li><li>当任务到达时，系统根据其属性赋予优先级，优先级高的先调度。例如最早截止时间优先EDF调度算法就采用了这种方法。这种算法总是<strong><em>尽最大努力尽早湖度紧迫任务</em></strong>，因此称为“最大努力调度算法”。</li><li>缺点在于，当任务完成，或截止时间到达时，很难知道该任务是否满足其约束时间。</li></ul><h4 id="截止时间调度"><a href="#截止时间调度" class="headerlink" title="截止时间调度"></a>截止时间调度</h4><p><strong>Deadline Scheduling</strong></p><ul><li>Information used<ul><li>Ready time</li><li>Starting deadline</li><li>Completion deadline</li><li>Processing time</li><li>Resource requirements</li><li>Priority</li><li>Subtask scheduler：一个任务可以分解出<strong><em>强制子任务（manda tory subrask）和非强制子任务（optional subtask）</em></strong>.只有强制子任务拥有硬截止时间（hard deadline）。</li></ul></li><li><strong>Whiclh task to schedule next?*</strong><ul><li>Scheduling tasks with the earliest deadline minimized the fraction of tasks that miss their deadlines（为了能够尽量满足任务的截止时间，因此采用最早截止时间优先）</li></ul></li><li><strong>What sort of preemption is allowed？（哪种剥夺方式）</strong><ul><li>When starting deadlines are specified，then a nonpreemtive scheduler makes sense.（给定了开始截止时间，采用的非剥夺方式比较好）在执行完强制子任务或临界区后，阻塞自己。</li><li>For a system with completion deadlines,a preemptive strategy is most appropriate.（给定了完成截止时间（更加要求时间不能错过），采用剥夺方式最合适）</li></ul></li></ul><h5 id="Earliest-Deadline（最早截止时间优先，商称ED）"><a href="#Earliest-Deadline（最早截止时间优先，商称ED）" class="headerlink" title="Earliest Deadline（最早截止时间优先，商称ED）"></a>Earliest Deadline（最早截止时间优先，商称ED）</h5><ul><li>常用调度算法</li><li>若指定任务的<strong><em>Starting deadlines（开始截止时间）</em></strong>，则采用<strong><em>Nonpreemption（非剥夺型）</em></strong>，当某任务的开始截止时间到达时，正在执行的任务必须执行完其强制部分或临界区，释放CPU，调度开始截止时间到的任务执行（严格来说还是一种剥夺型）</li></ul><h5 id="Periodic-tasks-with-completion-deadlines（周期任务给定完成截止时间）"><a href="#Periodic-tasks-with-completion-deadlines（周期任务给定完成截止时间）" class="headerlink" title="Periodic tasks with completion deadlines（周期任务给定完成截止时间）"></a>Periodic tasks with completion deadlines（周期任务给定完成截止时间）</h5><ul><li>由于此类任务是周期性的、可预测的，可采用<strong><em>静态表驱动之最早截止时间优先调度算法</em></strong>，使系统中的任务都能按要求完成。</li></ul><h5 id="Aperiodic-tasks-with-starting-deadlines（非周期性任务给定开始截止时间）"><a href="#Aperiodic-tasks-with-starting-deadlines（非周期性任务给定开始截止时间）" class="headerlink" title="Aperiodic tasks with starting deadlines（非周期性任务给定开始截止时间）"></a>Aperiodic tasks with starting deadlines（非周期性任务给定开始截止时间）</h5><ul><li>可以采用<strong><em>最早截止时间优先调度算法</em></strong>或<strong><em>允许CPU空闲的EDF调度算法</em></strong>。</li><li><strong><em>Earliest Deadline with Unforced Idle Times（允许CPU空闲的EDF调度算法）</em></strong>，指优先调度最早截止时间的任务，并将它执行完毕才调度下一个任务。即使选定的任务未就绪，允许CPU空闲等待，也不能调度其他任务。尽管CPU的利用率不高，但这种调度算法可以保证系统中的任务都能按要求完成。</li></ul><h4 id="Rate-Monotonic-Scheduling（速度单调调度算法）"><a href="#Rate-Monotonic-Scheduling（速度单调调度算法）" class="headerlink" title="Rate Monotonic Scheduling（速度单调调度算法）"></a>Rate Monotonic Scheduling（速度单调调度算法）</h4><ul><li>Assigns priorities to tasks on the basis of their periods.（基于周期长短给予优先级）</li><li>Highest-priority task is the one with the shortest period.（周期短的优先级高）</li><li><strong>Period（任务周期）</strong>，指一个任务到达至下一任务到达之间的时间范围。</li><li><strong>Rate（任务速度）</strong>，即周期（以秒计）的倒数，以赫兹为单位。</li><li><strong>任务周期的结束</strong>，表示任务的硬截止时间。任务的执行时间不应超过任务周期</li><li>CPU的利用率=任务执行时间/任务周期</li><li>在RMS调度算法中，如果以任务速度为参数，则优先级函数是一个单调递增的函数</li></ul><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>【1】scheduling（调度）<br>【2】Real-Time（实时）<br>【3】Responsg Time（响应时间）<br>【4】Turnaround time（周转时间）<br>【5】Deadlines（截止时间）<br>【6】Throughput（吞吐量）<br>【7】Decision Mode（决策模式）<br>【8】Nonpreemptive（非剥夺）<br>【9】Preemptive（剥夺）<br>【10】User-oriented（面向用户）<br>【11】System-oriented（面向系统）<br>【12】processor（处理机）<br>【13】utilization（利用）<br>【14】CPU-bound（CPU绑定：CPU型，即计算型的，需要用到大量的CPU资源）<br>【15】I/O-bound（I/O绑定：该进程有很多的输入输出的）<br>【16】periodic（周期性）<br>【17】Deterministic（确定性）<br>【18】semaphores（信号量）</p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System(1)</title>
      <link href="/2020/03/12/cao-zuo-xi-tong-os/"/>
      <url>/2020/03/12/cao-zuo-xi-tong-os/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统–绪论（Operating-System-Overview）"><a href="#操作系统–绪论（Operating-System-Overview）" class="headerlink" title="操作系统–绪论（Operating System Overview）"></a>操作系统–绪论（Operating System Overview）</h1><h4 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h4><blockquote><p>Organization<br> Part 1 Operating System Overview<br> Part 2 Processes and Scheduling(进程与调度)<br> Part 3 Memory Management<br> Part 4 Device Management<br> Part 5 File Management</p></blockquote><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><ul><li>关于现代操作系统的四种基本观点（What’s OS）</li><li>现代操作系统功能和非功能性需求（按软件工程的观点分析OS的结构）</li><li>操作系统的发展、类型及特征</li><li>现代操作系统体系结构基础知识</li></ul><h4 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h4><p><img src="https://s1.ax1x.com/2020/03/12/8Zjkod.png" alt></p><h5 id="关于现代OS的四种基本观点"><a href="#关于现代OS的四种基本观点" class="headerlink" title="关于现代OS的四种基本观点"></a>关于现代OS的四种基本观点</h5><ul><li>User/Computer Interface：该观点认为0S是计算机用户使用计算机系统的接口，它为计算机用户提供了方便的工作环境。</li><li>Virtual Machine：该观点认为OS是建立在计算机硬件平台上的虚拟机器，它为应用软件提供了许多计算机硬件功能更强或计算机硬件所没有的功能。</li><li>Resource Manager：该观点认为0S是计算机系统中各类资源的管理者，它负责分配、回收以及控制系统中的各种软硬件资源。<strong><em>（本课程中所持的观点）</em></strong></li><li>Job Organizer：该观点认为OS是计算机系统工作流程的组织者，它负责协调在系统中运行的各个应用软件的送行次序。</li></ul><h4 id="OS的系统需求"><a href="#OS的系统需求" class="headerlink" title="OS的系统需求"></a>OS的系统需求</h4><h5 id="软件系统的系统需求"><a href="#软件系统的系统需求" class="headerlink" title="软件系统的系统需求"></a>软件系统的系统需求</h5><blockquote><p>所谓软件系统的系统需求是指，人们从软件系统的外部对软件系统提出的诸多期望。这些期望包括三种类型：</p></blockquote><p>1.软件系统能提供的服务；<br>2.软件系统在提供这些服务时，需要满足的限制条件；<br>3.软件系统具有适应某些变化的能力。<br>第一类系统需求是后两类系统需求赖以存在的基础，称之为<code>软件系统的功能性需求</code>，后两类系统需求称为<code>软件系统的非功能性需求</code>。</p><h5 id="OS的功能性需求"><a href="#OS的功能性需求" class="headerlink" title="OS的功能性需求"></a>OS的功能性需求</h5><ul><li>计算机用户需要的用户命令<ul><li>由OS实现的所有用户命令所构成的集合常被人们称为OS的<em>Interface（用户接口）</em>；有时也称为命令接口。</li></ul></li><li>应用软件需要的*System Call（系统调用）<ul><li>由OS实现的所有系统调用所构成的集合被人们称<strong><em>程序接口</em></strong>或<strong><em>应用程序编程接口（Application Programming Interface， API）</em></strong></li></ul></li></ul><p><img src="https://s1.ax1x.com/2020/03/12/8eCRC4.png" alt></p><blockquote><p>在该操作系统的控制下的称为<code>联机使用方式</code>，不在系统的控制下运行的称为<code>脱机使用方式</code></p></blockquote><p><img src="https://s1.ax1x.com/2020/03/12/8ePjFU.png" alt></p><h5 id="OS的非功能性需求"><a href="#OS的非功能性需求" class="headerlink" title="OS的非功能性需求"></a>OS的非功能性需求</h5><ul><li>Performance（性能）or Efficiency（效率）<ul><li>-maximize throughput，minimize response time，and in the case of time sharing，accommodate as many users as possible<blockquote><p>throughput:吞吐量，系统吞吐量：单位时间系统完成的任务</p></blockquote></li></ul></li><li>Fairness（公平性）<ul><li>-give equal and fair access to all processes</li></ul></li><li>Reliability（可靠性）</li><li>Security（安全性）</li><li>Scalability（可伸缩性）</li><li>Extensibility（可扩展性）</li><li>Portability（可移植性）</li></ul><h4 id="OS对硬件平台的依赖"><a href="#OS对硬件平台的依赖" class="headerlink" title="OS对硬件平台的依赖"></a>OS对硬件平台的依赖</h4><p>硬件</p><ul><li>Timer：计时器</li><li>I/O Interrupts：I/O设备</li><li>DMA or Channel：直接存储存取，减少系统中断的次数</li><li>Privileged Instructions：硬件指令的优先权</li><li>Memory Protection Mechanism：存储保护的机制 支撑地址转换</li></ul><h4 id="重要的基本概念"><a href="#重要的基本概念" class="headerlink" title="重要的基本概念"></a>重要的基本概念</h4><h5 id="Job（作业）"><a href="#Job（作业）" class="headerlink" title="Job（作业）"></a>Job（作业）</h5><ul><li>Job是指，计算机用户在一次上机过程中要求计算机系统为其所做工作的集合；作业中的每项相对独立的工作称为作业生。</li><li>通常，人们用一组命令来描述作业；其中，每个命令定义一个作业步。<blockquote><p>Off-line Job：计算机用户不能在此类作业被计算机系统处理时改变已定义好的作业步。<br>On-line Job：计算机用户可以在此类作业被计算机系统处理时随时改变其作业步。</p></blockquote></li></ul><h5 id="Thread-amp-Process-线程和进程"><a href="#Thread-amp-Process-线程和进程" class="headerlink" title="Thread &amp; Process(线程和进程)"></a>Thread &amp; Process(线程和进程)</h5><ul><li>Thread是指程序的一次相对独立的运行过程；在现代OS中，线程是系统调度的最小单位。</li><li>Process是指，系统分配资源的基本对象；在现代OS中，进程仅仅是系统中拥有资源的最小实体；不过，在传统OS中，进程同时也是系统调度的最小单位。<ul><li><strong><em>一个进程里面有多个线程，线程可以分享进程的资源，线程归属与某个进程，调度的时候是按照线程来调度</em></strong></li></ul></li><li>Virtual Memory（虚拟存储），简单地说，就是进程的逻辑地址空间；它是现代OS对计算机系统中多级物理存储体系进行高度抽象的结果。<ul><li><strong><em>外存来支撑了有限的内存，将一部分外存通过算法虚拟化成内存来使用</em></strong></li></ul></li><li>File（文件），简单地说，就是命名了的字节流；它是现代OS对计算机系统中种类繁多的外部设备进行高度抽象的结果。</li></ul><h4 id="OS的演变，类型及特征"><a href="#OS的演变，类型及特征" class="headerlink" title="OS的演变，类型及特征"></a>OS的演变，类型及特征</h4><p>Ease of Evolution of an Operating Svstem</p><ul><li>Fixes（修改）</li><li>New Services</li><li>Hardware Upgrade Plus New Types of Hardware</li><li>Efficiency</li></ul><p>Serial Processing（串行处理）==&gt; Simple Batch Systems（简单批处理系统）</p><p>Simple Batch Systems（简单批处理系统）</p><ul><li>Monitors（监督程序）：Software that controls the running programs<br>  -Resident monitor is in main memory and available for execution</li><li>Batch jobs together</li><li>Program branches back to monitor when finished</li></ul><blockquote><p>单道简单批处理系统：每次在内存里面运行的JOB就只能有一个，而多个JOB（作业）在外存排队，这些JOB的调度工作由Monitors处理</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/12/8eglAe.png" alt></p><blockquote><p>单道程序设计技术（Uniprogramming）内存里面始终只有一道程序驻留在里面，该程序占用了CPU的所有的资源（除了Monitors）</p></blockquote><h5 id="Multiprogramming（多道程序设计）：只是进行准备，并不能真正的同时进行"><a href="#Multiprogramming（多道程序设计）：只是进行准备，并不能真正的同时进行" class="headerlink" title="Multiprogramming（多道程序设计）：只是进行准备，并不能真正的同时进行"></a>Multiprogramming（多道程序设计）：只是进行准备，并不能真正的同时进行</h5><p>一个支持<strong>Multiprogramming</strong>的系统允许多道程序同时准备运行；<br>当正在运行的那道程序因为某种原因（比如等待输入或输出数据）暂时不能继续运行时，（在内存里面进行排队）<br>系统将自动地启动另一道程序运行；一旦原因消除（比如数据已经到达或数据已经输出完毕），<br>暂时停止运行的那道程序在将来某个时候还可以被系统重新启动继续运行。</p><p><img src="https://s1.ax1x.com/2020/03/12/8eXv9I.png" alt></p><h5 id="多道程序带来的问题"><a href="#多道程序带来的问题" class="headerlink" title="多道程序带来的问题"></a>多道程序带来的问题</h5><p>Difficulties with Multiprogramming</p><ul><li>Improper synchronization（同步）<ul><li>-ensure a process waiting for an I/O device receives the signal</li></ul></li><li>Failed mutual exclusion（互斥）</li><li>Nondeterminate program operation<ul><li>-program should only depend on input to it</li></ul></li><li>Deadlocks（死锁）</li></ul><p><strong>同步：指的是一种协调,对于两个进程A和B,B需要A进程产生的结果，如果进程A还未产生结果，则B会进行等待。但若A所产生的结果在存储区（A，B资源的共享区）里面放满了，快要溢出，则A会进入等待，待B进行消化掉A产生的jieg之后再进行产生结果：这种互相等待的方式就是同步</strong></p><blockquote><p>互斥：对于一个资源不可以被A或B进程同时进行操作，否则会出现”脏数据“，这时就要要求互斥<br>死锁：多个进程同时对同一个资源进行竞争争夺产生的结果，</p></blockquote><h4 id="Time-Sharing（分时系统）-是为了在基于多道程序系统下面处理多个交互式的作业"><a href="#Time-Sharing（分时系统）-是为了在基于多道程序系统下面处理多个交互式的作业" class="headerlink" title="Time Sharing（分时系统）:是为了在基于多道程序系统下面处理多个交互式的作业"></a>Time Sharing（分时系统）:是为了在基于多道程序系统下面处理多个交互式的作业</h4><ul><li>Using multiprogramming to handle multiple interactive（交互）jobs</li><li>Processor’s time is shared among multiple users</li><li>Multiple users simultaneously（同时）access the system through terminals</li></ul><p><img src="https://s1.ax1x.com/2020/03/12/8mkREt.png" alt></p><p>现代0S的基本类型按硬件平台系统结构分类：单机0S(PC这类),并行0S(多个cpu),网络0S(现在已经不严格分明),分布式0S(dns服务器属于此OS)</p><h5 id="单机0S的基本类型"><a href="#单机0S的基本类型" class="headerlink" title="单机0S的基本类型"></a>单机0S的基本类型</h5><p>按功能特征分类：</p><ul><li>Batch Processing OS（批处理系统）：系统能尽快将一批排队的JOB（作业）运行完成，吞吐量要够大</li><li>Time_Sharing OS（分时系统）：对多用户的任务的响应要足够快，及响应时间短</li><li>Real Time OS（实时系统）：分为实时信息处理系统：（如12306的售票系统就是一种实时信息处理系统：对数据库的数据要能尽快的更新和操作，不会产生由于时间误差产生的信息不对称）实时控制系统：（无人驾驶就是一种实时控制系统）</li></ul><h4 id="现代OS的两个基本特征"><a href="#现代OS的两个基本特征" class="headerlink" title="现代OS的两个基本特征"></a>现代OS的两个基本特征</h4><ul><li>任务共行<ul><li>从宏观上看，任务共行是指系统中有多个任务同时运行</li><li>从微观上看，任务共行是指<code>单处理机系统</code>中的<strong>任务并发（Task Concurrency：即多个任务在单个处理机上交替运行）</strong>或<code>多处理机系统</code>中的<strong>任务并行（Task Paralloli.sm：即多个任务在多个处理机上同时运行）</strong>。</li></ul></li><li>资源共享<ul><li>从宏观上看，资源共享是指多个任务可以同时使用系统中的软硬件资源</li><li>从微观上看，资源共享是指多个任务可以<strong>交替互斥</strong>地使用系统中的某个资源。</li></ul></li></ul><h5 id="任务管理模型"><a href="#任务管理模型" class="headerlink" title="任务管理模型"></a>任务管理模型</h5><p>所谓<strong>Task</strong>(任务)是指，计算机系统在某个资源集合上所做的一次相对独立的计算过程。</p><ul><li>在现代0S中，任务用<strong>线程</strong>和<strong>进程</strong>这两个基本概念共同表示：在传统0S中，任务仅仅用<strong>进程</strong>这一基本概念表示。</li><li>在现代0S中，任务管理模型用<strong>线程状态转换图</strong>表示：在传统0S中，任务管理模型用<strong>进程状态转换图</strong>表示。</li></ul><h5 id="资源管理模式"><a href="#资源管理模式" class="headerlink" title="资源管理模式"></a>资源管理模式</h5><p>所谓<strong>Resource</strong>（资源）是指，由程序和数据组成的<strong>软件资源</strong>以及包含CPU、存储器、I/O设备等在内的<strong>硬件资源</strong>。</p><ul><li>通常情况下，系统用<strong>竞争模式</strong>管理软件资源；为此，系统将为共享同一软件资源的多个任务提供互斥机制。</li><li>对于硬件资源，系统常常用<strong>分配模式</strong>加以管理。该模式可以描述为：<strong>申请—分配——使用—释放——回收</strong></li></ul><h4 id="OS结构风格"><a href="#OS结构风格" class="headerlink" title="OS结构风格"></a>OS结构风格</h4><h5 id="一种常见的0S总体结构风格"><a href="#一种常见的0S总体结构风格" class="headerlink" title="一种常见的0S总体结构风格"></a>一种常见的0S总体结构风格</h5><ul><li>大多数现代OS其总体结构包含两类子系统：一是<strong>用户接口子系统</strong>，二是<strong>基础平台子系统</strong>。其中，用户接口子系统提供计算机用户需求的<strong>用户命令</strong>，基础平台子系统提供应用软件需求的<strong>系统调用</strong>。</li><li><strong>用户接口子系统（Linux的shell）</strong>与<strong>基础平台子系统</strong>之间的相互关系具有<strong>单向性</strong>。具体地说，用户接口子系统在实现各种用户命令时能够引用基础平台子系统所提供的各种系统调用，但基础平台子系统在实现各种系统调用时不会引用用户接口子系统所提供的各种用户命令</li></ul><p><img src="https://s1.ax1x.com/2020/03/12/8m1vwT.png" alt="一种常见的0S总体结构风格(示意图)"></p><h5 id="0S基础平台子系统结构风格"><a href="#0S基础平台子系统结构风格" class="headerlink" title="0S基础平台子系统结构风格"></a>0S基础平台子系统结构风格</h5><p><strong>常见的基础平台子系统结构风格（一）</strong></p><ul><li>Layered Structural Style（分层结构风格….类似网络的分层结构）<ul><li>使用分层结构风格的基础平台子系统结构包含若干<strong>layer（层）</strong>；其中，每一层实现一组基本概念以及与其相关的基本属性。</li><li>层与层之间的<code>相互关系</code>：<ul><li>所有各层的实现不依赖其以上各层所提供的概念及其属性，只依赖其<strong>直接下层</strong>所提供的概念及属性；</li><li><strong>每一层均对其上各层隐藏其下各层的存在</strong>。</li></ul></li></ul></li><li>Hierarchical Structural Style（分级结构风格）<ul><li>使用分级结构风格的基础平台子系统结构包含若干<strong>level（级）</strong>；其中，每一级实现一组基本概念以及与其相关的基本属性。</li><li>级与级之间的<strong>相互关系</strong>：<ul><li>所有各级的实现<strong>不依赖其以上各级</strong>所提供的概念及属性，只依赖<strong>其以下各级</strong>所提供的概念及属性。所有下面各级都能看到</li></ul></li></ul></li><li>Modular Structural Style（分块结构风格，Linux就是这种结构）<ul><li>使用分块结构风格的基础平台子系统结构包含若干<strong>module（模块）</strong>；其中，每一块实现一组基本概念以及与其相关的基本属性。</li><li>块与块之间的<strong>相互关系</strong>：<ul><li><strong>所有各块的实现均可以任意引用其它各块所提供的概念及属性</strong>。</li></ul></li></ul></li></ul><blockquote><p>分层、分级、分块结构风格的关系:</p><ul><li>分层结构风格是一种特殊的分级结构风格。</li><li>分级结构风格是一种特殊的分块结构风格。</li></ul></blockquote><p><strong><em>分层、分块结构风格的比较</em></strong></p><ul><li><strong>分层结构风格</strong><ul><li>有利于实现基础平台子系统的可维护性、可扩展性、可移植性、部件可用性等非功能性需求；</li><li>不利于提高基础平台子系统的时间和空间效率；</li><li>构选一个纯粹的分层结构将非常困难。</li></ul></li><li><strong>分块结构风格</strong><ul><li>构选一个分块结构是一种切合实际的做法：</li><li>有利于生成高效、紧淡的基础平台子系统可执行代码：</li><li>不利于实现基础平台子系统的灵活性。(当模块很多的时候，就会很冗杂，失去灵活性)</li></ul></li></ul><blockquote><p>注：相对于分层结构风格以及分块结构风格，分级结构风格的长处和不足介于两者之间。</p></blockquote><p><strong>常见的基础平台子系统结构风格（一）</strong></p><ul><li>Multi-Mode Structural Style（多模式结构风格）<ul><li>使用多模式结构风格的基础平台子系统结构包含多个<strong>摸式模块</strong>；这些模式模块或者是一个应用软件或者是基础平台子系统的一部分。</li><li>在使用多模式结构风格的基础平台子系统结构中，不同的模式模块在不同的CPU特权模式下运行。</li></ul></li><li>Single-Mode Structural Style（单模式结构风格，Dos就是其中一种）<ul><li>使用单模式结构风格的基础平台子系统结构仅仅包合一个<strong>模式模块</strong>；该模式模块由应用软件和基础平台子系统共同组成。</li><li>在使用模式结构风格的基础平台子系统结构中，应用软件和基础平台子系统在同一CPU特权模式下运行。<blockquote><p>注：基本概念：Mode（模式）所谓模式，简单地说，就是程序在运行过程中使用的、由硬件体系结构提供的CPU特权模式。（安全考虑）</p></blockquote></li></ul></li></ul><p><strong><em>多模式结构风格与单模式结构风格的比较</em></strong></p><ul><li><strong>多模式结构风格</strong><ul><li>有利于实现基础平台子系统的可靠件、安个性等非功能性需求：</li><li>会降低基础平台子系统的性能：</li><li>在较高级别CPU特权模式下调试程序是一件困难的事情。</li></ul></li><li><strong>单做式结构风格</strong><ul><li>不会增加基础平台子系统的并发难度：</li><li>不会影响基础平台子系统的性能：</li><li>不利于实现基础平台子系统的可靠性、安个性等非功能性需求。</li></ul></li></ul><h5 id="双模式基础平台子系统结构风格（对单模式和多模式之间的折中–性能和安全）"><a href="#双模式基础平台子系统结构风格（对单模式和多模式之间的折中–性能和安全）" class="headerlink" title="双模式基础平台子系统结构风格（对单模式和多模式之间的折中–性能和安全）"></a>双模式基础平台子系统结构风格（对单模式和多模式之间的折中–性能和安全）</h5><blockquote><p>定义：若一个基础平台子系统使用了双模式结构风格，则称该基础平台子系统为<strong>双模式基础平台子系统</strong>。</p></blockquote><p>双模式基础平台子系统其总体结构包含两个模式模块;它们分别在两种不同的CPU特权模式下运行。</p><blockquote><p>注：习惯上，人们把双模式基础平台子系统的这两个模式模染分别称为<strong>核外子系统</strong>和<strong>核心子系统</strong>；把核外子系统所使用的CPU特权模式称为<strong>User Mode</strong>，把核心子系统所使用的CPU特权模式称为<strong>KerneI Mode</strong>。</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/12/8mwKVs.png" alt="双模式基础平台子系统总体结构风格示意图"></p><blockquote><p>核外子系统会调用核心子系统的服务，而核心子系统则不会调用核外子系统的服务</p></blockquote><p><strong><em>Modes of Execution</em></strong></p><ul><li>User mode<ul><li>Less-privileged mode</li><li>User programs typically execute in this mode </li></ul></li><li>System mode,control mode,or kernel mode<ul><li>More-privileged mode</li><li>Kernel of the operating system</li></ul></li></ul><blockquote><p>如果用户模式的应用有要访问系统级的数据，就要判断是否合法，再决定是否进行<strong>模式切换</strong></p></blockquote><p><strong>Microkernels（微核）结构</strong><br>微医结构设计思想：尽最大努力剔除核心子系统中的多余成份，并把它们移到核外子系统中实现，核心子系统只实现一些必要的简单的概念及其属性，从而保持核心子系统简洁高效。</p><p><strong>Microkernels</strong></p><ul><li>Small operating system core</li><li>Contains only essential operating systems functions</li><li>Many services traditionally included in the operating system are now external subsystems<ul><li>device drivers</li><li>file systems</li><li>virtual memory manager</li><li>windowing system</li><li>security services</li></ul></li></ul><h4 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h4><p>【1】Simple Batch Systems ==&gt; 单道批处理<br>【2】多道程序设计技术（Mutiprogramming）&amp;单道程序设计技术（Uniprogramming）<br>【3】分时系统（Time Sharing）<br>【4】并发（Concurrency）<br>【5】并行（Paralelism）<br>【6】执行模式（models of Execution）<br>【7】单模式（Single-Mode）&amp;多模式（Multi-Mode）&amp;双模式（Dual-Mode）<br>【8】微核结构（Microkernels）<br>【9】吞吐量（throughput）<br>【10】直接存储存取（Direct Memory Access）<br>【11】存储管理单元（MMU）</p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System(2)</title>
      <link href="/2020/02/16/cao-zuo-xi-tong-2/"/>
      <url>/2020/02/16/cao-zuo-xi-tong-2/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统–进程管理–进程描述与控制"><a href="#操作系统–进程管理–进程描述与控制" class="headerlink" title="操作系统–进程管理–进程描述与控制"></a>操作系统–进程管理–进程描述与控制</h1><h4 id="程序的执行顺序"><a href="#程序的执行顺序" class="headerlink" title="程序的执行顺序"></a>程序的执行顺序</h4><ul><li>程序顺序执行<ul><li>程序顺序执行时的特征：顺序性(一句一句按照顺序往下执行)、封闭性、可再现性(如果多次的输入情况一样的话，输出应该也是一致的，可以再现之前的结果)</li></ul></li><li>程序并发执行<ul><li>程序并发执行时的特征：间断性、非封闭性、不可再现性</li></ul></li><li>程序并发执行条件(Bernstein条件)<ul><li>两个进程之间的读写不能存在交集（一个进程占了读之后，写也要完成之后才能将资源让给其他进程）</li></ul></li></ul><h4 id="进程的概念和进程的并发（进程之间交替进行）执行"><a href="#进程的概念和进程的并发（进程之间交替进行）执行" class="headerlink" title="进程的概念和进程的并发（进程之间交替进行）执行"></a>进程的概念和进程的并发（进程之间交替进行）执行</h4><p><strong>Process</strong>（进程，下面为解释）:</p><ul><li>Also called a task（任务）</li><li>Execution of an individual program（程序的执行过程）</li><li>进程是程序在一个数据集合上的运行过程，是系统进行资源分配和调度的一个独立单位</li><li>Can be traced（进程可以被跟踪）<ul><li>list the sequence of instruetions that execute（用他的执行指令的系列来跟踪）</li></ul></li></ul><p><strong>Characteristics of Process（进程的特点）</strong></p><ul><li>Dynamic(动态性：进程是创建了才有，一会儿在执行，一会儿没有执行)</li><li>Concurrency（并发性：多进程是在交替执行的）</li><li>Independent（独立性：之间是独立存在）</li><li>Asynchronous（异步性：进程不是一定要同步执行）</li></ul><p><strong>Process Structure（进程结构）</strong></p><ul><li>Programs（程序：代码的集合）</li><li>Datas（数据）</li><li>PCB（Process Control Block：控制程序的执行）</li></ul><p><strong>Process States（进程的状态）</strong></p><ul><li>进程的并发执行</li><li>进程的2状态</li><li>进程的5状态</li><li>进程的状态转换图</li></ul><blockquote><p>每次中断（时钟中断/I/O中断）之后要执行调度程序（系统进程：所以有两种模式进行，模式切换）</p></blockquote><h4 id="进程的两状态和五状态"><a href="#进程的两状态和五状态" class="headerlink" title="进程的两状态和五状态"></a>进程的两状态和五状态</h4><p><strong>Two-State Process Model（两种状态）</strong></p><ul><li>Process may be in one of two states（进程在这两种状态中的一种）<ul><li>Running（执行）</li><li>Not-running（非执行）</li></ul></li></ul><blockquote><p>注：</p><ul><li>并非所有进程只要Not-running就处于<strong><em>ready（就绪）</em></strong>，有的需要<strong><em>blocked（阻塞）</em></strong>等待I/0完成</li><li>Not-running又可分为<strong><em>ready</em></strong>和<strong><em>blocked</em></strong>两种状态</li></ul></blockquote><p><strong>AFive-State Model(五状态)</strong></p><ul><li>Running（执行）:占用处理机（单处理机环境中，某一时刻仅一个进程占用处理机）</li><li>Ready（就绪）:准备执行</li><li>Blocked（阻塞）:等待某事件发生才能执行，如等待I/O完成等，但是并非被死锁</li><li>New（新状态）：进程已经创建，但未被OS接纳为可执行进程</li><li>Exit（退出）：因停止或取消，被OS从执行状态释放，有的称为”僵死状态”</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8YL2jO.png" alt="Five-State Process Model,状态转换图"></p><p><strong>状态转换</strong></p><ul><li>Null → New：新创建进程首先处于新状态</li><li>New → Ready:OS接纳新状态进程为就绪进程</li><li>Ready → Running:OS只能从就绪进程中选一个进程执行</li><li>Running → Exit：执行状态的进程执行完毕，或被取消，则转换为退出状态</li><li>Running → Ready：分时系统中，时间片用完，或优先级高的进程到来，将终止优先级低的进程的执行</li><li>Running → Blocked：执行进程需要等待某事件发生。通常因进程需要的系统调用不能立即完成，而阻塞</li><li>Blocked → Ready：当阻塞进程等待的事件发生，就转换为就绪状态</li><li>Ready → Exit：某些系统允许父进程在任何情况下终止其子进程。若一个父进程终止，其子孙进程都必须终止。</li><li>Blocked → Exit：同前</li></ul><blockquote><p>注：进入阻塞队列（一种事件产生会一个队列，多个事件产生多个队列，就是按照不同的事件分不同的队列）</p></blockquote><h4 id="交换技术-内外存之间交换程序或者数据，挂起状态的产生"><a href="#交换技术-内外存之间交换程序或者数据，挂起状态的产生" class="headerlink" title="交换技术(内外存之间交换程序或者数据，挂起状态的产生)"></a>交换技术(内外存之间交换程序或者数据，挂起状态的产生)</h4><blockquote><p>将内存中暂时不能运行的进程，或暂时不用的数据和程序，<strong>Swapping-ou</strong>t到外存，以腾出足够的内存空间，把已具备运行条件的进程，或进程所需要的数据和程序，<strong>Swapping-in</strong>内存。两种情况：1.进程换出去，状态会变化。2.交换少量的数据和程序，虚拟存储</p></blockquote><h5 id="进程的挂起状态（将内存中暂时不能运行的程序交换到外存而产生的状态）"><a href="#进程的挂起状态（将内存中暂时不能运行的程序交换到外存而产生的状态）" class="headerlink" title="进程的挂起状态（将内存中暂时不能运行的程序交换到外存而产生的状态）"></a>进程的挂起状态（将内存中暂时不能运行的程序交换到外存而产生的状态）</h5><p><strong>Suspended Processes</strong></p><ul><li>Processor is faster than I/O so all processes could be waiting for I/0（所有的进程都在等待I/O）</li><li>Swap these processes to disk to free up more memory（交换这些进程到磁盘上面来释放出内存的空间）</li><li>Blocked state becomes suspend state when swapped to disk（当交换的时候，阻塞态就会变成挂起态）</li></ul><p><strong>被挂起进程的特征</strong></p><ul><li>不能立即执行</li><li>可能是等待某事件发生。若是，则阻塞条件独立于挂起条件，即使阻塞事件发生，该进程也不能执行（阻塞和挂起是两件独立的事，互不影响）</li><li>使之挂起的进程为：自身、其父进程、0S</li><li>只有挂起它的进程才能使之由挂起状态转换为其他状态</li></ul><p><strong>Suspend vs Blocked</strong></p><ul><li>并不是只能挂起阻塞进程，但是优先挂起阻塞进程</li><li>激活挂起进程需要一次I/O过程，将进程从外存拿回内存</li></ul><p><strong>区分</strong></p><ul><li>进程是否等待事件，<strong><em>阻塞与否</em></strong></li><li>进程是否被换出内存，<strong><em>挂起与否</em></strong></li></ul><p><strong>4种状态组合：</strong></p><ul><li>Ready：进程在内存，准备执行</li><li>Bloclked：进程在内存，等待事件</li><li>Ready，Suspend：进程在外存，只要调入内存即可执行</li><li>Blocked，Suspend：进程在外存，等待事件</li></ul><blockquote><p>注：处理机可调度执行的进程有两种：</p><ul><li>新创建的进程</li><li>或换入一个以前挂起的进程</li></ul><p>通常为避免增加系统负载，系统会换入一个以前挂起的进程执行。</p></blockquote><h5 id="具有挂起状态的进程状态转换（七状态）"><a href="#具有挂起状态的进程状态转换（七状态）" class="headerlink" title="具有挂起状态的进程状态转换（七状态）"></a>具有挂起状态的进程状态转换（七状态）</h5><p><img src="https://s1.ax1x.com/2020/03/17/8tXxR1.png" alt="增加了挂起态之后的进程状态转换图"></p><blockquote><p>注：在挂起态仍然能够读取磁盘信息和I/O操作（被挂起的是用户的数据，系统的数据不会被放到外存）</p></blockquote><p><strong>具有挂起状态的进程转换</strong></p><ul><li>Blocked → Blocked，Suspend:OS通常将阻塞进程换出，以腾出内存空间</li><li>Blocked，Suspend → Ready，Suspend：当Blocked，Suspend进程等待的事件发生时，可以将其转换为Ready，Suspend </li><li>Ready，Suspend → Ready:OS需要调入一个进程执行时</li><li>Ready → Ready，Suspend：一般，OS挂起阻塞进程。但有时也会挂起就绪进程，释放足够的内存空间</li><li>New→Ready，Suspend（New Ready）：新进程创建后，可以插入到<strong><em>Ready队列</em></strong>或<strong><em>Ready，Suspend队列</em></strong>。若无足够的内存分配给新进程，则需要New Ready，Suspend</li><li>Blocked，Suspend → Blocked：当Blocked，Suspend队列中有一个进程的阻塞事件可能会很快发生，则可将一个Blocked，Suspend进程换入内存，变为Blocked </li><li>Running → Ready，Suspend：当执行进程的时间片用完时，会转换为Ready。或，一个高优先级的Blocked，Suspend进程正好变为非阻塞状态，OS可以将执行进程转换为Ready，Suspend状态</li><li>All → Exit：通常，Rumning → Exit.但某些OS中，父进程可以终止其子进程，使任何状态的进程都可转换为退出状态</li></ul><h4 id="操作系统如何管理进程所用的资源"><a href="#操作系统如何管理进程所用的资源" class="headerlink" title="操作系统如何管理进程所用的资源"></a>操作系统如何管理进程所用的资源</h4><p><strong>Operating System Control Structures（操作系统控制结构）</strong></p><ul><li>Information about the current status of each process and resource</li><li>Tables are constructed for each entity the operating system manages<ul><li><strong>Memory Tables（里面所记载的信息）</strong><ul><li>Allocation of main memory to processes（将主存分配给进程，记载内存的分配情况，那些内存已经被占用，那些还是空闲）</li><li>Allocation of secondary memory to processes.（记录进程在外存的存储位置和情况）</li><li>Protection attributes for access to shared memory regions（访问共享内存区域的保护属性，进程对共享区的操作权限）</li><li>Information needed to manage virtual memory（管理虚拟存储寻妖的信息）.</li></ul></li><li><strong>I/O Tables</strong><ul><li>I/O device is available or assigned.（I/O设备是否可用，是否已经被分配）</li><li>Status of I/O operation.（I/O操作的状态）</li><li>Location in main memory being used as the source or destination of the I/O transfer.（记录在主存中用作I/O传输的源或目标的位置。）</li></ul></li><li><strong>File Tables</strong><ul><li>Existence of files.（已经存在的文件）</li><li>Location on secondary memory.（文件在外存的位置）</li><li>Current Status.（是否上锁等等）</li><li>Attributes.（属性，谁创建了，什么时候创建的，文件名等等）</li><li>Sometimes this information is maintained by a file-management system.（这些信息都是放在文件管理系统来做）</li></ul></li><li><strong>Process Table</strong><ul><li>Where process is located（进程的位置：程序的位置，数据的位置，pcb的位置）</li><li>Attributes necessary for its management.（管理所需的属性）<ul><li>Process ID（进程ID）</li><li>Process state（进程状态）</li><li>Location in memory（在内存的位置）</li></ul></li></ul></li></ul></li></ul><p><strong>Process Location</strong></p><ul><li>Process includes set of programs to be esecuted.<ul><li>Data locations for local and global variables.</li><li>Any defined constants.</li><li>Stack.</li></ul></li><li>Process control block（PCB）.<ul><li>Collection of attributes.</li></ul></li><li>Process image（进程映像）<ul><li>Collection of program，data，stack，and attributes.    </li></ul></li></ul><p><strong>Process image</strong></p><ul><li>User Data</li><li>User Program</li><li>System Stack：存放系统及过程调用地址、参数</li><li>Process Control Block（PCB）：OS感知进程、控制进程的数据结构</li></ul><blockquote><p>操作系统要对进程所需要的资源，状态，进行记录成表，并且进行分配这些资源，处理来自进程的请求</p></blockquote><h4 id="进程控制块（PCB）"><a href="#进程控制块（PCB）" class="headerlink" title="进程控制块（PCB）"></a>进程控制块（PCB）</h4><p><strong>Process Control Block</strong></p><ul><li><strong><em>简称PCB：</em></strong>是OS控制和管理进程时所用的基本数据结构（系统是通过PCB来感知进程的存在的，所以挂起态的进程的PCB部分不能被放在外存中）</li><li><strong><em>作用：</em></strong>PCB是相关进程存在于系统中的唯一标志；系统根据PCB而感知相关进程的存在。</li><li><strong><em>内容：</em></strong>通常情况下PCB包括<strong><em>IDENTIFY</em></strong>（进程的标识），状态，控制，指针等的信息</li></ul><p><strong>Process Control Block（PCB）</strong></p><ul><li>Process identification<ul><li>Identifiers<ul><li>Identifier of this process（进程ID）</li><li>Identifier of the process that created this process（parent process）（父进程ID）</li><li>User identifier（用户ID）</li></ul></li></ul></li><li>Processor State Information<ul><li>User-Visible Registers（用户可见寄存器）<ul><li>A user-visible register is one that may bereferenced by means of the machine language that the processor executes.</li><li>Typically，there are from 8 to 32 of these registers，although some RISCC implementations have over 100.</li></ul></li></ul></li><li>Processor State Information<ul><li>Control and Status Registers <ul><li>There are a variety of processor registers that are employed to control the operation of the processor. These include</li><li><strong>Program counter</strong>: Contains the address of the nest instruction to be fetched.</li><li><strong>Condition codes</strong>: Result of the most recent arithmetic or logical operation(e.g, sign, zero, carry, equal, overflow)</li><li><strong>Staus information</strong>: Includes interrupt enabled/disabled flags, execution mode.</li></ul></li></ul></li><li>Processor State Information<ul><li>Stack Pointers<ul><li>Each process has one or more last-in-first-out(LIFO)system stacks associated with it.A stack is used to store parameters and calling addresses for procedure and system calls.</li><li>The stack pointer points to the top of the stack.</li></ul></li></ul></li><li>Process Control Information<ul><li>Scheduling and State Information<ul><li>Process state: defines the readiness of the process to be scheduled for execution(e.g., running, ready, waiting, halted).</li><li>Priority: One or more fields may be used to describe the scheduling priority of the process.</li><li>Scheduling-related information: This will depend on the scheduling algorithm used.</li><li>Event: Identity of event the process is awaiting before it can be resumed</li></ul></li><li>Data Structuring<ul><li>A process may be linked to other process in a queue, ring, or some other structure.</li><li>A process may eshibit a parent-child(creator-created) relationship with another process.</li><li>The process control block may contain pointersto other processes to support these structures.</li></ul></li><li>Interprocess Communication<ul><li>Various flags, signals, and messages may be associated with communication between two independent processes.</li></ul></li><li>Process Privileges<ul><li>Processes are granted privileges in terms of the memory that may be accessed and the types of instructions that may be executed.</li></ul></li><li>Memory Management<ul><li>This section may include pointers to segment and/or page tables that describe the virtual memory assigned to this process.</li></ul></li></ul></li></ul><h4 id="操作系统内核功能："><a href="#操作系统内核功能：" class="headerlink" title="操作系统内核功能："></a>操作系统内核功能：</h4><ol><li>Typical Function of an OS Kernel(资源管理功能)<ul><li>Process Management：进程创建和终止、调度、状态转换、同步和通信、管理PCB</li><li>Memory Management：为进程分配地址空间、对换、段/页管理</li><li>I/O Management：缓存管理、为进程分配I/0通道和设备</li></ul></li><li>Typical Function of an OS Kernel（支撑功能）  <ul><li>Interrupt handling（中断处理）</li><li>Timing（时钟管理）</li><li>Primitive（原语）：Atomic Operation（原子性，该操作不能被中断）</li><li>Accounting（统计）</li><li>Monitoring（监测）</li></ul></li></ol><p><strong>Process Control Primitives（原语）</strong></p><ul><li>Process Switch，进程切换</li><li>Create and Terminate，创建与终止</li><li>Block and Wakeup，阻塞与唤醒</li><li>Suspend and Activate，挂起与激活</li></ul><h4 id="原语：进程的切换"><a href="#原语：进程的切换" class="headerlink" title="原语：进程的切换"></a>原语：进程的切换</h4><p><strong>When to Switch a Process（什么时候产生进程的切换）</strong></p><ul><li>Clock interrupt（时钟中断）<ul><li>process has executed for the maximum allowable time slice（时间片）</li></ul></li><li>I/O interrupt</li><li>Memory fault（存储访问失效：主要在虚拟存储里面）<ul><li>memory address is in virtual memory so it must be brought into main memory (当访问的数据不在内存的时候，就中断此进程，等数据进内存之后变就绪状态之后才可以执行)  </li></ul></li><li>Trap（陷阱）<ul><li>error occurred</li><li>may cause process to be moved to Exit state</li></ul></li><li>Supervisor call（管理程序调入）<ul><li>such as file open（前一个进程被中断，进行切换进程）</li></ul></li></ul><p><strong>Change of Process State</strong></p><ul><li><strong>Save context</strong> of processor including program counter and other registers（保存到堆栈里面—堆栈在PCB里面，所以要更新PCB的内容）</li><li>Update the PCB of the process that is currently running</li><li>Move PCB to appropriate queue-ready, blocked （将这个进程的PCB移到合适的队列，就绪队列和阻塞队列）</li><li>Select another process for execution（启动调度程序：开始调度进程，调度新的进程来执行）</li><li>Update the PCB of the process seelected(这个选中的进程的PCB的内容也要更新，比如进程的状态就要从就绪变成Running)</li><li>Update memory-management data structure(内存管理的数据结构也要进行修改，进程的改变，会需要不同的内存空间和资源，变量等等)</li><li><strong>Restore context</strong> of the selected process(恢复被选中进程的执行现场，将其PCB里面相应的数据读到相应的寄存器里面)</li></ul><h5 id="进程切换和模式切换的比较"><a href="#进程切换和模式切换的比较" class="headerlink" title="进程切换和模式切换的比较"></a>进程切换和模式切换的比较</h5><p><strong>Process Switching vs Mode Switching</strong></p><ul><li><strong><em>Process Switch</em></strong>，是作用于进程之间的一种操作。当分派程序收回当前进程的CPU并准备把它分派给某个就绪进程时，该操作将被引用。</li><li><strong><em>Mode Switch</em></strong>，是进程内部所引用的一种操作。当进程映像所包含的程序引用核心子系统所提供的系统调用时，该操作将被引用。(从用户态转到系统态，再转回用户态，就是在用户态下遇到要进行系统调用，这时就会执行上面的步骤)</li></ul><blockquote><p>软中断：在用户态下运行，遇到系统调用时，需要从用户态切换到系统态，切换到系统态为了保护系统的数据不受非法的修改，在此时会做一个你进入系统的目的，访问什么数据，是否有相应的权限的审核，这个审核过程就称作软中断，如果审核通过，执行就从用户态转到系统态下面去执行，执行完毕，就会返回用户态，这个就叫做模式切换（用户态 → 系统态 → 用户态）</p></blockquote><blockquote><p>进程切换一定要用到模式切换，因为进程切换的时候一定要执行调度程序，而调度程序是系统的，要进入到系统态下面去执行，另外你进行进程切换的时候一定有中断，中断也是在系统态下面执行的，所以<strong><em>进程切换的时候一定有模式切换</em></strong>但是<strong><em>模式切换不一定有进程切换</em></strong></p></blockquote><p>操作系统的内核是怎么来操作那些表的，操作系统有自己的相关进程？？？？？？？</p><h4 id="原语：进程的创建与终止"><a href="#原语：进程的创建与终止" class="headerlink" title="原语：进程的创建与终止"></a>原语：进程的创建与终止</h4><p><strong>Process Creation</strong></p><ul><li>Submission of a batch job（提交批处理作业）</li><li>User logs on（用户注册）</li><li>Created to provide a service such as printing（为提供服务(如打印)而创建的）</li><li>Process creates another process（进程创建另一个进程，如父进程创建其子进程）</li></ul><p><strong>Process Creation（creat()原语，步骤）</strong></p><ol><li><strong><em>为进程分配一个唯一标识号ID</em></strong>：主进程表中增加一个新的表项</li><li><strong><em>为进程分配空间</em></strong>：用户地址空间、用户栈空间、PCB空间。若共享已有空间，则应建立相应的链接。</li><li><strong><em>初始化PCB</em></strong>：进程标识、处理机状态信息、进程状态</li><li><strong><em>建立链接</em></strong>：若调度队列是链表，则将新进程插入到就绪或（就绪，挂起）链表</li><li><strong>*建立或扩展其他数据结构 *</strong></li></ol><p><strong>Process Termination（终止）</strong></p><ul><li>Batch job issues Halt instruction</li><li>User logs off</li><li>Quit（退出）an application</li><li>Error and fault conditions</li></ul><p><strong>Reasons for Process Termination(终止的原因)</strong></p><ul><li>Normal completion，正常结束</li><li>Time limit exceeded，超时终止，执行时间超过预计时间</li><li>Memory unavailable，内存不足，无法为进程分配所需的内存空间</li><li>Bounds violation，越界访问</li><li>Protection error，企图使用未允许用的数据，或操作方式错</li><li>Arithmetic error，计算错，如除零，或企图存储硬件允许的最大数</li><li>I/O failure，如找不到文件或多次重试仍无法读写文件，或无效操作</li><li>Invalid instruction，企图执行不存在的指令</li><li>Privileged instruction，企图执行特权指令</li><li>Data misuse，数据类型不符，或未初始化</li><li>Operating system intervention，操作员或OS干预，如发生死锁的时候</li><li>Parent terminates so child processes terminate（父进程终止，所以子进程也终止）</li><li>Parent request（父进程要求）</li></ul><p><strong>Process Termination（destroy0原语，步骤）</strong></p><ol><li>根据被终止进程的标识符ID，找到其PCB，读出该进程的状态；</li><li>若该进程为执行状态，则终止其执行，调度新进程执行；</li><li>若该进程有子孙进程，则立即终止其所有子孙进程</li><li>将该进程的全部资源，或归还给其父进程，或归还给系统</li><li>将被终止进程（的PCB）从所在的队列中移出，等待其它程序来搜集信息</li></ol><h4 id="线程概述"><a href="#线程概述" class="headerlink" title="线程概述"></a>线程概述</h4><p><strong>Thread（线程）</strong></p><ul><li>An execution state(running, ready, etc.)（程序执行的过程）</li><li>Saved thread context when not running.（线程被中断的时候也会被保存其上下文）</li><li>Has an execution stack.（有自己的执行堆栈）</li><li>Some per-thread static storage for local variables.（线程也有少量的关于局部变量的存储空间，是其私有的资源，较少）</li><li>Access to the memory and resources of its process.（线程是访问他进程的存储空间和资源的）<ul><li>all threads of a process share this.（，一个进程创建若干线程，一个进程的所有线程都共享这些资源）</li></ul></li></ul><blockquote><p>线程和进程都是程序的执行过程，但是有不同之处，<br>区别：<strong><em>进程是资源分配单位，线程是调度单位</em></strong>线程不再拥有大量的资源，线程共享了进程的资源</p></blockquote><p><strong>Benefits of Threads（线程的好处）</strong></p><ul><li>Takes less time to create a new thread than a process.(创建一个线程比创建一个进程所用的时间更少)</li><li>Less time to terminate a thread than a process.（终止一个线程比终止一个进程所用的时间更少）</li><li>Less time to switch between two threads within the same process.（在同一个进程里面线程的切换更加省时间,但是还是会有不同进程之间的线程的切换）</li><li>Since threads within the same process share memory and files, they can communicate with each other without invoking the kernel.(由于同一进程中的线程共享内存和文件，因此它们可以在不调用内核的情况下彼此通信，<strong>激发内核就是有进行模式切换</strong>)</li></ul><p><strong>Thread</strong></p><ul><li>Suspending a process involves suspending all threads of the process,挂起进程会挂起他的所有线程（因为挂起进程会将其程序数据保存到外存，所以共享了其数据的线程也会被挂起）<ul><li>since all threads share the same address space.(因为所有的线程共享了相同地址空间)</li></ul></li><li>Termination of a process, terminates all threads within the process.（进程的终止，终止进程内的所有线程）</li></ul><h4 id="操作系统对多线程的支持"><a href="#操作系统对多线程的支持" class="headerlink" title="操作系统对多线程的支持"></a>操作系统对多线程的支持</h4><p>Unix系统:多用户多进程（多线程）<br>Windows和Linux：多用户多任务（这个任务指的是线程）是单进程多线程的，只有一个初始进程（init）</p><h4 id="线程状态和线程分类"><a href="#线程状态和线程分类" class="headerlink" title="线程状态和线程分类"></a>线程状态和线程分类</h4><h5 id="Thread-States（PCB与TCB）"><a href="#Thread-States（PCB与TCB）" class="headerlink" title="Thread States（PCB与TCB）"></a>Thread States（PCB与TCB）</h5><ul><li>Key states for a thread: <strong><em>Running</em></strong>, <strong><em>Ready</em></strong>, <strong><em>Blocked</em></strong></li><li>Operations associated with a change in thread state.<ul><li>Spawn（派生,即创建），Spawn another thread</li><li>Block</li><li>Unblock（消除阻塞）</li><li>Finish（完成状态）</li></ul></li></ul><p><strong>User-Level Threads（用户级的线程，Java 虚拟机里面创建的线程）</strong></p><ul><li>All thread management is done by the application.（在应用程序里面完成线程的管理）</li><li>The kernel is not aware of the existence of threads.（内核不知道这些线程的存在，这种用户级的线程，只有用户看得见，内核不知道，内核里面不一定有TCB）</li><li>描述此类线程的数据结构以及控制此类线程的原语在核外子系统中实现。（核外子系统就是用户态，在用户应用程序的模式下运行，用户模式下运行）</li></ul><p><strong>Kernel-Level Threads（内核级的线程，Linux和Windows，而且是单进程的）</strong></p><ul><li>W2K，Linux，and OS/2 are of this approach（方式）.</li><li>Kernel maintains context information for the process and the threads.（内核维护进程和线程的上下文信息）</li><li>Scheduling is done on a thread basis.（调度是基于线程本身的）</li><li>描述此类线程的数据结构以及控制此类线程的原语在<strong><em>核心子系统</em></strong>中实现。（在核心子系统中创建这些线程TCB）</li></ul><p><strong>Combined Approaches（组合方式）</strong></p><ul><li>Example is Solaris</li><li>Thread creation done in the user space.</li><li>Bulk（大批）of scheduling and synchronization of threads done in the user space.</li></ul><blockquote><p>注：多线程的出现就是为了提供多任务并发，又能保证系统的开销要小</p></blockquote><h4 id="系统实例分析"><a href="#系统实例分析" class="headerlink" title="系统实例分析"></a>系统实例分析</h4><h5 id="UNIX的进程管理（多进程多线程）"><a href="#UNIX的进程管理（多进程多线程）" class="headerlink" title="UNIX的进程管理（多进程多线程）"></a>UNIX的进程管理（多进程多线程）</h5><p>省略</p><h5 id="Linux的进程管理（单进程多线程）"><a href="#Linux的进程管理（单进程多线程）" class="headerlink" title="Linux的进程管理（单进程多线程）"></a>Linux的进程管理（单进程多线程）</h5><p>省略</p><h4 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h4><p>【1】schedule（调度程序）/dispatch（分派程序）两者的角度不同<br>【2】swapping（对换技术，交换技术）<br>【3】Suspend（暂停，即挂起）<br>【4】Activate（激活）<br>【5】Blocked（阻塞态）<br>【6】Release（释放）<br>【7】Admin（管理）<br>【8】processor（处理器）<br>【9】process image（进程映像）<br>【10】virtual memory（虚拟存储）<br>【11】secondary memory（外存，磁盘，单memory一般指内存）<br>【12】Attributes（属性）<br>【13】registers（寄存器）<br>【14】executed（执行）<br>【15】local variables（局部变量）<br>【16】Access（访问）<br>【17】Termination（终止）<br>【18】Multithreading（多线程）</p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更深入springmvc</title>
      <link href="/2019/12/02/geng-shen-ru-springmvc/"/>
      <url>/2019/12/02/geng-shen-ru-springmvc/</url>
      
        <content type="html"><![CDATA[<h1 id="springmvc框架"><a href="#springmvc框架" class="headerlink" title="springmvc框架"></a>springmvc框架</h1><h3 id="纯Java配置开发"><a href="#纯Java配置开发" class="headerlink" title="纯Java配置开发"></a>纯Java配置开发</h3><p>无xml文件到开发</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebApplicationInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span>ServletContext servletCxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Load Spring web application configuration</span>        <span class="token comment" spellcheck="true">//基于注解开发，需要注解上下文的初始化</span>        AnnotationConfigWebApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过调用register方法法册配置类</span>        ac<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//刷新</span>        ac<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Create and register the DispatcherServlet</span>        <span class="token comment" spellcheck="true">//前端控制器的注册</span>        DispatcherServlet servlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册映射规则</span>        ServletRegistration<span class="token punctuation">.</span>Dynamic registration <span class="token operator">=</span> servletCxt<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//url-pattern/</span>        registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/app/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@configuration</span><span class="token annotation punctuation">@componentscan</span><span class="token punctuation">(</span>basepackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.qiudaozhang.controller"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注册视图解折器</span>    <span class="token annotation punctuation">@Bead</span>    <span class="token keyword">public</span> InternalResourceviewResolver <span class="token function">internalResourceviewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        InternalResourceviewResolyer rs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InternalResourceviewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rs<span class="token punctuation">.</span><span class="token function">setprefix</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rs<span class="token punctuation">.</span><span class="token function">setsuffix</span><span class="token punctuation">(</span><span class="token string">".jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The following example configures a WebApplicationContext hierarchy:<br><strong>更加简便的方法替代上面的MyWebApplicationInitializer类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> RootConfig<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> App1Config<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h4><p>从spring3.0开始，要做异步请求处理非常简单，只需要添加一个注解 <code>@Async</code>即可。</p><p>异步请求VS同步请求<br>同步请求阻塞客户端，直到操作完成。在这种情况下，浏览器的javascript引擎被阻止。</p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>在<strong>servlet.xml</strong>文件里面添加</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--文件上传的大小--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Controller层</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUpLoad</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"fileupload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">fileupload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>MultipartFile multipartFile<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>multipartFile<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>jsp页面内容</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ctx}/fileupload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    选择文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以下代码可以使文件存入电脑的内存中（写在controller层中）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> string uploadparent<span class="token operator">=</span><span class="token string">"D:"</span><span class="token operator">+</span>File<span class="token punctuation">.</span>separator<span class="token punctuation">;</span>File dest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathname<span class="token operator">:</span> uploadParent <span class="token operator">+</span> multipartFile<span class="token punctuation">.</span> <span class="token function">getoriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//完成上传</span>multipartFile<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p>使用Apache工具类IOUtil可以快速完成文件下载功能.<br>此外需要对响应设置响应头控制下载</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是中文,有的浏览器有乱码,以chrome为例,重新构建文件名即可</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"download"</span><span class="token punctuation">)</span><span class="token keyword">public</span> string <span class="token function">download</span><span class="token punctuation">(</span>HttpservletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename=D51LuEoxsAcI8S8.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出的对象,当前响应里面里而有输出对应</span>    Servletoutputstream out<span class="token operator">=</span>null<span class="token punctuation">;</span>Inputstream in <span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputstream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:"</span><span class="token operator">+</span>File<span class="token punctuation">.</span>separator<span class="token operator">+</span><span class="token string">"2019-08-06"</span><span class="token operator">+</span>File<span class="token punctuation">.</span>separator <span class="token operator">+</span><span class="token string">"D51LuEoxsAcI8S8.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">getoutputstream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个是下载到电脑的“下载”</span>        routils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printstackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nul1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决中文乱码问题</strong></p><pre class="line-numbers language-java"><code class="language-java">string fileName<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"小姐姐.jpg"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>charsetName<span class="token operator">:</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>charsetName<span class="token operator">:</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span>value<span class="token operator">:</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="请求流向"><a href="#请求流向" class="headerlink" title="请求流向"></a>请求流向</h4><ul><li>转发页面</li><li>重定向页面</li><li>转发控制器</li><li>重定向到控制器//网址会跑回定向的那个</li></ul><h5 id="转发页面"><a href="#转发页面" class="headerlink" title="转发页面"></a>转发页面</h5><p>最简单，我们一直在使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token string">"logicViewName"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return "a";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="重定向页面"><a href="#重定向页面" class="headerlink" title="重定向页面"></a>重定向页面</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token string">"redirect:physicalView"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return "redirect:/a.jsp";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="转发控制器"><a href="#转发控制器" class="headerlink" title="转发控制器"></a>转发控制器</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//先访问此处再访问a路径</span><span class="token keyword">return</span> <span class="token string">"forward:url..."</span><span class="token comment" spellcheck="true">//return "forward:a"; a是一个url（RequestMapping里面的访问路径）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="重定向到控制器"><a href="#重定向到控制器" class="headerlink" title="重定向到控制器"></a>重定向到控制器</h5><pre class="line-numbers language-java"><code class="language-java">先访问此处再访问b路径<span class="token keyword">return</span> <span class="token string">"redirect:b"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b是一个url（RequestMapping里面的访问路径）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="异常解析器"><a href="#异常解析器" class="headerlink" title="异常解析器"></a>异常解析器</h4><p>在spring里面定义了一个接口HandlerExceptionResolver@since 22.11.2003，我们以 simpleMappingExceptionResolver 为例说明异常解析器其有多个属性配置，重点的我们说下</p><p>其有多个属性配置，重点的我们说下<br><code>exceptionMappings</code> 描述哪些异常映射比如</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exceptionMappings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.RuntimeException<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>exp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过一组属性文件描述具体的异常如何处理。</p><ul><li>defaultStatusCode指定默认的响应状态码比如 404 500</li><li>defaultErrorView 指定默认的错误视图如果在exceptionMappings已经定义过了，那么优先使用<code>exceptionMappings</code>里面的定义的视图，如果没有则使用<code>defaultErrorView</code></li></ul><h3 id="spring-mybatis-annotation-javaconfig方式整合"><a href="#spring-mybatis-annotation-javaconfig方式整合" class="headerlink" title="spring+mybatis +annotation+javaconfig方式整合"></a>spring+mybatis +annotation+javaconfig方式整合</h3><h4 id="引用依赖"><a href="#引用依赖" class="headerlink" title="引用依赖"></a>引用依赖</h4><ul><li>spring webmvc</li><li>mybatis</li><li>mysql</li><li>mybatis spring 中间包</li><li>日志</li><li>lombok</li><li>servlet api</li><li>jstl</li><li>数据源</li><li>druid（com.alibaba）</li></ul><h4 id="编写初始化的类"><a href="#编写初始化的类" class="headerlink" title="编写初始化的类"></a>编写初始化的类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>app<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AppConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAnnotationConfigDispatcherServletInitializer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApp</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写mybatis配置"><a href="#编写mybatis配置" class="headerlink" title="编写mybatis配置"></a>编写mybatis配置</h4><ul><li>注册数据源</li><li>注册会话工厂</li><li>注册事务处理</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>SqlSessionFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertySource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span>PathMatchingResourcePatternResolver<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DataSourceTransactionManager<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.spring.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扫描mapper接口</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:db.properties"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${db.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${db.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${db.user}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${db.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${db.initialSize}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> initialSize<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${db.maxActive}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxActive<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SqlSessionFactoryBean <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SqlSessionFactoryBean factoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接到mapper文件</span>        PathMatchingResourcePatternResolver patternResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryBean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span> patternResolver<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span> <span class="token string">"classpath:mapper/**/*.xml"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//系统设置</span>        org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryBean<span class="token punctuation">.</span><span class="token function">setConfiguration</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> DruidDataSource <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setInitialSize</span><span class="token punctuation">(</span>initialSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setMaxActive</span><span class="token punctuation">(</span>maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        db.driver=com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true">//        db.url=jdbc:mysql://localhost:3306/cart?serverTimezone=UTC</span><span class="token comment" spellcheck="true">//        jdbc.db.name=root</span><span class="token comment" spellcheck="true">//        db.password=12306</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSourceTransactionManager <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数据源的配置外部化<br>db.properties</p><pre class="line-numbers language-xml"><code class="language-xml">db.driver=com.mysql.cj.jdbc.Driverdb.url=jdbc:mysql://localhost:3306/cart?serverTimezone=UTCdb.user=rootdb.password=12306db.initialSize=2db.maxActive=10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="配置springmvc"><a href="#配置springmvc" class="headerlink" title="配置springmvc"></a>配置springmvc</h4><blockquote><p>视图解析器<br>这里是springmvc配置的总</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.ComponentScan;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.web.servlet.view.InternalResourceViewResolver;</p><p>@Configuration<br>@ComponentScan(basePackages = {“com.spring.controller”,”com.spring.mapper”})<br>public class SpringConfig {</p><pre><code>@Beanpublic InternalResourceViewResolver internalResourceViewResolver(){    InternalResourceViewResolver resolver = new InternalResourceViewResolver();    resolver.setPrefix(&quot;/&quot;);    resolver.setSuffix(&quot;.jsp&quot;);    return resolver;}</code></pre><p>   /* @Bean<br>    public FastJsonHttpMessageConverter fastJson(){</p><pre><code>    FastJsonHttpMessageConverter fastJson = new FastJsonHttpMessageConverter();    List&lt;MediaType&gt; mediaTypeList = new ArrayList&lt;&gt;();    mediaTypeList.add(MediaType.APPLICATION_JSON);    fastJson.setSupportedMediaTypes(mediaTypeList);    return fastJson;}*/</code></pre><p>}</p><pre><code>&gt; fastjson```javapackage com.spring.config;import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.MediaType;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.support.WebBindingInitializer;import org.springframework.web.servlet.HandlerAdapter;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;import java.util.ArrayList;import java.util.List;@Configurationpublic class FastJSONMessageConverterConfig {    @Bean    public HandlerAdapter handlerAdapter(){        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = new ArrayList&lt;&gt;();        //注入FastJSON        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();        List&lt;MediaType&gt; supportedMediaTypes = new ArrayList&lt;&gt;();        supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);        supportedMediaTypes.add(MediaType.TEXT_HTML);        fastJsonHttpMessageConverter.setSupportedMediaTypes(supportedMediaTypes );        messageConverters.add(fastJsonHttpMessageConverter);        RequestMappingHandlerAdapter requestMappingHandlerAdapter = new RequestMappingHandlerAdapter();        //参数及返回值处理        requestMappingHandlerAdapter.setMessageConverters(messageConverters);        //参数校验        requestMappingHandlerAdapter.setWebBindingInitializer(new WebBindingInitializer() {            @Override            public void initBinder(WebDataBinder webDataBinder) {            }        });        return requestMappingHandlerAdapter;    }}</code></pre><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><h4 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h4><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(*)        from user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.model.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>** 位置由上面的mybatis的配置决定**</p><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"jsp/hey"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="service-业务类和接口"><a href="#service-业务类和接口" class="headerlink" title="service(业务类和接口)"></a>service(业务类和接口)</h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><blockquote><p>//添加主健策略<br>@Id<br>@Generatedvalue（strategy=GenerationType.IOENTITY）<br>private Long 1oveId；</p></blockquote><h4 id="通用mapper"><a href="#通用mapper" class="headerlink" title="通用mapper"></a>通用mapper</h4><ul><li>mybatis配置重写</li><li><strong>@Mapperscan(value={“com.qiudaozhang.mapper”,”tk.mybatis.mapper.annotation”},mapperHelperRef=”mapperHelper”)</strong></li><li>mapper接口继承basemapper</li></ul><p>依赖</p><ul><li>mapper</li><li>slf4j<h4 id="分页功能集成"><a href="#分页功能集成" class="headerlink" title="分页功能集成"></a>分页功能集成</h4>依赖</li><li>PageHelper</li></ul><p>在service类中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> PageInfo<span class="token operator">&lt;</span>Love<span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span>Integer pageNum<span class="token punctuation">,</span>Integer pageSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//分页查询</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span>pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//统计多少数据</span>    List<span class="token operator">&lt;</span>Love<span class="token operator">></span>loves<span class="token operator">=</span>loveMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PageInfo<span class="token operator">&lt;</span>Love<span class="token operator">></span>pageInfo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>loves<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pageInfo<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在mybatisConfig中</p><pre class="line-numbers language-java"><code class="language-java">PageInterceptor pageInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * helperDialect=mysql * reasonable=true * supportMethodsArguments=true * params=count=countSql * autoRuntimeDialect=true**/</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"helperDialect"</span><span class="token punctuation">,</span><span class="token string">"mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"reasonable"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"params"</span><span class="token punctuation">,</span><span class="token string">"count=countSql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"autoRuntimeDialect"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pageInterceptor<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>factoryBean<span class="token punctuation">.</span><span class="token function">setPlugins</span><span class="token punctuation">(</span>pageInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h4><p>重写AppConfig类<br>*<em>@EnableWebMvc *</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.qiudaozhang.service"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>MybatisConfig<span class="token punctuation">.</span>ciass<span class="token punctuation">,</span>SpringMvcconfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入其它的配置类</span><span class="token annotation punctuation">@EnableWebMvc</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//注册一个会话工厂需要数据源</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span>converters<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加额外的消息转换器</span>    FastJsonHttpMessageConverter converter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>MediaType<span class="token operator">></span>mediaTypes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mediaTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    converter<span class="token punctuation">.</span><span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span>mediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>    converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态资源404的问题-css文件生效"><a href="#静态资源404的问题-css文件生效" class="headerlink" title="静态资源404的问题(.css文件生效)"></a>静态资源404的问题(.css文件生效)</h4><p>添加默认的handler.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span>DefaultServletHandlerConfigurer configurer<span class="token punctuation">)</span><span class="token punctuation">{</span>    configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ServletContext、HttpSession、HttpServletRequest"><a href="#ServletContext、HttpSession、HttpServletRequest" class="headerlink" title="ServletContext、HttpSession、HttpServletRequest"></a>ServletContext、HttpSession、HttpServletRequest</h3><blockquote><p>三者域属性空间范围、使用原则对比<br>Servlet用到的三个存放域属性的空间范围对象，这三个对象中所存储的域属性作用范围、使用原则不同</p></blockquote><blockquote><p>1、ServletContext、HttpSession、HttpServletRequest存储的域属性作用范围从大到下<br>ServletContext——&gt;HttpSession——&gt;HttpServletRequest</p></blockquote><p><strong>2、关于“会话”概念(因为下面用会话)</strong><br><strong>一个会话:浏览器开启——&gt;关闭</strong></p><blockquote><p>3、ServletContext<br>即application，置入其中的域属性，是整个应用范围的，可以完成跨会话共享数据</p></blockquote><blockquote><p>4、HttpSession<br>置入其中的域属性是会话范围的，可以完成跨请求共享数据</p></blockquote><blockquote><p>5、HttpServletRequest<br>置入其中的域属性是请求范围的，可以跨Servlet共享数据，但这些Servlet必须在同一个请求中<br>例如需要请求转发 request.getRequestDispatcher(“/other”).forward(request, response);</p></blockquote><h3 id="轉發與重定向"><a href="#轉發與重定向" class="headerlink" title="轉發與重定向"></a>轉發與重定向</h3><p>轉發：<br><img src="https://s2.ax1x.com/2019/12/23/lSOG8I.png" alt><br>重定向：<br><img src="https://s2.ax1x.com/2019/12/23/lSOrPs.png" alt></p><blockquote><p>winpty vue.cmd create hello-world</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring+SpringMVC</title>
      <link href="/2019/11/24/springmvc-spring/"/>
      <url>/2019/11/24/springmvc-spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h4 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h4><ul><li>引入依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        &lt;artifactId spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.8.RELEASEK/version><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>元数据-》容器-》创建实例</p></blockquote><ul><li>元数据<ul><li>xml形式</li><li>annotation（配合java编码）</li></ul></li></ul><blockquote><p>resources里面的xml文件<br>这个就是spring的配置文件书写的地方，这个可以理解为是一个注册中心你在这里去告诉spring我要什么，然后spring的核心容器会来解析这个配置文件根据元数据，去创建bean（一个个实例）主要应用技术是<br>反射<br>根据全限定类名，然后配合默认构造器来创建实例并注册到spring容器当中</p></blockquote><blockquote><p><strong>spring是它默认是依赖无参构造器来实现bean创建</strong></p></blockquote><p>resources的配置文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.service.impl.Actor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>actor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.service.impl.Player<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>player<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>java代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//读取配置文件</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"App.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取实例</span>    UserService service <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span> <span class="token string">"actor"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>com.spring.service.impl.Actor是要进行实例的bean的位置</p><h4 id="spring创建的bean类型"><a href="#spring创建的bean类型" class="headerlink" title="spring创建的bean类型"></a>spring创建的bean类型</h4><blockquote><p>spring默认采用的是单例设计，singleton</p></blockquote><p>singleton（缺省）</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.service.impl.ActorserviceImp1"id="userservice"scope="singleton"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>prototype（原型）</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.service.impl.ActorserviceImp1"id="userservice"scope="prototype"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="bean简单属性"><a href="#bean简单属性" class="headerlink" title="bean简单属性"></a>bean简单属性</h4><h5 id="name"><a href="#name" class="headerlink" title="name"></a>name</h5><p>给bean取个名字给bean取多个名字，可以支持多种分隔符，空格“;””,”</p><h5 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h5><p>这个是描述一个bean为抽象，其目的是给其它bean作为一个基础bean，如果我们尝试去获取这个抽象bean的话，会失败</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.AbstractFactory"abstract="true"id="abstractFactory">    &lt;property name="style"value="自由式"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>&lt;bean class="com.sz.CakeFactory"parent="abstractFactory"id="cakeFactory"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>&lt;bean class="com.sz.AnimalFactory"parent="abstractFactory"id="animalFactory"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="bean生命周期控制"><a href="#bean生命周期控制" class="headerlink" title="bean生命周期控制"></a>bean生命周期控制</h4><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.pojo.User"id="user"init-method="cry"destroy-method="saysomething"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>nit-method 控制初始化的一个方法，做准备工作<br>lestroy-method 控制bean 最后收尾的工作，这个方法生效必须容器关闭才能体现</p><pre class="line-numbers language-java"><code class="language-java">Applicationcontext ctx<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathxmlApplicationcontext</span><span class="token punctuation">(</span><span class="token string">"app.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User user<span class="token operator">=</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//容器关闭的时候才执行生命周期里面销毁方法</span>classPathxmlApplicationcontextc<span class="token operator">=</span><span class="token punctuation">(</span>ClasspathxmlApplicationcontext<span class="token punctuation">)</span>ctx<span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖属性"><a href="#依赖属性" class="headerlink" title="依赖属性"></a>依赖属性</h4><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.pojo.user"id="user"depends-on="weapon"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>&lt;bean class="com.sz.pojo.weapon"id="weapon">    &lt;property name="name”value="西瓜刀"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的bean依赖于下面的bean，spring容器会根据这个关系优先完成weapon的创建</p><h4 id="bean获取方法"><a href="#bean获取方法" class="headerlink" title="bean获取方法"></a>bean获取方法</h4><p>1.通过获取名字，这种需要强转<br>2.通过传入Class，这种不需要强转，但是必须bean唯一才可以，否则会出现问题<br>3.结合1，2优点</p><pre class="line-numbers language-java"><code class="language-java">User user<span class="token operator">=</span>ctx<span class="token punctuation">.</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><ul><li>setter注入</li><li>构造注入</li></ul><p>setter注入:保证pojo类中有set方法</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.pojo.User"id="user">    &lt;property name="name"value="冠东"/>    &lt;property name="age"value="42"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>构造注入：必须保证pojo类中提供对应的构造器</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.pojo.User"id="user">    &lt;constructor-arg name="name"value="冠西"/>    &lt;constructor-arg name="age"value="62"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>构造器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span> name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span> age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.ax1x.com/2019/11/24/MLa8y9.png" alt></p><h5 id="注入非字面值"><a href="#注入非字面值" class="headerlink" title="注入非字面值"></a>注入非字面值</h5><p>用ref引用</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.pojo.Dog"id="dog">    &lt;property name="partner"value="哮天犬"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>&lt;bean class="com.sz.pojo.User"id="user">    &lt;property name="name"value="许冠杰"/>    &lt;property name="age”value="71"/>    &lt;property name="dog"ref="dog"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用两个命名空间简化配置"><a href="#使用两个命名空间简化配置" class="headerlink" title="使用两个命名空间简化配置"></a>使用两个命名空间简化配置</h4><p>p命名空间的使用：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;7xml version="1.0”encoding="UTF-8"？><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ww.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XML Schema-inst ance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.spr ingfr amework.org/schema/p<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemalocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.spring framework.org/schema/beans http://ww.springfr amework.org/schema/beans/spr ing-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;bean class="com.sz.pojo.Dog”id="dog"p:partner="哮天犬"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sz.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sam<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>71<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>dog-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c命名空间的使用:</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;？xml version="1.0"encoding="UTF-8"？>&lt;beans xmlns="http://www.spr ingfr amework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XML Schema-instance"xmlns:p="http://vwww.springframework.org/schema/p"xmlns:c="http://www.springfr amework.org/schema/c"xsi:schematocation="http://www.springframework.org/schema/beans http://www.spr ingfr amework.org/schema/beans/spr ing-beans.xsd">&lt;bean class="com.sz.pojo.Dog" id="dog" p:partner="哮天犬”/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sz.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>_0</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>-1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="泛集合类型的注入"><a href="#泛集合类型的注入" class="headerlink" title="泛集合类型的注入"></a>泛集合类型的注入</h4><p>数组</p><p>list</p><p>map</p><p>set</p><p>properties</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.pojo.User"id="user">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>girls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>韩雪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>关晓形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>林青霞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>温碧霞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dogs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--内部bean不需要名字，外部也无法引用--></span>            &lt;bean class="com.sz.pojo.Dog"p:partner="阿黄”p:skin=“黄色”/>            &lt;bean class="com.sz.pojo.Dog"p:partner="阿贵”p:skin=”金色”/>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>luckyNumbers<span class="token punctuation">"</span></span>        <span class="token attr-name">&lt;set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>super Dogs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &lt;bean class="com.sZ.pojo.Dog”p:partner="阿绿”p:skin=”绿色”/>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &lt;bean class="com.sz.pojo.0og"p:partner="阿紫”p:skin=”紫色"/>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pas sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysq1.jdbc.Dr iver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h4><p><strong>byType</strong><br>根据类型注入</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.service.PayService"autowire="byType"id="payService"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>里面有个pay属性写了autowire=”byType”自动去寻找符合这个数据类型的去注入，这里面有</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sz.service.WxPay<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方式根据类型注入，意味着如果有两个，就会失败。<br>一定要保障唯一才可以</p><p><strong>根据名字来注入</strong><br>这个是根据名字进行匹配</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Pay wxPay<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是上述的写法，那么它会去寻找名字为wxPay的bean。</p><p>如果说使用自动注入的话，一般情况下我们当前只注册一个bean才会使用自动注入，如果有多个，我们一般就不这么写。</p><h3 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h3><ul><li>编写一个配置类<blockquote><ul><li>@Configuration 标记为一个配置类</li><li>@Bean 注册一个beanl</li></ul></blockquote></li></ul><p>获取上下文</p><pre class="line-numbers language-java"><code class="language-java"> ApplicationContext ctx<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Cat cat<span class="token operator">=</span>ctx<span class="token punctuation">.</span> <span class="token function">getBean</span><span class="token punctuation">(</span>Cat<span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p>默认也是单例的，但是如果我们要指定为原型怎么办？<br>我们通过注解@scope即可指定我们的范围</p><blockquote><p>@Scope（”prototype”）<br>@Scope（”singleton”）</p></blockquote><h4 id="使用注解注册一个Bean"><a href="#使用注解注册一个Bean" class="headerlink" title="使用注解注册一个Bean"></a>使用注解注册一个Bean</h4><p>@Component 组件的意思（必须被扫描到,此注解放在要成为组件的类里面）<br>可以在此给此类取名字，没有取的话会有默认为这个类的类名</p><h4 id="扫描配置"><a href="#扫描配置" class="headerlink" title="扫描配置"></a>扫描配置</h4><p>ComponentScan  <strong>@ComponentScan</strong></p><blockquote><p>扫描配置放在配置文件里面</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.sz.service"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的这行代码表明，它将会扫秒com.sz.service这个包以及它的子包都有效。</p><h5 id="排除扫描"><a href="#排除扫描" class="headerlink" title="排除扫描"></a>排除扫描</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span>（basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.sz"</span><span class="token punctuation">}</span>，excludeFilters<span class="token operator">=</span><span class="token punctuation">{</span>eComponentScan<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span>FilterType<span class="token punctuation">.</span>ANNOTATION，value<span class="token operator">=</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span>）<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属于通过注解类型排除，注意上面的这个排除，会排除掉所有的这种基于@Component的组件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span>（basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.sz"</span><span class="token punctuation">}</span>，excludeFilters<span class="token operator">=</span><span class="token punctuation">{</span>ComponentScan<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span>FilterType<span class="token punctuation">.</span>ANNOTATION，value<span class="token operator">=</span>Repository<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只是排除Repository注解的。</p><h5 id="关于扫描包的排除问题"><a href="#关于扫描包的排除问题" class="headerlink" title="关于扫描包的排除问题"></a>关于扫描包的排除问题</h5><p>XML方式</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;context:exclude-filter type="regex"expression="com.sz.dao.*"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注解方式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.sz"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>excludeFilters<span class="token operator">=</span><span class="token punctuation">{</span>ComponentScan<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span>FilterType<span class="token punctuation">.</span>REGEX<span class="token punctuation">,</span>pattern<span class="token operator">=</span><span class="token string">"com.sz.dao.*"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="自动注解"><a href="#自动注解" class="headerlink" title="自动注解"></a>自动注解</h4><p>希望某个自动注入的组件是属于非必须的。可以指定required为false如果出现了多个满足条件的Bean，一般会用<strong>@Qualifier</strong>指定。、</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"superUserDaoImp1"</span><span class="token punctuation">)</span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以通过<strong>@primary</strong>(放在@compenent一起)进行指定，这个时候就是它是主要的意思，那么我们的自动注入的地方就会优先选择这个组件。</p><h4 id="以Annotation为主，再以XML为辅助的方式一起"><a href="#以Annotation为主，再以XML为辅助的方式一起" class="headerlink" title="以Annotation为主，再以XML为辅助的方式一起"></a>以Annotation为主，再以XML为辅助的方式一起</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"classpath:app.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将xml配置文件导入到注解配置文件中，使其在注解的方式中生效<br>等同于</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"classpath:/app.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="以XML为主，同时我还希望注解也能够生效"><a href="#以XML为主，同时我还希望注解也能够生效" class="headerlink" title="以XML为主，同时我还希望注解也能够生效"></a>以XML为主，同时我还希望注解也能够生效</h4><blockquote><p>只需要在我们的配置文件里面添加扫描包，又可以生效了(没有注解的配置类)</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="SPEL"><a href="#SPEL" class="headerlink" title="SPEL"></a>SPEL</h4><p><strong>spring 表达式语言</strong>,spring expression language</p><p><strong>小案例</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1创建一个解析器</span>        ExpressionParser parser<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2获取表达式对象（通过解析表达式得到）</span>        Expression expression<span class="token operator">=</span>parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'Hello World'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3利用表达式API读取内容</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>深入一点点</p><pre class="line-numbers language-java"><code class="language-java">Expression expression<span class="token operator">=</span>parser<span class="token punctuation">.</span> <span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"' Hello World'.1ength()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以进行方法的调用</p><p><strong>配置文件的案例</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sz.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;property name="skin"value="土金色"/>    &lt;property name="leg"value="#{3+5}"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用#{}语法形式进行SPEL评估。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">&lt;property name="smart"value="#{true and false}"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>bean与bean之间的联系</strong></p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class="com.sz.pojo.Cat"id="cat">    &lt;property name="skin"value=”土金色"/>    &lt;property name="leg"value="#{3+5}"/>    &lt;property name="smart"value="#{false}"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>&lt;bean class="com.sz.pojo.Cat"id="cat2">    &lt;property name="skin"value="#{cat.skin.concat('的老爹')}"/>    &lt;property name="leg"value="#{3+5}"/>    &lt;property name="smart"value="#{not cat.smart}"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>随机数的获取</strong></p><pre class="line-numbers language-xml"><code class="language-xml">&lt;property name="randomNumber"value="#{T(java. lang. Math). random()*180.0}"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>基于注解的spel</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span> <span class="token string">"#{'猪猪'}"</span> <span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span> <span class="token string">"#{'2'}"</span> <span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> leg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span> <span class="token string">"#{'微笑'.concat('的是 ')}"</span> <span class="token punctuation">)</span>    <span class="token keyword">private</span> String eat<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>没有其他的内容，就可以直接用ApplicationContext获取</strong></p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="AOP建议的类型"><a href="#AOP建议的类型" class="headerlink" title="AOP建议的类型"></a>AOP建议的类型</h4><p>1.前置<br>2.后置<br>3.返回值<br>4.返回异常<br>5.环绕</p><h4 id="xml版本"><a href="#xml版本" class="headerlink" title="xml版本"></a>xml版本</h4><p>注册一个组件：该组件里面的方法为那些建议</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.aop.AopAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自动代理</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 自动代理的工作 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置建议</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myLog<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(public * com.spring.serviceImpl.UserServiceImpl.aopLogin())<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>method是myAop组件里面的方法名，pointcut是切点，即myAop围绕其展开</p><h4 id="切面表达式"><a href="#切面表达式" class="headerlink" title="切面表达式"></a>切面表达式</h4><pre class="line-numbers language-xml"><code class="language-xml">public * com.spring.serviceImpl.UserServiceImpl.aopLogin()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>访问修饰符+返回值类型+包+类+方法+参数列表+异常声明描述</strong></p><ul><li>*是所有的意思</li><li>.. 多层的意义</li></ul><p><strong>示例</strong></p><pre class="line-numbers language-xml"><code class="language-xml">execution(public * com. sz.*.1og*())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>public的任意返回值类型的必须在com.sz包下面的任意类的任意的方法的但必须方法名为log开头的，且参数是无参的</p><pre class="line-numbers language-xml"><code class="language-xml">execution(public * com. sz..*.*(..))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>com.sz包下的任意包（包含子包）的任意类的任意方法的任意参数。</p><blockquote><p>能否在切面的方法里面获取我们所切到的方法的参数以及方法名，信息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>JoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>    system<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span> <span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取方法名</span>    System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span> <span class="token function">toString</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span> <span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取参数</span>    System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after returning...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过注入一个连接点的参数就可以获取相关信息</p></blockquote><h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>    system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我环绕着你，你呢？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name<span class="token operator">=</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startswith</span><span class="token punctuation">(</span><span class="token string">"smile"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        Object result<span class="token operator">=</span>pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>         <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">{</span>        throwable<span class="token punctuation">.</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注解开发AOP"><a href="#注解开发AOP" class="headerlink" title="注解开发AOP"></a>注解开发AOP</h3><p><strong>编写配置Java类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token function">QComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.sz"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开启aspect自动代理功能这步骤很重要</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@Aspect组件</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">//注册为spring的一个组件</span><span class="token annotation punctuation">@Aspect</span><span class="token comment" spellcheck="true">//注册为一个切面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAopAdvice</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"execution(public*com.sz..*.*(..))"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置为一个前置通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>被切的组件也要</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">//注册为spring的一个组件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果你去定义组件里面的要有先后顺序，可以通过@Order进行定义，定义在不同的组件当中比较好。</p></blockquote><h3 id="spring-web"><a href="#spring-web" class="headerlink" title="spring web"></a>spring web</h3><p>springmvc是spring的在web层面的一格框架，也就是它类似于我们之前学习的servlet jsp。</p><p><strong>核心组件 DispatcherServlet</strong><br>前端控制器</p><h4 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h4><h5 id="新建web项目"><a href="#新建web项目" class="headerlink" title="新建web项目"></a>新建web项目</h5><p><img src="https://s2.ax1x.com/2019/12/01/QecZnI.png" alt></p><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><p><strong>spring web mvc和servlet</strong></p><h5 id="配置一下DS"><a href="#配置一下DS" class="headerlink" title="配置一下DS"></a>配置一下DS</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>HelloWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="编写一个springmvc的核心的配置文件"><a href="#编写一个springmvc的核心的配置文件" class="headerlink" title="编写一个springmvc的核心的配置文件"></a>编写一个springmvc的核心的配置文件</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--扫描包的内容 扫出Controller内的类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--前缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--后缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配酒一个视图解析器即可，springmvc 将视图技术进行了抽象没有限定你只能使用闭jsp你用别的视图技术都可以。</p></blockquote><h5 id="编写web组件"><a href="#编写web组件" class="headerlink" title="编写web组件"></a>编写web组件</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span> <span class="token comment" spellcheck="true">//语义是控制器专门处理请求与@Component作用一样</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hey"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//hey是逻辑视图名称，可以写多层路径</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>@controller//语义是控制器专门处理请求</p></blockquote><h4 id="配置视图解析器"><a href="#配置视图解析器" class="headerlink" title="配置视图解析器"></a>配置视图解析器</h4><blockquote><p>视图解析器的工作<br>物理视图=前缀+逻辑视图名称+后缀<br>=/jsp/+hey.jsp<br>=/jsp/hey.jsp其功能类似于request转发技术。</p></blockquote><h4 id="配置问题（DS）"><a href="#配置问题（DS）" class="headerlink" title="配置问题（DS）"></a>配置问题（DS）</h4><blockquote><p>默认要求是[servlet-name]-servlet.xml并且要求在WEB-INF下</p></blockquote><p>如果我们配置文件希望不叫这个名字还要生效，则需要配置一下它的位置即可。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将springmvc.xml放在resources文件夹下面</p><h4 id="展示数据"><a href="#展示数据" class="headerlink" title="展示数据"></a>展示数据</h4><blockquote><p>springmvc它希望我们开发人员尽量避免直接操作原生的ServletAPl，所以它又进行了抽象，可以不直接操作request的情况在域里面存储数据。通过模型完成:<strong>Model</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//这里写入一个model spring 会自动帮我们入参。</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span> <span class="token string">"girl"</span><span class="token punctuation">,</span><span class="token string">"女孩"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hey"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是个请求域（相对于HttpServletRequest request）<br>${sessionscope.gir1）没有展示数据<br>${requestscope.gir1）展示了数据<br>证明了modl里面存储的数据确实是请求域</p><p><strong>非要访问原生的对象,可以直接用，如下</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span> <span class="token string">"girl"</span><span class="token punctuation">,</span><span class="token string">"女孩"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span> <span class="token string">"boy"</span> <span class="token punctuation">,</span><span class="token string">"男孩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hey"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="表单数据提交"><a href="#表单数据提交" class="headerlink" title="表单数据提交"></a>表单数据提交</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ctx}/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserControl</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>@RequestParam</code>这个注解可以获取请求里面的参数，无论get post请求都是可以获取的。然后，如果提交字符串数据，并没写内容，它是空字符串””不是nul1。这种方式适合参数较少的情况，如果多一点。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token function">QRequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>String username<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>String password<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>配置为pojo(User user)<br><strong>有一个要求，就是参数名必须和pojo里面的属性名一致。即User的属性与表单里的名字一样</strong></p></blockquote><h5 id="一组值的提交"><a href="#一组值的提交" class="headerlink" title="一组值的提交"></a>一组值的提交</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">;</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobby<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>尤克里里<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尤克里里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>睡觉<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>睡觉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="WebListener"><a href="#WebListener" class="headerlink" title="WebListener"></a>WebListener</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextEvent<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextListener<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//context内容路径监听，可以寻找路径使url不出现错误</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span> <span class="token string">"ctx"</span><span class="token punctuation">,</span>sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中文编码问题"><a href="#中文编码问题" class="headerlink" title="中文编码问题"></a>中文编码问题</h4><p>配置处理字符编码的过滤器</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>！--配置处理字符编码的过滤器--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span> <span class="token attr-name">class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>！-—指定用什么编码--</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中央处理器第一次慢"><a href="#中央处理器第一次慢" class="headerlink" title="中央处理器第一次慢"></a>中央处理器第一次慢</h4><p>如果你希望第一次访问不要那么慢，可以配置启动容器就加载servlet。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码加在<code>&lt;servlet&gt;&lt;/servlet&gt;</code>里面</p><h4 id="关于DS的URL-pattern的问题"><a href="#关于DS的URL-pattern的问题" class="headerlink" title="关于DS的URL-pattern的问题"></a>关于DS的URL-pattern的问题</h4><p>编写为*.do    *.action带特殊后缀的形式<br>这种方式书写好处是语义强调是做</p><p><code>&lt;form action=&quot;${ctx}/login.do&quot;method=&quot;post&quot;&gt;</code></p><p>还可以直接用<code>/</code></p><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><p><strong>可以写在类上,可以方法上面</strong><br><strong>如果二者均由那么其URI=二者之和</strong></p><pre class="line-numbers language-java"><code class="language-java">@ Controller@ <span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"suc"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>URI=/user/login<br>不是userlogin</p><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>要求是参数</p><ul><li>name</li><li>value它和name是一个作用</li><li>required 是否是必须的true false两个值，默认是rue，必须有这个参数</li><li>defaultValue默认值，如果对方传递了值，则使用客户端值，</li></ul><p>如果没有传递，则这个默认值应该生效如果参数是必须的，你没有传递，就会引发400的错误<br>如果参数是非必须，并且没有传递参数，此时是nul1<br>无论是get还是post都是可以处理了。</p><p>如果指定了required为true，并且指定了默认值的情况下，不传递参数其情况<br>可以使用，默认是生效，此时它相当于满足了required要求。</p><h3 id="spring-mvc-注解"><a href="#spring-mvc-注解" class="headerlink" title="spring mvc 注解"></a>spring mvc 注解</h3><h4 id="Pathvariable"><a href="#Pathvariable" class="headerlink" title="@Pathvariable"></a>@Pathvariable</h4><blockquote><p>开始提供的一个读取路径变量数据的注解，绑定URI模板的。写在参数上的。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"delete/{id}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//delete/3 去访问</span><span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span>@ <span class="token function">PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">"suc"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>里面可以有多个如：delete/{id}/{name}/{age}</p><h4 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h4><p>@ModelAttribute注释是SpringMVC Web应用程序的一部分，可以在两个场景中使用。</p><ul><li>首先，它可以用于在JSP加载之前向模型注入数据对象。这使得它在确保JSP拥有需要显示的所有数据方面特别有用。注入是通过将方法返回值绑定到模型来实现的。</li><li>其次，它可以用于读取现有模型中的数据，并将其分配给处理程序方法参数。</li></ul><p>如果某个方法添加了@ModelAttribute在每个@RequestMapping带注释的处理程序方法之前调用该方法，以便向模型添加一个初始对象，然后将该对象推送到JSP中。请求中的方法被调用前都会调用该方法I不管处理程序方法或JSP是否使用数据。<br>不管需不需要都会调用该方法，这也意味着我们必须确保所有的业务方法均和期有关才适合使用该方式。</p><pre class="line-numbers language-java"><code class="language-java">QController<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"考试大帝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"exam"</span><span class="token punctuation">)</span>publik String <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span><span class="token string">"参加考试..…"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token string">"suc"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，在访问/user/exam时，在suc.jsp的页面中可以获取名为”考试大帝”的user对象</p><h4 id="SessionAttribute"><a href="#SessionAttribute" class="headerlink" title="@SessionAttribute"></a>@SessionAttribute</h4><p>从Spring4.3开始，引入了一个新的注释@SessionAtribute。此注释可用于将从javax.servlet.http.HttpSession检索的会话属性绑定到处理程序方法参数。与直接使用HpSession对象不同，使用此注释可以实现自动类型转换和可选/所需的检查。这个注释有一个元素‘Required’，这在默认情况下是正确的。这意味着如果属性值不存在于会话中，则会引发异常。如果将其设置为false，则可以避免异常，但接收到的值可以为NULL。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>    User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"会话用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"sessionUser"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token string">"suc"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">QRequestMapping</span><span class="token punctuation">(</span><span class="token string">"exam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> string <span class="token function">exam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SessionAttribute</span><span class="token punctuation">(</span><span class="token string">"sessionUser"</span><span class="token punctuation">)</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参加考试...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token string">"suc"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@SessionAttribute(“sessionUser”)可以重会话中获取到名为”sessionUser”的数据，但是会话中要先有此数据，否则会报错</p><h4 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h4><p><code>@SesessionAttributes</code> 2.5开始就有，<code>@SessionAttributes</code>用于类级别。通常，它用于<code>@Controller</code>类。它的value’元素的类型为String[]，其值是<br><strong>@ModelAttribute</strong>中在方法级别或处理程序的方法参数级别上使用的匹配名称。<br>也就是说我们一般写一个@ModelAttribute再写一个@SessionAttributes去读取前者的值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"people"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"考试大帝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">people</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token string">"很帅的人"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"suc"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在会话中可以读取到user和people这两个数据</p><h4 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h4><p>增加的注解，用户处理请求头信息，其用于标记在参数上。比如获取 cache_control</p><pre class="line-numbers language-java"><code class="language-java">@ <span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">)</span> string cookie<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"suc"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@RequestHeader(“Cookie”)的Cookie名称是有要求的不可以随意写，为固定名称</strong></p><h4 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h4><p>我们使用@ExceptionHandler来决定在引发某些异常时应该返回哪个“视图”，一般写法如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">QExceptionHandler</span><span class="token punctuation">(</span>Expxx<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> ModelAndView <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ModelAidView mv<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果某个方法处理处罚了对应的异常，则会让该方法生效。</p></blockquote><ul><li>定义异常</li><li>异常处理(上面的代码)</li></ul><h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><p>使用requestBody发送数据。</p><p>处理JSON数据</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"菲菲"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加mvc:annotation-driver</li><li>在这个驱动里面配置消息转换器<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastUsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>后台代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">requestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h4><p><code>fastjson</code>高版本对安全要求提高，希望你指定好希望输出的数据都有哪些媒体类型。<br>配置如下</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"response"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> User <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span> <span class="token string">"黄庭坚"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span> <span class="token string">"123456"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  user<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用纯Java版本配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>support<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>FastJsonHttpMessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>MediaType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>HttpMessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>WebDataBinder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>support<span class="token punctuation">.</span>WebBindingInitializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJSONMessageConverter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HandlerAdapter <span class="token function">handlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> messageConverters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注入FastJSON</span>        FastJsonHttpMessageConverter fastJsonHttpMessageConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>MediaType<span class="token operator">></span> supportedMediaTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        supportedMediaTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_FORM_URLENCODED<span class="token punctuation">)</span><span class="token punctuation">;</span>        supportedMediaTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>TEXT_HTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        fastJsonHttpMessageConverter<span class="token punctuation">.</span><span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span>supportedMediaTypes <span class="token punctuation">)</span><span class="token punctuation">;</span>        messageConverters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fastJsonHttpMessageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>        RequestMappingHandlerAdapter requestMappingHandlerAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMappingHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数及返回值处理</span>        requestMappingHandlerAdapter<span class="token punctuation">.</span><span class="token function">setMessageConverters</span><span class="token punctuation">(</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数校验</span>        requestMappingHandlerAdapter<span class="token punctuation">.</span><span class="token function">setWebBindingInitializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebBindingInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initBinder</span><span class="token punctuation">(</span>WebDataBinder webDataBinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> requestMappingHandlerAdapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><blockquote><p>其等于=@Responsebody+@Controller</p></blockquote><h4 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h4><blockquote><p>读取cookie里面的内容，某个键对应的值的时候可以用它。</p></blockquote><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><ul><li>get</li><li>post</li><li>put</li><li>delete</li></ul><p>对应四个注解</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li></ul><p><strong>去替代@RequestMapping</strong></p><p>注意对于非get post请求，如果在页面要直接访问是无法成功的。要想完成该功能有两个事情要做<br><strong>配置一个特殊的过滤器</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ur1-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2请求表单中需要添加指定方法方式的隐藏表单项</strong></p><pre class="line-numbers language-html"><code class="language-html">&lt;input type="hidden"name="_method"value="delete"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数为_method value再指定为你需要的方式比如delete 或者pust</p><pre class="line-numbers language-html"><code class="language-html">&lt;form action="${ctx}/123123"method="post">    &lt;input type="hidden"name="_method"value="delete">    &lt;input type="submit"value="submit"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2019/10/19/mybatis/"/>
      <url>/2019/10/19/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h3 id="mybatis开发环境搭建"><a href="#mybatis开发环境搭建" class="headerlink" title="mybatis开发环境搭建"></a>mybatis开发环境搭建</h3><p>1新建maven项目<br><img src="https://s2.ax1x.com/2019/10/19/KmMnwF.png" alt><br>2引入mybatis依赖，mysql依赖</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- mybatis依赖的引进  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- jdbc连接 --></span>  <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3编写mybatis的核心配置文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        核心配置    --></span>    <span class="token comment" spellcheck="true">&lt;!--        default:指定用那种环境    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/cart<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12306<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 让mybatis知道sql语句的存在 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4编写pojo：User类<br>省略get，set方法：引入lombok依赖<br>4.1  提供@Data注解<br>4.2  安装lombok插件<br><img src="https://s2.ax1x.com/2019/10/20/KKDCj0.png" alt></p><p>5编写Mapper.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- 定义一个nanespace 命名空间，我们可以唯一限定我们的是用哪个文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hbr.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    通过一系列的标签来完成的    select--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>countUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(*)        from dept;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6通过mybatis的核心API操作我们的数据库</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMybatis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1读取核心配置文件</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis.cfg.xml.tld"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2用Resource工具类将我们的文件转换为输入流对象，再去解析</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3 我们使用SqlSessionFactoryBuilder来构建会话工厂</span>            SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4利用会话工厂来生产会话</span>            SqlSession session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5利用会话完成数据库的操作</span>            Object o <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.hbr.mapper.UserMapper.countUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * /1读取核心的配置文件     * String resource="mybatis.cfg.xml"；     * 2提供了一个Resources工具类，将我们的文件转换为输入流对象，再去解析     * try{     * InputStream in=Resources.getResourceAsStrean（resource）；     * /3 我们使用SqlSessionFactoryBuilder来构建会话工厂     * SqlSessionFactory sqlSessionFactory =new SqlSessionFactoryBuilder（）.build（in）；     * /4利用会话工厂来生产会话     * SqlSession session=sqlSessionFactory.openSession（）；     * /5利用会话完成数据库的操作     * session.selectOne（statement:"com.smbms.mapper.UserMapper.countUser"）t//写入mapper星的namespace+id     */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyBatis的核心对象<br>SqlSessionFactoryBuilder 构建 SqlSessionFactory 去批量生产 SqlSession</p><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><ul><li>用过即丢，其生命周期只存在于方法体内</li><li>可重用其来创建多个SqlSessionFactory 实例</li><li>负责构建SqlSessionFactory，并提供多个build方法的重载</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token function">build</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">,</span>String environment<span class="token punctuation">,</span>Properties properties<span class="token punctuation">)</span><span class="token function">build</span><span class="token punctuation">(</span>Reader reader<span class="token punctuation">,</span>String environment<span class="token punctuation">,</span>Properties properties<span class="token punctuation">)</span><span class="token function">build</span><span class="token punctuation">(</span>Configuration config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置信息以三种形式提供给SqlSessionFactory的build方法：<br>InputStream（字节流）、Reader（字符流）、Configuration（类）</p><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>SqlSessionFactory是每个MyBatis应用的核心<br>作用：创建SqlSession实例</p><pre class="line-numbers language-java"><code class="language-java">SqlSession session<span class="token operator">=</span>sqlSessionFactory<span class="token punctuation">.</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>* 作用域：Application,生命周期与应用的生命周期相同*</strong></p><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>包含了执行SQL所需的所有方法<br>对应一次数据库会话，会话结束必须关闭<br>线程级别，不能共享</p><p>SqlSession的两种使用方式</p><blockquote><p>通过SqlSession实例直接运行映射的SQL语句<br>    <code>java    String resource=&quot;mybatis-config. xml&quot;;     InputStream is=Resources. getResourceAsStream(resource);     SqlSessionFactory factory =new SqlSessionFactory Builder(). build(is);     SqlSession sqlSession =factory. openSession();</code></p></blockquote><blockquote><p>基于Mapper接口方式操作数据</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/20/KMuA39.png" alt></p><pre class="line-numbers language-java"><code class="language-java">SqlSession session <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserMapper mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object o = session.selectOne( "com.hbr.mapper.UserMapper.countUser" );</span><span class="token keyword">int</span> row <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">countUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis它使用了代理技术实现了我们接口实例的创建</p><ul><li>我们声明的仅仅是一个Mapper接口，没有实现类</li><li>通过mybatis创建的动态代理技术来实现一个接口实例    </li></ul><blockquote><p>如果数据库设计和java里面属性名不一致，可以通过指定别名的方式封装进行，setXXx的方法完成的。</p></blockquote><h4 id="mybatis-config-xml-系统核心配置文件"><a href="#mybatis-config-xml-系统核心配置文件" class="headerlink" title="mybatis-config.xml 系统核心配置文件"></a>mybatis-config.xml 系统核心配置文件</h4><p><img src="https://s2.ax1x.com/2019/10/20/KMGdpT.md.png" alt></p><p>配置properties元素的两种方式</p><ul><li>通过外部指定的方式（database.properties），实现动态配置</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>database. properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;property name="driver"value="${ driver}"/>&lt;property name="url"value="${ url)"/s&lt;property name="username"value="${ user}"/>&lt;property name="password"value="${ password}"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>properties值的优先级<br>1字面值优先级最高<br>2properties的外部的引用文件（使用占位符）<br>3properties内部的值</p><h5 id="别名："><a href="#别名：" class="headerlink" title="别名："></a>别名：</h5><p>单个注册</p><p>如果我们缺省名字，默认注册就是使用简写的类名，并且不区分大小写</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hbr.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该别名就是 User/user(字母不区分大小写)</p><p>包注册</p><pre><code>&lt;typeAliases&gt;    &lt;typeAlias type=&quot;com.hbr.pojo.User&quot; alias=&quot;heroUser&quot;&gt;&lt;/typeAlias&gt;    &lt;package name=&quot;com.hbr.pojo&quot;/&gt;&lt;/typeAliases&gt;</code></pre><p>别名可以有多个，并且单个别名可以与的包别名混用</p><ul><li>直接配置为xml，实现动态配置</li></ul><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><p>namespace：命名空间</p><blockquote><p>namespace和子元素的id联合保证唯一，区别不同的mapper<br>绑定DAO接口<br>namespace的命名必须跟某个接口同名<br>接口中的方法与映射文件中SQL语句id——对应</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.smbms.dao.user.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;select id="getUserList"    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>select是MyBatis中最常用的元素之一<br>select语句有很多属性可以详细配置每一条语句</p><p>id:命名空间中唯一的标识符,接口中的方法与映射文件中的SQL语句id——对应<br>parameterType:传入SQL语句的参数类型<br>resultType:SQL语句返回值类型的完整类名或别名</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>1 使用concat内建函数<br>2 可以从外部传入参数<br>3 使用里面的参数重新绑定</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bind name="newuserName"value="'%’+userName+'%"/sselect*from smbms_user where userName like#{newuserName}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h5><p>单参数<br>如果传入的是单个参数的话，mybatis解析参数没有任何问题。写啥都可以得到结果，但是最好还是有语义。</p><p>如果参数的参数是多个<br>那么默认的处理方式是arg0 arg1 param1 param2(在mapper配置文件用 #{} )这种模式由于没有语义，不推荐使用，我们最好使用注解@param来指定参数。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryByUserNameUserRole</span><span class="token punctuation">(</span><span class="token annotation punctuation">@param</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span>String userName<span class="token punctuation">,</span><span class="token function">QParam</span><span class="token punctuation">(</span><span class="token string">"userRole"</span><span class="token punctuation">)</span>Integer userRole<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Pojo方式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//mapper接口</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listByName</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mapper配置文件的#{ename}该名字要与user的属性一致</span><span class="token comment" spellcheck="true">//select *</span><span class="token comment" spellcheck="true">//from emp where ename like #{ename};</span>UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setEname</span><span class="token punctuation">(</span> <span class="token string">"%M%"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">listByName</span><span class="token punctuation">(</span> user <span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>parameterType<br>基础数据类型</p><ul><li>int、String、Date等</li><li>只能传入一个，通过#{参数名}即可获取传入的值</li></ul><p>复杂数据类型</p><ul><li>Java实体类、Map等</li><li>通过#{属性名}或者#{map的keyName}即可获取传入值</li></ul><p>resultType：直接表示返回类型</p><ul><li>基本数据类型</li><li>复杂数据类型</li></ul><p>resultMap：对外部resultMap的引用</p><ul><li>应用场景：<blockquote><p>数据库字段信息与对象属性不一致<br>复杂的联合查询，自由控制映射结果二者不能同时存在，本质上都是Map数据结构</p></blockquote></li></ul><p>描述如何将结果集映射到Java对象<br><img src="https://s2.ax1x.com/2019/10/21/K1rDeI.png" alt></p><p>连接查询：select u. userCode, userName,r. rolelame from smbms_user u, smbms_role r where u. userRole=r. id</p><h4 id="select小结"><a href="#select小结" class="headerlink" title="select小结"></a>select小结</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>在命名空间中唯一的标识符，可以被用来引用这条语句</td></tr><tr><td>parameter Type</td><td>将会传入这条语句的参数类的完全限定名或别名</td></tr><tr><td>resultType</td><td>从这条语句中返回的期望类型的类的完全限定名或别名。注意集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用result Type或resultMap，但不能同时使用</td></tr><tr><td>resultMap</td><td>命名引用外部的resultMap</td></tr><tr><td>flushCache</td><td>将其设置为true，不论语句什么时候被调用，都会导致缓存被清空。默认值：false</td></tr><tr><td>useCache</td><td>将其设置为true，将会导致本条语句的结果被缓存。默认值：true</td></tr><tr><td>timeout</td><td>这个设置驱动程序等待数据库返回请求结果，并抛出异常时间的最大等待值。默认不设置（驱动自行处理）</td></tr><tr><td>fetchSize</td><td>这是暗示驱动程序每次批量返回的结果行数</td></tr><tr><td>statement Type</td><td>STATEMENT，PREPARED或CALLABLE的一种。让MyBatis选择使用Statement，PreparedStatement或CallableStatement。默认值：PREPARED</td></tr><tr><td>resultSetType</td><td>FORWARD_ONLYISCROLL_SENSITIVEISCROLL_INSENSITIVE中的一种。默认是不设置（驱动自行处理)</td></tr></tbody></table><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><ul><li>id</li><li>parameterType示例<pre class="line-numbers language-xml"><code class="language-xml">&lt;insert id="add"parameterType="User">insert into smbms_user（userCode，userName，userPassword）values（#{userCode}，#{userName}，#{userPassword}）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>注意：insert、update、delete元素均没有resultType属性</li></ul><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><ul><li>id</li><li>parameterType示例</li></ul><pre class="line-numbers language-xml"><code class="language-xml">&lt;update id ="modify"parameterType="User">update smbms_user set userCode=#{userCode}，userName=#{userName}，userPassword=#{userPassword}where id =#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><h4 id="resultMap属性"><a href="#resultMap属性" class="headerlink" title="resultMap属性"></a>resultMap属性</h4><ul><li>id：resultMap的唯一标识</li><li>type：Java实体类</li></ul><p>resultMap子元素</p><ul><li>id:一般对应数据库中该行的主键id，设置此项可提高MyBatis性能</li><li>result:映射到JavaBean的某个“简单类型”属性</li><li>association:映射到JavaBean的某个“复杂类型”属性，比如JavaBean类(描述一对一关系)</li><li>collection：映射到JavaBean的某个“复杂类型”属性，比如集合(描述一对多关系)</li></ul><h5 id="association"><a href="#association" class="headerlink" title="association"></a>association</h5><p>复杂的类型关联：一对一<br>内部嵌套</p><ul><li>映射一个嵌套JavaBean属性</li></ul><p>属性</p><ul><li>property：映射数据库列的实体对象的属性</li><li>javaType：完整Java类名或者别名</li><li>resultMap：引用外部resultMap<br>子元素</li><li>id</li></ul><p>result</p><ul><li>property：映射数据库列的实体对象的属性</li><li>column：数据库列名或者别名</li></ul><h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h4><p>复杂类型集合，一对多<br>内部嵌套</p><ul><li>映射一个嵌套结果集到一个列表</li></ul><p>属性</p><ul><li>property：映射数据库列的实体对象的属性</li><li>ofType：完整Java类名或者别名（集合所包括的类型）</li><li>resultMap：引用外部resultMap</li></ul><p>子元素</p><ul><li>id</li><li>result</li><li>property：映射数据库列的实体对象的属性</li><li>column：数据库列名或者别名</li></ul><p>示例</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hbr.mapper.DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptWith<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sa<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sa<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--        一对多查询        ofType 无法改为 javaType        在association里面用javaType指定类型        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptWith<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select d.id,d.sa,e.job,e.deptno,e.ename        from dept d , emp e        where d.id = e.deptno        and d.id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用继承提高效率-resultMap"><a href="#利用继承提高效率-resultMap" class="headerlink" title="利用继承提高效率(resultMap)"></a>利用继承提高效率(resultMap)</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sa<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sa<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptWith<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--    该部分可以用继承前面的base替代    &lt;result column="id" property="id"/>    &lt;result column="sa" property="sa"/>    --></span>    <span class="token comment" spellcheck="true">&lt;!--    一对多查询    ofType 无法改为 javaType    在association里面用javaType指定类型    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>MyBatis缓存</p><ul><li>一级缓存(默认是开启的而且是无法关闭的)(会话级别缓存session,可以手动清理该缓存：(该session来自会话工厂)session.clearCach();若两次同样的操作中间又其他增删改的操作时，会自动清理掉该缓存)</li><li>二级缓存</li></ul><h4 id="二级缓存的配置"><a href="#二级缓存的配置" class="headerlink" title="二级缓存的配置"></a>二级缓存的配置</h4><p>MyBatis的全局cache配置(设置缓存能力开启)</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>&lt;setting name="cacheEnabled"value="true"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在Mapper XML文件中设置缓存，默认情况下是没有开启缓存的</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;cache eviction="FIFO"flushlnterval="60000"size="512"readOnly="true"/><span class="token comment" spellcheck="true">&lt;!--flushlnterval:每次刷新的时间差，刷新之后之前的缓存失效--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Mapper XML文件配置支持cache后，如果需要对个别查询进行调整，可以单独设置cache,明确指定要不要缓存</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;select id="selectAll"result Type="Emp"useCache="true"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>涉及二级缓存操作的Java实体类都要进行序列化(implements Serializable)</p></blockquote><p><strong>* 先二级缓存找，再到一级缓存里面找，最后到数据库里面找*</strong><br><strong>跨会话级别的，在会话工厂里面有效，当你关闭了该会话工厂所创建的一个session后，在开启一个，之前所进行的查询操作还是被缓存了，不需要再进行一次)</strong></p><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>基于OGNL表达式<br>完成多条件查询等逻辑实现<br>用于实现动态SQL的元素主要有</p><ul><li>◆if</li><li>◆trim</li><li>◆where</li><li>◆set</li><li>◆choose（when、otherwise）</li><li>◆foreach</li></ul><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--if条件查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list2<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *    from dept    where    1 = 1<span class="token comment" spellcheck="true">&lt;!-- 构造sql语法恒等于，避免出错，而且在id的前面也加and--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       and id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kay !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kayBind<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span>+kay+<span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        and kay like #{kayBind}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>该标签可以代替where</p><blockquote><p>where标签的两个功能：1去除多余的and和or，只做前缀处理.2如果没有条件语句，where就会自动省略(简化SQL语句中where条件判断智能处理and和or)</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id-"queryByIdUserName"resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *    from smbms_user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and id=#{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName!<span class="token punctuation">=</span>null and userName!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &lt;bind name="newlUserName"value-""%'+userName+'%'"/>            and userName like #{newUserName}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>数据库不会将数据置为null（会影响数据库的性能）</p><blockquote><p>set 标签可以处理sql语句多余的逗号(前后的逗号都可以，但是习惯写在后面)；</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update smbms_user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userCode！<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            userCode=#{userCode}，        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName！<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            userName=#{userName}，        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPassword！<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            userPassword =#{userPassword），        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPassword！<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            userPassword =#{userPassword），        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id！<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and id=#{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p>属性</p><ul><li>prefix:前缀</li><li>suffix：后缀</li><li>prefixOverrides：前缀重和</li><li>suffixOverrides：后缀重合</li></ul><blockquote><p>更灵活地去除多余关键字,替代where和set</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">&lt;trim prefix="set"suffixOverrides=",">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userCode!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        userCode=#{userCode},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        userName=#{userName},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPassword!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        userPassword=#{userPassword},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix-"where"prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>迭代一个集合，通常用于in条件</p><p>属性</p><ul><li>item(元素值名称)</li><li>index(下标，索引)</li><li>collection：必须指定（指出迭代的集合类型）<ul><li>list</li><li>array</li><li>map-key</li></ul></li><li>open(语句开启的符号)</li><li>separator(迭代的元素之间的分隔符)</li><li>close(语句结束的的符号)</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id-"queryByIds"resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select*    from smbms_user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        id in        &lt;foreach collection="list"open="（"close="）"item="item"separator="，">            #{item}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="choose（when、otherwise）"><a href="#choose（when、otherwise）" class="headerlink" title="choose（when、otherwise）"></a>choose（when、otherwise）</h4><p>相当于Java中switch语句<br>当when有条件满足的时候，就跳出choose</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>条件1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>条件2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>条件3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;select id="queryByRole"resultType="User">    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>        &lt;when test="userRole=1)            id,userCode,userName,userPassword        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        &lt;when test="userRole=2>            id,userCode,userName        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>            id,userVame        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    from user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意，mapper接口的方法名字不要和service类的方法名字一致，不然会玄学错误</strong></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字电路</title>
      <link href="/2019/10/09/shu-zi-dian-lu-xue-xi-bi-ji/"/>
      <url>/2019/10/09/shu-zi-dian-lu-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-信息和编码"><a href="#第一章-信息和编码" class="headerlink" title="第一章 信息和编码"></a>第一章 信息和编码</h1><h3 id="二进制数的补码："><a href="#二进制数的补码：" class="headerlink" title="二进制数的补码："></a>二进制数的补码：</h3><ul><li>最高位为符号位（0为正，1为负）</li><li>正数的补码和它的原码相同</li><li>负数的补码=数值位逐位求反+1</li></ul><h3 id="电压信号的离散化"><a href="#电压信号的离散化" class="headerlink" title="电压信号的离散化"></a>电压信号的离散化</h3><ul><li>“0”和“1”不可混淆</li><li>Use the same”uniform representation convention”for every component and wire in our digital system To implement devices with high reliability, we outlaw “close calls”via a representation convention which forbids a range of voltages between”0”and”1”.</li></ul><p><img src="https://s2.ax1x.com/2019/10/09/uI3DhQ.md.png" alt="将电压分成三段"></p><p>电路元件接收”低质量”的电子信号，发出“高质量”的电信号</p><h3 id="逻辑代数的基本公式"><a href="#逻辑代数的基本公式" class="headerlink" title="逻辑代数的基本公式"></a>逻辑代数的基本公式</h3><p><img src="https://s2.ax1x.com/2019/10/09/uIt8y9.png" alt="基本公式"></p><p><img src="https://s2.ax1x.com/2019/10/09/uItxl4.md.png" alt="常用公式"></p><h3 id="逻辑代数中的基本定理"><a href="#逻辑代数中的基本定理" class="headerlink" title="逻辑代数中的基本定理"></a>逻辑代数中的基本定理</h3><h4 id="代入定理"><a href="#代入定理" class="headerlink" title="代入定理"></a>代入定理</h4><blockquote><p>在任何一个包含A的逻辑等式中，若以另外一个逻辑式代入式中A的位置，则等式依然成立。</p></blockquote><h4 id="反演定律"><a href="#反演定律" class="headerlink" title="反演定律"></a>反演定律</h4><blockquote><p>规则：与或取反，变量取反，常量取反，<br>变换顺序：先括号，然后与，最后或<br>不属于单个变量的上的反号保留不变</p></blockquote><h4 id="对偶定理"><a href="#对偶定理" class="headerlink" title="对偶定理"></a>对偶定理</h4><blockquote><p>规则：与或取反，常量取反，</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/09/uIds9f.md.png" alt></p><h4 id="最小项之和和最大项之积转换"><a href="#最小项之和和最大项之积转换" class="headerlink" title="最小项之和和最大项之积转换"></a>最小项之和和最大项之积转换</h4><p><img src="https://s2.ax1x.com/2019/10/10/u7PJzD.md.png" alt></p><h4 id="卡诺图"><a href="#卡诺图" class="headerlink" title="卡诺图"></a>卡诺图</h4><p><img src="https://s2.ax1x.com/2019/10/10/u7iETI.md.png" alt></p><p>卡诺图化简的原则</p><ul><li>与项的数目最少，即圈成的矩形数最少；</li><li>每个与项的因子最少，即圈成的矩形最大；</li><li>保证每个圈中至少有一个“1”只被圈过一次，否则该圈多余的</li></ul><h3 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h3><h4 id="组合逻辑电路的分析方法"><a href="#组合逻辑电路的分析方法" class="headerlink" title="组合逻辑电路的分析方法"></a>组合逻辑电路的分析方法</h4><p>所谓分析一个给定的逻辑电路，就是要通过分析找出电路的逻辑功能来。<br>分析过程</p><ul><li>从电路的输入到输出逐级写出逻辑函数式，最后得到表示输出与输入关系的逻辑函数式</li><li>用公式化简法或卡诺图化简法将得到的函数式化简或变换，使逻辑关系简单明了。</li><li>为了使电路的逻辑功能更加直观，有时还可以将逻辑函数式转换为真值表的形式。</li></ul><h4 id="组合逻辑电路的设计方法"><a href="#组合逻辑电路的设计方法" class="headerlink" title="组合逻辑电路的设计方法"></a>组合逻辑电路的设计方法</h4><p>根据给出的实际逻辑问题，求出实现这一逻辑功能的最简单逻辑电路，这就是设计组合逻辑电路时要完成的工作。<br>所谓的“最简”</p><ul><li>电路所用的器件数量最少</li><li>器件的种类最少</li><li>器件之间的连线最少</li></ul><h4 id="设计步骤"><a href="#设计步骤" class="headerlink" title="设计步骤"></a>设计步骤</h4><p><img src="https://s2.ax1x.com/2019/10/11/uqa6h9.png" alt></p><h4 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h4><blockquote><p>将输入的每个高，低电平信号编成一个对应的二进制代码</p></blockquote><p>分类</p><ul><li>普通编码器：任何时刻只允许输入一个编码信号</li><li>优先编码器：允许同时输入两个以上的编码信号，但只对其中优先权最高的一个进行编码。</li></ul><h5 id="优先编码器"><a href="#优先编码器" class="headerlink" title="优先编码器"></a>优先编码器</h5><blockquote><p>特点：允许同时输入两个以上的编码信号，但只对其中优先权最高的一个进行编码。</p></blockquote><h4 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h4><p>译码：将每个输入的二进制代码译成对应的输出高、低电平信号或另外一个代码。（译码是编码的反操作<br>常用的有：二进制译码器，二-十进制译码器，显示译码器等。</p>]]></content>
      
      
      <categories>
          
          <category> 数字电路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透入门</title>
      <link href="/2019/09/25/shen-tou-xue-xi/"/>
      <url>/2019/09/25/shen-tou-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h3 id="信息采集"><a href="#信息采集" class="headerlink" title="信息采集"></a>信息采集</h3><h4 id="DNS收集"><a href="#DNS收集" class="headerlink" title="DNS收集"></a>DNS收集</h4><blockquote><p>DNS: 通过一个域名解析到一个IP</p></blockquote><blockquote><p>查询内容：主机[A]记录,别名[CNAME],主机信息[HINFO],邮箱[MB],邮件交换器[MX],指针记录[PTR],服务记录[SRV]</p></blockquote><blockquote><p>查询工具：站长之家，netcraft，dnsenum，Inswalk，lbd</p></blockquote><p>whois 查询</p><ul><li>根据已知域名反查，分析出此域名的注册人、邮箱、电话等字段，执行以下（2）至（5）反查方式；</li><li>根据已知域名WHOIS中的注册邮箱来反查得出其它域名WHOIS中注册邮箱与此相同的域名列表；</li><li>根据已知域名WHOIS中的注册人来反查得出其它域名WHOIS中注册人与此相同的域名列表；</li><li>根据已知域名WHOIS中的联系电话来反查得出其它域名WHOIS中联系电话与此相同的域名列表；</li><li>其它反查方式：比如可以根据注册机构、传真、地址、注册商等等方式来反查。</li></ul><p>站长工具: <a href="http://tool.chinaz.com/" target="_blank" rel="noopener">http://tool.chinaz.com/</a><br>netcraft: <a href="http://searchdns.netcraft.com" target="_blank" rel="noopener">http://searchdns.netcraft.com</a></p><h4 id="敏感目录收集"><a href="#敏感目录收集" class="headerlink" title="敏感目录收集"></a>敏感目录收集</h4><ul><li>mysql管理接口</li><li>后台目录。御剑</li><li>上传目录</li><li>Cansina</li><li>phpinfo</li><li>burpsuit ： 执行命令cd C:\ Program Files (x86)\ Java\ jrel.8.0_60\ bin java-jarrc:\ BurpLoader. jar(按照实际情况来，进入D盘  d:) D:\Program Files\Java\jre1.8.0_221\bin&gt;java.exe -jar d:\users\BurpLoader.jar</li><li>robots.txt</li><li>webrobot</li><li>安装包</li><li>skipfish</li><li>安装页面</li><li>uniscan</li><li>爬行</li><li>websploit</li></ul><h3 id="批量拿站"><a href="#批量拿站" class="headerlink" title="批量拿站"></a>批量拿站</h3><h4 id="利用0day批量拿站"><a href="#利用0day批量拿站" class="headerlink" title="利用0day批量拿站"></a>利用0day批量拿站</h4><p>aspcms 0day 排量拿shel1漏洞1：在域名后面添加添加：/plug/comment/commentList.asp?id=0%20unmasterion%20semasterlect%20top%201%20UserID,GroupID,LoginName,Password,now%28%29,null,1%20%20frmasterom%20{prefix}user</p><p>关键词：有限公司–Powered by ASPCMS V2.0前面的有限公司可以自己改，列入学校医院等等xXX默认后台：<br>/admin_aspcms/login.aspl<br>/admin/login.asp <a href="http://yangmingcapital.com/admin" target="_blank" rel="noopener">http://yangmingcapital.com/admin</a> 968807<br><a href="http://www.xgxcard.com" target="_blank" rel="noopener">http://www.xgxcard.com</a> admin 12341234<a href="http://www.beyond-ei.com/admin" target="_blank" rel="noopener">http://www.beyond-ei.com/admin</a> 123456<br><a href="http://www.lyhg.com.cn" target="_blank" rel="noopener">http://www.lyhg.com.cn</a> admin 6963955c11elff00<br><a href="http://cyppe.com/admin" target="_blank" rel="noopener">http://cyppe.com/admin</a> 11998822<br><a href="http://www.enqigs.com" target="_blank" rel="noopener">http://www.enqigs.com</a> admin 323f87f08f6ae9f9</p><h3 id="判断网站cms类型"><a href="#判断网站cms类型" class="headerlink" title="判断网站cms类型"></a>判断网站cms类型</h3><h4 id="判断网站cms类型-1"><a href="#判断网站cms类型-1" class="headerlink" title="判断网站cms类型"></a>判断网站cms类型</h4><p>判断目标：脚本语言，操作系统，搭建平台，cms厂商</p><p>使用工具：wvs，wwwscan，站长工具，whatweb，googlehack</p><h3 id="网站暴库漏洞"><a href="#网站暴库漏洞" class="headerlink" title="网站暴库漏洞"></a>网站暴库漏洞</h3><h3 id="网站后台查找"><a href="#网站后台查找" class="headerlink" title="网站后台查找"></a>网站后台查找</h3><h3 id="网站管理员密码猜解"><a href="#网站管理员密码猜解" class="headerlink" title="网站管理员密码猜解"></a>网站管理员密码猜解</h3><h3 id="网站漏洞利用"><a href="#网站漏洞利用" class="headerlink" title="网站漏洞利用"></a>网站漏洞利用</h3>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再遇JSP</title>
      <link href="/2019/09/22/zai-yu-jsp/"/>
      <url>/2019/09/22/zai-yu-jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h3 id="JSP-1"><a href="#JSP-1" class="headerlink" title="JSP"></a>JSP</h3><p>第一次请求一个JSP页面时，Servlet/JSP容器要做两件事情：</p><ol><li>将JSP页面转换成一个JSP页面实现类，这是一个实现javax.servlet.jsp.JspPage接口或其子接口javax.servlet.jsp.HttpjspPage的Java类。JspPage是javax.servlet.Servlet的子接口，这样会<strong>使每个JSP页面都成为一个Servlet</strong>。所生成Servlet的类名取决于Servlet/<br>JSP容器。这一点不必操心，因为不需要你直接处理。如果有转换错误，错误消息将会发送到客户端。</li><li>如果转换成功，<strong>Servlet/JSP容器将会编译 Servlet类。之后，容器加载和实例化Java字节码，并执行它通常对Servlet所做的生命周期操作。</strong></li></ol><p>对于同一个JSP页面的后续请求，Servlet/JSP容器会查看这个JSP页面自从最后一次转换以来是否修改过。如果修改过，就会重新转换、重新编译，并执行。如果没有，则执行内存中已经存在的JSP Servlet。这样，第一次调用JSP页面的时间总是会比后续请求的更长，因为它需要转换和编译。为了解决这个问题，可以采取以下任意一种措施：</p><ul><li>配置应用程序，以便在应用程序启动之时，调用所有的JSP页面（实际上是指转换和编译），而不是在初始请求时才调用。</li><li>预先编译JSP页面，并将它们以Servlet的方式进行部署。</li></ul><p><strong>JSP中有一个API，其中包含4个包：</strong></p><blockquote><ul><li>javax.servletijsp：包含核心类和接口，Servlet/JSP容器用它们将JSP页面转换成Servlet。JspPage和HtpJspPage接口是这个包中的重要成员,一本选择HttplspPage。</li><li>javax.servlet.jsp.tagext：包含用于开发定制标签的类型</li><li>javax.el：为Unified Expression Language提供API。</li><li>javax.servletijsp.el：提供ServleJSP容器必须支持的类，以便支持ISP中的Expression Language。</li></ul></blockquote><blockquote><p>在Tomcat中，第一次调用完welicomejsp页面之后，它被转换成一个welcome isp Servlet。你可以在Tomcat的work目录的子目录下看到所生成的Servlet文件。JSP页面的主体被转换成一个jspService方法。这个方法在HtpJspPage中定义，并且通过HtpJspBase的service方法实现调用。</p></blockquote><p><strong>有两件事情需要注意:</strong></p><blockquote><p>第一，Java代码要用&lt;%和%&gt;包起来，并且可以放在JSP页面中的任何位置；<br>第二，为了导入一个JSP页面中要用到的Java类型，可以利用page指令的import属性。如果没有导入类型，那么在代码中必须编写Java类型的全类名。</p></blockquote><h3 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h3><blockquote><p>Servlet容器将几个对象传给它所运行的Servlet。例如，在Servlet的service方法中获得HttpServletRequest和HttpServletResponse，并在init方法中获得ServletConfig。此外，还可以通过在HtpServletRequest 对象中调用getSession获得一个HtpSession。在JSP中，可以通过使用隐式对象来获取那些对象。</p></blockquote><p>PageContext提供的另一些重要的方法是那些存取属性，如getAttribute和 setAttribute方法。属性可以保存在以下4种范围中：page、request、session 及application。page范围最窄，保存在这里的属性只能在同一个JSP页面中使用。request范围是指当前的ServletRequest，session 范围是指当前的HtpSession，application 范围是指ServletContext。<br>PageContext中的setAttribute方法具有以下签名：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String name<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object value，<span class="token keyword">int</span> scope<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>scope值可以是以下任意一个PageContext中的static final int值：<br>PAGE_SCOPE、REQUEST_SCOPE、SESSION_SCOPE 及 APPLICATION_SCOPE。</p></blockquote><p>另外，属性也可以保存在page范围中，可以利用下面这个setAtribute方法重载：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String name<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，下面这个Scriptlet在ServletRequest中保存了一个属性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>product is a Java object pageContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"product"</span><span class="token punctuation">,</span> product<span class="token punctuation">,</span> Pagecontext<span class="token punctuation">.</span>REQUEST_SCOPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述代码与下面这行代码的效果是一样的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"product"</span><span class="token punctuation">,</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h4><p><strong>利用page指令可以就当前JSP页面的某些方面对JSP转换器提出指示。</strong></p><blockquote><p>page指令的语法如下：<br>&lt;se page attributel=”value1”attribute2=”value2”…%&gt;</p></blockquote><p>@和page之间的空格是可选的，atributel、attribute2等都是page指令的属性。下面是page指令的属性列表：</p><ul><li>import。指定要导入的一种或多种Java类型，供本页的Java代码所用。例如，import=”java.util.List”导入List接口。利用通配符* 还可以导入整个包，如import=”java.util * ”。导入多种类型时，两种类型之间要用一个逗号隔开</li><li>session。值为true时，表示这个页面参与Session管理；值为false时，表示不参与Session管理。默认值为true，意味着如果之前还没有javax.servlet.http.HttpSession实例，那么调用JSP页面将始终会创建一个。</li><li>buffer。指定隐式对象out的缓冲区大小，以千字节为单位。强制以kb作为后缀。缓冲区的默认容量大于或等于8KB，具体取决于JSP容器。这个属性值还可以为none，表示不使用缓存，但这样会导致输出的内容直接被写入相应的PrintWriter。</li><li>autoFlush。默认值为true，表示当缓冲区满时，被缓存的输出应该自动刷新。值为false时，表示只有在调用隐式对象response的flush方法时，才进行刷新缓冲区。因此，当缓冲区溢出时会抛出一个异常。</li><li>info。指定所生成Servlet的getServletlnfo方法返回值。</li><li>errorPage。表示负责处理该页面可能出现的错误的页面。</li><li>isErrorPage。表明这个页面是否负责处理错误。</li><li>contentType。指定该页面隐式对象response的内容类型，其默认值为text/html。</li><li>pageEncoding。指定该页面的字符编码，其默认值为ISO-8859-1。</li><li>isEIgnored。表明是否忽略EL表达式。EL是Expression Language的缩写</li><li>language。指定该页面使用的脚本语言，其默认值为java，这是JSP2.2中唯一有效的值。</li><li>extends。指定这个JSP页面的实现类必须扩展的超类。该属性很少使用，使用时应该特别小心。</li><li>deferredSyntaxAllowedAsLiteral。指明是否允许用字符序列#{作为该页面和编译单元的String字面值，其默认值为false。#{很重要，因为它在Expression Language中是一个特殊的字符序列</li><li>trimDirectiveWhitespaces。表明是否从输出内容中删除只包含空格的模板文本，其默认值为false，也就是说，不删除空格。</li></ul><blockquote><p>page 指令可以出现在页面中的任何位置。只是当它包含contentType 或者pageEncoding属性时，<strong>它就必须放在所有的模板数据之前</strong>，并且是在利用Java代码发送任何内容之前。这是因为，必须在发送任何内容之前设置内容类型和字符编码。 <strong>page指令也可以多次出现。但是，在多个page指令中多次出现的同一个属性，它的值必须一致，只有import属性例外</strong>。放在多个page指令中的import属性，其效果可以累积。</p></blockquote><h4 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h4><blockquote><p>利用include指令可以将另一个文件的内容放到当前的JSP页面中。在一个JSP页面中可以使用多个include指令。如果某部分特殊的内容需要被其他页面所用，或者被处于不同位置的某个页面所用，那么将这部分内容做成一个include文件是很有帮助的。</p></blockquote><blockquote><p>include指令的语法如下：<br>&lt;%0include file=”url”%&gt;</p></blockquote><p>此处@和include之间的空格是可选的，<strong>并且url是表示一个include文件的相对路径。</strong><br><strong>如果url以一个正斜线（/）开头，那么其在服务器中就会被解读成是一条绝对路径。如果不是以正斜线开头，则被解读为是相对于当前JSP页面的路径。</strong></p><blockquote><p>按照规范include文件的扩展名应该为jspf</p></blockquote><h3 id="脚本元素"><a href="#脚本元素" class="headerlink" title="脚本元素"></a>脚本元素</h3><p>脚本元素将Java代码合并成一个JSP页面。脚本元素有3种类型：Scriptlet、声明及表达式</p><h4 id="Scriptlet"><a href="#Scriptlet" class="headerlink" title="Scriptlet"></a>Scriptlet</h4><blockquote><p>Scriptlet是一个Java代码块，它以&lt;%开头，以%&gt;结束。</p></blockquote><p><strong><em>注意，在一个Scriptlet中定义的变量，对于它后面的其他Scriptlet是可见的。</em></strong></p><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><blockquote><p>表达式（Expression）的运算结果会被填入隐式对象out的print方法中。表达式以&lt;%开头，并以%&gt;结束。</p></blockquote><p>以下粗体部分就是一个表达式：</p><blockquote><p>Today is &lt;%=<strong>java.util.Calendar.getInstance().getTime()</strong>%&gt;</p></blockquote><p><strong>注意，表达式的后面不需要用分号。而Scriptlet需要</strong></p><blockquote><p>对于这个表达式，JSP容器会先运算java.util.Calendar.getlnstance（）.getTime（），然后将结果传给out.print（）。</p></blockquote><p>它与下面这个Scriptlet的结果是一样的：</p><blockquote><p>Today is out.print（java.util.Calendar.getInstance（）.getTime（））；</p></blockquote><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>声明就要用&lt;%!和%&gt;包起来<br>示例：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%!</span><span class="token attr-name">public</span> <span class="token attr-name">String</span> <span class="token attr-name">getTodaysDate(){</span>    <span class="token attr-name">return</span> <span class="token attr-name">new</span> <span class="token attr-name">java.</span> <span class="token attr-name">util.</span> <span class="token attr-name">Date();</span><span class="token attr-name">}</span><span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Declarations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Today is &lt;%=getTodaysDate()%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>声明可以放在JSP页面中的任何位置，并且同一个页面中可以有多个声明。</p></blockquote><p>我们可以利用声明覆盖实现类中的init和destroy方法。覆盖init，要声明一个jsplnit方法；覆盖destroy，要声明一个jspDestroy方法。</p><h4 id="关闭脚本元素"><a href="#关闭脚本元素" class="headerlink" title="关闭脚本元素"></a>关闭脚本元素</h4><p>随着JSP2.0中Expression Language的发展，建议做法是利用EL来访问服务器端的对象，而不是在JSP页面中编写Java代码。为此，原本开启的JSP2.0脚本元素，可以通过在部署描述符的<jsp-property-group>中定义一个scripting-invalid元素，将它关闭，如下所示：</jsp-property-group></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp-property-group</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scripting-invalid</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scripting-invalid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsp-property-group</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h3><p>第三种句法元素是动作（Action），它们被编译成执行某个操作的Java代码，例如访问某个Java对象，或者调用某个方法。本节讨论必须能被所有JSP容器支持的标准动作。除标准动作之外，还可以创建定制的标签，用来执行某些操作。</p><h4 id="useBean"><a href="#useBean" class="headerlink" title="useBean"></a>useBean</h4><p>这个动作将创建一个与某个Java对象相关的脚本变量。它是将表现逻辑与业务逻辑分隔开来的最容易的方法之一。但是有了像定制标签和Expression Language这类技术之后，现在已经很少使用useBean了。<br>举个例子。代码清单3-9中的useBean Test.jsp页面创建了一个java.util.Date实例，并将它与脚本变量today关联起来，之后将它用在一个表达式中。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>useBean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;jsp:useBean id="today"class="java.util.Date"/>&lt;%=today%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这个页面之后，将会在浏览器中输出当前的日期和时间。</p><h4 id="setProperty-和getProperty"><a href="#setProperty-和getProperty" class="headerlink" title="setProperty 和getProperty"></a>setProperty 和getProperty</h4><p>setProperty动作是在一个Java对象中保存一个属性，getProperty则是获取一个Java对象的属性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> app03a<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span><span class="token keyword">private</span> String id<span class="token punctuation">;</span> <span class="token keyword">private</span> String firstName<span class="token punctuation">;</span> <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>getProperty and setProperty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;jsp:useBean id="employee"class="app03a.Employee"/>&lt;jsp:setProperty name="employee"property="firstName" value="Abigail"/>First Name:&lt;jsp:getProperty name="employee"property="firstName"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p><strong>include动作用于动态地包含另一个资源，它可以包含另一个JSP页面、一个Servlet或者一个静态的HTML页面。</strong><br>下面就是利用include动作来包含menu.jsp页面的。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Include action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>include</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jspf/menu.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;jsp:param name="text"value="How are you?"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jsp:</span>include</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>理解include 指令和include动作之间的区别是很重要的。使用include指令时，这种包含是发生在页面转换的时候，例如JSP容器将页面转换成一个生成的Servlet的时候。使用include动作时，这种包含则是发生在请求的时候。因此，可以利用include动作传递参数，而不是利用include指令。</p></blockquote><blockquote><p>第二个区别在于，使用include指令时，被包含资源的文件扩展名并不重要。而使用include动作时，文件扩展名则必须为jsp，以便它能够作为一个JSP页面进行处理。例如，在include 动作中用jspf作为扩展名时，将会使得这个JSP segment被当作静态文件进行处理。</p></blockquote><h4 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h4><p><strong>forward 动作是将当前页面跳转到另一个不同的资源。</strong><br>例如，下面的forward动作就是将当前页面跳转到login.jsp页面。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>forward</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jspf/login.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;jsp:param name="text"value="Please 1ogin"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jsp:</span>forward</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h3><p>EL被设计成能够轻松地编写无脚本或不句含Java代码的JSP页面，即不使用JSP声明、表达式或者Scriptlet的页面。</p><h4 id="EL语法"><a href="#EL语法" class="headerlink" title="EL语法"></a>EL语法</h4><p>EL表达式是以${开头，以}结束。一个EL表达式的构造如下：<br><strong>${expression）</strong><br>例如，编写表达式x+y时，要使用下面的结构：<br><strong>${x+y）</strong></p><blockquote><p>两个表达式相连接，这种也很常见。表达式的运算顺序是从左到右，结果的类型强制为String，然后连在一起。例如，如果a+b等于8，c+d等于10，那么下面这两个表达式的结果将是810：<br>${a+b）${c+d）<br>如${a+b}andS{c+d}的结果将是8and10。</p></blockquote><p>如果EL表达式用在某个定制标签的属性值中，那么将会运算这个表达式，并强制结果字符串为该属性想要的类型：<br><strong>&lt;my:tag someAttribute=”${expression]”/&gt;</strong></p><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><p>下面是一些保留字，不能用作标识符：</p><blockquote><p>and eq gt true instanceof or ne le false empty not It ge null div mod</p></blockquote><h4 id="和-运算符"><a href="#和-运算符" class="headerlink" title="[]和. 运算符"></a>[]和. 运算符</h4><blockquote><p>EL表达式可以返回任何类型。如果某个EL表达式的结果对象中有一个属性，那么你就可以利用[]或者.运算符来访问该属性。[]和.运算符的功能相似；</p></blockquote><p>要访问某个对象的属性，可以使用以下任意一种形式：</p><blockquote><p>${object[“propertyName”]}<br>${object.propertyName}</p></blockquote><p><strong>但是，如果propertyName不是有效的Java变量名称，则只能使用[]运算符。</strong><br>例如，下面这两个EL表达式可以用来访问隐式对象标头中的HTTP标头host：</p><blockquote><p>${header[“host”]}<br>${header.host}</p></blockquote><h4 id="访问JavaBean"><a href="#访问JavaBean" class="headerlink" title="访问JavaBean"></a>访问JavaBean</h4><p><strong>我们可以利用.或[]运算符来访问一个Bean的属性，其构造如下：</strong></p><blockquote><p>${beanName[“propertyName”]}<br>${beanName.propertyName}</p></blockquote><p>例如，<strong>要访问myBean中的secret属性</strong>，要使用下面这个表达式：</p><blockquote><p>${myBean.secret}</p></blockquote><h3 id="EL隐式对象"><a href="#EL隐式对象" class="headerlink" title="EL隐式对象"></a>EL隐式对象</h3><p>EL通过提供一组它自己的隐式对象，可以帮助你访问各种对象</p><h4 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h4><blockquote><p>pageContext对象表示当前JSP页面的javax.servlet.jsp.PageContext。它包含所有其他的JSP隐式对象</p></blockquote><p>例如，可以利用以下任意一个表达式获得当前的ServletRequest：</p><blockquote><p>${pageContext.request}<br>${pageContext[“request”]</p></blockquote><p>请求方法则可以利用以下任意一个表达式获得：</p><blockquote><p>${pageContext[“request”][“method”]}<br>${pageContext[“request”].method}<br>${pageContext.request[“method”]}<br>${pageContext.request.method}</p></blockquote><h4 id="initParam"><a href="#initParam" class="headerlink" title="initParam"></a>initParam</h4><p>隐式对象initParam用于获取一个context参数值。<br>例如，要想获得context参数password，需使用下面的表达式：</p><blockquote><p>${initParam.password）<br>或者<br>${init Param[“password”]</p></blockquote><h4 id="param"><a href="#param" class="headerlink" title="param"></a>param</h4><p>隐式对象param用于获取一个请求参数。这个对象表示一个包含所有请求参数的Map。<br>例如，为了获取参数userName，需使用下面任意一个表达式：</p><blockquote><p>${param.userName}<br>${param[“userName”]}</p></blockquote><h4 id="paramValues"><a href="#paramValues" class="headerlink" title="paramValues"></a>paramValues</h4><p>利用隐式对象paramValues可以获取一个请求参数的多个值。这个对象表示一个包含所有请求参数并以参数名称作为键的Map。每个键的值都是一个字符串数组，其中包含指定参数名称的所有值。如果该参数只有一个值，也仍然返回只有一个元素的一个数组。<br>例如，要获得 selectedOptions参数的第一个和第二个值，可以使用如下表达式：</p><blockquote><p>${paramValues.selectedoptions[0]}<br>${paramValues.selectedoptions[1]}</p></blockquote><h4 id="header"><a href="#header" class="headerlink" title="header"></a>header</h4><p>隐式对象header表示一个包含所有请求标头的Map。要获取一个标头值，需用该标头名称作为键。<br>例如，要获取accept-language标头的值，需用下面的表达式：</p><blockquote><p>${header[“accept-language”]}</p></blockquote><p>如果该标头名称是一个有效的Java变量名，如connection，那么也可以使用，运算符：</p><blockquote><p>${header.connection}</p></blockquote><h4 id="headerValues"><a href="#headerValues" class="headerlink" title="headerValues"></a>headerValues</h4><p>隐式对象headerValues表示一个包含所有请求标头并以标头名称作为键的Map。但与header不同的是，隐式对象headerValues返回的Map返回一个字符串数组。<br>例如，要获得accept-language标头的第一个值，需使用下面这个表达式：</p><blockquote><p>${headerValues[“accept-language”][0]}</p></blockquote><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>利用隐式对象cookie可以获取一个cookie。这个对象表示包含当前HtpServletRequest中所有cookie的Map。<br>例如，要获取一个名为jsessionid的 cookie值，需使用下面这个表达式：</p><blockquote><p>${cookie.jsessionid.value}</p></blockquote><p>要获得jsessionid cookie的路径值，则使用这个表达式：</p><blockquote><p>${cookie.jsessionid.path}</p></blockquote><h4 id="applicationScope、sessionScope、requestScope-及-pageScope"><a href="#applicationScope、sessionScope、requestScope-及-pageScope" class="headerlink" title="applicationScope、sessionScope、requestScope 及 pageScope"></a>applicationScope、sessionScope、requestScope 及 pageScope</h4><p>利用隐式对象applicationscope获得一个application范围的变量值。<br>例如，如果你有一个application 范围的变量myVar，就可以利用下面这个表达式来访问该属性：</p><blockquote><p>${applicationscope.myVar}</p></blockquote><blockquote><p>注意，在Servlet/JSP编程中，有作用范围的对象是指放在以下这些对象中作为属性的对象：Pagecontext、SerletRequest、HtpSession 或者SerletContext。隐式对象sessionScope、requestScope 及 pageScope 与applicationScope相似。但是其范围分别是session、request及page。</p></blockquote><h4 id="实现无脚本的JSP页面"><a href="#实现无脚本的JSP页面" class="headerlink" title="实现无脚本的JSP页面"></a>实现无脚本的JSP页面</h4><p>要关闭JSP页面中的脚本元素，必须利用带有两个子元素（url-pattern和scriptinginvalid）的jsp-property-group元素。url-pattern元素定义要关闭脚本的URL模式。下面示范如何在应用程序中关闭所有JSP页面的脚本：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp-property-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scripting-invalid</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scripting-invalid</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsp-property-group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsp-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3><p>JavaServer Pages Standard Tag Library（JSTL）是一个定制标签类库的集合，用于解决一些常见的问题，例如迭代一个映射或者集合、条件测试、XML处理，甚至数据库访问和数据操作等。</p><h4 id="下载JSTL"><a href="#下载JSTL" class="headerlink" title="下载JSTL"></a>下载JSTL</h4><p><a href="http://jstl.java.net" target="_blank" rel="noopener">下载地址</a><br>需要下载两套软件：<strong>JSTL API和JSTL实现。</strong>JSTLAPI中包含javax.servlet.jsp.jstl包，由JSTL规范中定义的类型组成。JSTL实现则包含了相关的实现类。必须将两个jar文件都复制到使用了JSTL的每个应用程序的<strong>WEB-INF/ib目录下</strong>。</p><h4 id="JSTL类库"><a href="#JSTL类库" class="headerlink" title="JSTL类库"></a>JSTL类库</h4><p><img src="https://s2.ax1x.com/2019/09/23/uCIJJJ.png" alt></p><p><img src="https://s2.ax1x.com/2019/09/23/uCIDoD.png" alt></p><p>为了在JSP页面中使用JSTL类库，必须以下列格式使用taglib指令：</p><blockquote><p>&lt;%@ taglib uri=”uri”prefix=”prefix”%&gt;</p></blockquote><p>例如，为了使用Core类库，必须在JSP页面开头处这样声明：</p><blockquote><p>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jst1/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jst1/core&quot;</a> prefix=”c”%&gt;</p></blockquote><h3 id="通用动作指令"><a href="#通用动作指令" class="headerlink" title="通用动作指令"></a>通用动作指令</h3><p>Core 类库中用来操作限域变量的3个通用动作指令：out、set和remove。</p><h4 id="out标签"><a href="#out标签" class="headerlink" title="out标签"></a>out标签</h4><p>out标签对表达式进行运算，并将结果输出到当前的JspWriter。<br>out的语法有两种形式，即有主体内容和没有主体内容：</p><blockquote><p>&lt;c:out value=”value”[escapeXml=”{true_ | false}”][default=”defaultValue”]/&gt;</p></blockquote><blockquote><p>&lt;c:out value=”value”[escapeXml=”{true_|false}”]&gt;default value </p></blockquote><p><strong><em>提示在标签的语法中，[]表示是可选的属性。加了下划线的那个值，则表示那是默认值。</em></strong> </p><blockquote><p>out中的default属性可以设置一个默认值，当赋予其value属性的EL表达式返回null时，就会显示该默认值。default属性可被赋予动态值。如果这个动态值返回nul，out标签就会显示一个空字符串。</p></blockquote><h4 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h4><p>利用set标签可以完成以下工作：<br>1.创建一个字符串和引用该字符串的一个限域变量。<br>2.创建一个限域变量，并引用已经存在的某一个限域变量。<br>3.设置限域对象的属性。</p><blockquote><p>如果利用set创建限域变量，那么处于该标签之后的整个JSP页面将都可以使用该变量。</p></blockquote><p>set标签的语法有4种形式。</p><p>第一种形式用来创建一个限域变量，在该变量的value属性中可以指定要创建的字符串，或者现有的限域对象。</p><blockquote><p>&lt;c:set value=”value”var=”varName”[scope=”{page | requestIsession | application）”]/&gt;</p></blockquote><p>第二种形式与第一种相似，只不过要创建的字符串或者要引用的限域对象是作为主体内容进行传递的：</p><pre class="line-numbers language-html"><code class="language-html">&lt;c:set var="varName"[scope="{pagelrequestlsessionlapplication]"]>    body content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>set</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种形式允许在主体内容中有JSP代码。</p><p>第三种形式是设置限域对象的属性值。target属性指定限域对象，property属性指定限域对象的属性。要赋给该属性的值通过value属性进行设置：</p><blockquote><p>&lt;c:set target=”target”property=”propertyName”value=”value”/&gt;<br><strong>注意，必须在target属性中用一个EL表达式来引用限域对象。</strong></p></blockquote><p>第四种形式与第三种相似，但它的值是作为主体内容传递的：</p><pre class="line-numbers language-html"><code class="language-html">&lt;c:set target="target"property="propertyName">    body content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>set</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.ax1x.com/2019/09/23/uC7L6A.md.png" alt></p><h4 id="remove标签"><a href="#remove标签" class="headerlink" title="remove标签"></a>remove标签</h4><p>利用remove 标签删除限域变量，其语法如下：<br>&lt;c:remove var=l”varName”[scope=”{page | requestIsession | application}”]/&gt;</p><p><strong>注意，限域变量引用的对象并没有被删除。因此，如果另一个限域对象也在引用这个对象，那么仍然可以通过另外这个限域对象来访问该对象。</strong></p><h3 id="条件式动作指令"><a href="#条件式动作指令" class="headerlink" title="条件式动作指令"></a>条件式动作指令</h3><p>在JSTL中有4个标签可以执行条件式动作指令：if、choose、when和otherwise。</p><h4 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h4><blockquote><p>if标签先对某个条件进行测试，如果该条件运算结果为true，则处理它的主体内容。测试结果保存在一个Boolean对象中，并创建一个限域变量来引用Boolean对象。可以利用var属性设置限域变量名，利用scope属性来指定其作用范围。</p></blockquote><p>if的语法有两种形式，第一种形式没有主体内容：</p><blockquote><p>&lt;c:if test=”testCondition”var=”varName”[scope=”{page | request | session | application}”]/&gt;</p></blockquote><p>在这种情况下，var指定的限域变量一般由同一个JSP页面中更后面的另一个标签的测试所决定。</p><p>第二种形式有主体内容：</p><pre class="line-numbers language-html"><code class="language-html">&lt;c:if test="testCondition[var="varName"][scope="(page | request | session | application}"]>    body content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>if</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主体内容为JSP，如果测试条件结果为true，它就会得到处理</p><h4 id="choose、when和otherwise。"><a href="#choose、when和otherwise。" class="headerlink" title="choose、when和otherwise。"></a>choose、when和otherwise。</h4><blockquote><p>choose和when标签的作用与Java中的switch和case关键子相似，也就定呢，它们为互相排斥的条件式执行提供相关内容。choose标签内部必须嵌有一个或多个when标签，每个when标签代表可以进行运算和处理的一种情况。otherwise标签用于默认的条件代码块，如果所有when标签的测试条件运算结果都不为true，就会执行该代码块。如果有otherwise标签，它必须放在最后一个when标签之后。</p></blockquote><p>choose和otherwise标签没有属性。when标签则必须用test属性设定一个条件，用于确定是否处理主体内容。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span></span> <span class="token attr-name">choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span></span> <span class="token attr-name">when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ param. status<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span> full<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        You are a full member    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span></span> <span class="token attr-name">when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span></span> <span class="token attr-name">when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ param, status<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span> student<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        You are a student member    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span></span> <span class="token attr-name">when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span></span> <span class="token attr-name">otherwise</span><span class="token punctuation">></span></span>        Please register    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span></span> <span class="token attr-name">otherwise</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span></span> <span class="token attr-name">choose</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="iterator动作指令"><a href="#iterator动作指令" class="headerlink" title="iterator动作指令"></a>iterator动作指令</h3><p>当需要迭代多次，或者需要迭代一个对象集合时，iterator动作指令就非常好用。JSTL中提供了两个可以执行iterator动作指令的标签：forEach和forTokens。</p><h4 id="forEach标签"><a href="#forEach标签" class="headerlink" title="forEach标签"></a>forEach标签</h4><blockquote><p>forEach是将一个主体内容迭代多次，或者迭代一个对象集合。可以迭代的对象包括所有的java.util.Collection和java.util.Map接口的实现，以及对象或者基本类型的数组。它还可以迭代java.util.lterator和java.util.Enumeration，但不能在多个动作指令中使用Iterator或者Enumeration，因为lterator或Enumeration都不能重置（reset）。</p></blockquote><p>forEach的语法有两种形式。第一种是将body内容重复一定的次数：</p><pre class="line-numbers language-html"><code class="language-html">&lt;c:forEach[var="varName"]begin="begin"end="end"step="step">    body content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种形式用于迭代一个对象集合：</p><pre class="line-numbers language-html"><code class="language-html">&lt;c:forEach items="collection"[var="varName"][varStatus="varStatusName"][begin="begin"][end="end"][step="step"]>    body content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主体内容为JSP</p><p><img src="https://s2.ax1x.com/2019/09/23/uCLEnA.md.png" alt></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>除了定制动作指令之外，JSTL1.1和1.2中还定义了一组标准函数，可以用在EL表达式中。这些函数分组放在函数标签类库中。<br>当使用这些函数时，必须在JSP上使用taglib指令：</p><blockquote><p>&lt;%@taglib uri=”<a href="http://java.sun.com/jsp/jst1/functions&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jst1/functions&quot;</a> prefix=”fn”%&gt;<br>调用函数时，要以下面这种格式来使用EL：</p></blockquote><blockquote><p>${fn:functionName}<br>这里的functionName是函数名称。</p></blockquote><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><h4 id="监听器接口"><a href="#监听器接口" class="headerlink" title="监听器接口"></a>监听器接口</h4><blockquote><p>创建监听器的监听器接口属于javax.servlet和javax.servlet.http包的一部分，详情如下：</p></blockquote><ul><li>javax.servlet.ServletContextListener。这是对Servlet Context生命周期事件做出响应的监听器。创建好Servlet Context时马上会调用它的其中一个方法，并在关闭Servlet Context之前调用它的另一个方法。</li><li>javax.servlet.ServletContextAttributeListener。这是在添加、删除或替换某个Servlet Context属性时采取相应动作的监听器。</li><li>javax.servlet.http.HttpSessionAttributeListener。这是在创建、移除或替换Servlet上下文属性时响应的监听器。</li><li>javax.servlet.htp.HttpSessionAttributeListener。这是在添加、删除或替换某个session 属性时被调用的监听器。</li><li>javax.servlet.httpSessionActivationListener。这是在打开和关闭某个HtpSession时被调用的监听器。</li><li>javax.servlet.http.HttpSessionBindingListener。这是一个类，其实例将被保存为可以实现这个接口的HttpSession属性。当它在HttpSession中被添加或者删除时，实现HttpSessionBindingListener的类实例会收到通知。</li><li>javax.servlet.ServletRequestListener。这是对ServletRequest的创建和删除做出响应的监听器。</li><li>javax.servlet.ServletRequestAttributeListener。当ServletRequest中添加、删除或替换掉某个属性时，会调用该监听器的方法。</li><li>javax.servlet.AsyncListener。用于异步操作的监听器，详情请查看第14章的相关内容。</li></ul><p>创建监听器时，只要创建一个实现相关接口的Java类即可。在Servlet3.0中，注册监听器有两种方法，以便Servlet容器能够认出来。<br>第一种方法是像下面这样使用WebListener注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerClass</span> <span class="token keyword">implements</span> <span class="token class-name">ListenerInterface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注册监听器的第二种方法是在部署描述符中使用一个listener元素：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>fully-qualified listener class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在应用程序中可以想要多少个监听器就可以有多少个监听器。注意，对监听器方法的调用是同步进行的。</p></blockquote><h4 id="Servlet-Context监听器"><a href="#Servlet-Context监听器" class="headerlink" title="Servlet Context监听器"></a>Servlet Context监听器</h4><p>有两个监听器接口：ServletContextListener和ServletContextAttributeListener</p><h5 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h5><blockquote><p>ServletContextListener会对ServletContext的初始化和解构做出响应。ServletContext被初始化时，Servlet容器会在所有已注册的ServletContextListener 中调用contextlnitialized方法，其方法签名如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent event<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当ServletContext要被解构和销毁时，Servlet容器会在所有已注册的ServletContext-Listener 中调用contextDestroyed方法，以下是contextDestroyed的方法签名：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent event<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>contextlnitialized和contextDestroyed都会收到一个来自Servlet容器的ServletContextEvent。java.util.EventObject类的一个派生类：javax.servlet.ServletContextEvent，定义了一个返回<strong>ServletContext的getServletContext方法</strong>：<br>ServletContext getServletContext()</p><p><strong>这个方法很重要，因为这是访问ServletContext的唯一简便方法。它有许多ServletContextListener，可以将属性保存在ServletContext中。</strong></p><h5 id="ServletContextAttributeListener"><a href="#ServletContextAttributeListener" class="headerlink" title="ServletContextAttributeListener"></a>ServletContextAttributeListener</h5><p>每当ServletContext中添加、删除或替换了某个属性时，ServletContextAttributeListener的实现都会收到通知。以下就是在这个监听器接口中定义的三个方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span>ServletContextAttributeEvent event<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span>ServletContextAttributeEvent event<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span>ServletContextAttributeEvent event<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每当ServletContext中添加了某个属性时，Servlet容器就会调用attributeAdded方法。<br>每当ServletContext中删除了某个属性时，则是调用attributeRemoved方法。<br>每当ServletContext被新的代替时，则是调用attributeReplaced方法。<br>所有的监听器方法都会从你获取属性名称和属性值的方法中收到一个ServletContextAttributeEvent实例。</p><h4 id="session监听器"><a href="#session监听器" class="headerlink" title="session监听器"></a>session监听器</h4><blockquote><p>与HtpSession有关的监听器接口有4个：HttpSessionListener、HttpSessionActivationListener、HttpSessionAttributeListener和HttpSessionBindingListener。这些接口都是javax.servlet.http包的成员</p></blockquote><h5 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h5><p>当有HttpSession被创建或者销毁时，Servlet容器就会调用所有已注册的HttpSessionListener。HttpSessionListener中定义的两个方法是sessionCreated和 sessionDestroyed：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span>HttpSessionEvent event<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>HttpSessionEvent event<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两个方法都收到一个HttpSessionEvent实例，它是java.util.Event的派生类。我们可以在HttpSessionEvent中调用getSession方法以获得所创建或销毁的HttpSession。<br>getSession方法签名如下：</p><pre class="line-numbers language-java"><code class="language-java">HttpSession <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="HttpSessionAttributeListener"><a href="#HttpSessionAttributeListener" class="headerlink" title="HttpSessionAttributeListener"></a>HttpSessionAttributeListener</h5><p>HtpSessionAtributeListener就像ServletContextAttributeListener一样，只不过当HttpSession中有添加、删除或者替换属性的时候它才会被调用。<br>下面是HtpSessionAttributeListener接口中定义的方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span>HttpSessionBindingEvent event<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span>HttpSessionBindingEvent event<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span>HttpSessionBindingEvent event<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>由于HttpSessionBindingEvent是HttpSessionEvent的一个子类，因此还可以在HttpSessionAttributeListener类中查到受影响的HttpSession。</p></blockquote><h5 id="HttpSessionActivationListener"><a href="#HttpSessionActivationListener" class="headerlink" title="HttpSessionActivationListener"></a>HttpSessionActivationListener</h5><blockquote><p>在分布式环境中，多个Servlet容器会配置成可伸缩的，为了节省内存，Servlet容器可以对session属性进行迁移或者序列化。一般来说，当内存比较低时，相对较少访问的对象可以序列化到备用存储设备中，这样，Servlet容器就能够注意到哪些session属性的类实现了HttpSessionActivationListener接口。</p></blockquote><h5 id="HttpSessionBindingListener"><a href="#HttpSessionBindingListener" class="headerlink" title="HttpSessionBindingListener"></a>HttpSessionBindingListener</h5><blockquote><p>当HttpSessionBindingListener绑定到HttpSession，或者取消绑定时，都会收到通知。如果一个类想要知道什么时候绑定或取消绑定到HttpSession上，那么这个类要实现HttpSessionBindingListener接口，然后将它的实例保存为session属性。例如，有个对象的类实现了这个接口，当它保存为HttpSession属性时，它就可以自动更新。再比如，一旦HttpSessionBindingListener 与HttpSession取消绑定，它的实现就可以释放占用的资源。</p></blockquote><h4 id="ServletRequest监听器"><a href="#ServletRequest监听器" class="headerlink" title="ServletRequest监听器"></a>ServletRequest监听器</h4><p>在ServletRequest级别上有3个监听器接口：SerletRequestListener、ServletRequestAttributeListener和AsyncListener。</p><h5 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h5><blockquote><p>ServletRequestListener对ServletRequest的创建和销毁做出响应。在Servlet容器中是通过池来重用ServletRequest的，创建ServletRequest花费的时间相当于从池中获取它的时间，ServletRequest销毁时间则相当于它返回到池中的时间。</p></blockquote><p>ServletRequestListener 接口定义了两个方法：requestlnitialized和requestDestroyed，它们的方法签名如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span>ServletRequestEvent event<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span>ServletRequestEvent event<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建（或从池中取出）ServletRequest 时会调用requestinitialized方法，ServletRequest被销毁（或者返回池中）时会调用requestDestroyed方法。这两个方法都会收到一个ServletRequestEvent，通过调用getServletRequest方法，可以从中获取到相应的ServletRequest实例。</p><pre class="line-numbers language-java"><code class="language-java">ServletRequest <span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此外，ServletRequestEvent接口还定义了返回ServletContext的 getServletContext方法，其方法签名如下：</p><pre class="line-numbers language-java"><code class="language-java">ServletContext <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="ServletRequestAttributeListener"><a href="#ServletRequestAttributeListener" class="headerlink" title="ServletRequestAttributeListener"></a>ServletRequestAttributeListener</h5><blockquote><p>当在ServletRequest中添加、删除或者替换某个属性时，会调用ServletRequestAtributeListener。</p></blockquote><p>ServletRequestAttributelListener 接口中定义了3个方法：atrbuteAdded、attributeReplaced和atributeRemoved，这些方法的签名如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">attributeadded</span><span class="token punctuation">(</span>ServletRequestAttributeEvent event<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span>ServletRequestAttributeEvent event<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span>ServletRequestAttributeEvent event<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所有方法都会收到一个ServletRequestAtributeEvent（这是ServletRequestEvent的一个子类）实例。ServletRequestAtributeEvent类通过getName和getValue方法暴露有管属性</p><pre class="line-numbers language-java"><code class="language-java">java<span class="token punctuation">.</span> lang<span class="token punctuation">.</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>java<span class="token punctuation">.</span> lang<span class="token punctuation">.</span> Object <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>过滤器（filter）是指拦截请求，并对传给被请求资源的ServletRequest或ServletResponse进行处理的一个对象。过滤器可以用于登录、加密和解密、会话检查、图片转换，等等。过滤器可以配置为拦截一个或多个资源。</p></blockquote><h4 id="Filter-API"><a href="#Filter-API" class="headerlink" title="Filter API"></a>Filter API</h4><p>接口：Filter，FilterConfig和FilterChain，过滤器必须实现javax.servlet.Filter接口,该接口暴露了3个生命周期方法：init，doFilter和destroy</p><p>init：当过滤器启动服务时，如应用程序启动时，Servlet容器就会调用该方法，该方法只调用一次，并且应该包含该过滤器的初始化代码。init方法的签名如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">init</span> <span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Servlet容器给init方法传递了一个FilterConfig</strong></p><p>每次调用与过滤器相关的资源时，Servlet容器都会调用Filter实例的doFilter方法。该方法会收到一个ServletRequest、ServletResponse 和FilterChain。<br>下面是doFilter方法的签名：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span>ServletResponse response<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>doFilter的实现可以访问ServletRequest和ServletResponse。因此，可以在ServletRequest中添加属性，或者在ServletResponse中添加一个标头。甚至可以对ServletRequest或者ServletResponse进行修饰，改变它们的行为</p></blockquote><p>doFilter方法实现中的最后一行代码应该是调用FilterChain（作为doFilter方法的第三<br>个参数）中的doChain方法：</p><pre class="line-numbers language-java"><code class="language-java">filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个资源可以与多个过滤器（更专业地说，是一条过滤器链）关联，FilterChain.<br>doFilter（）通常会引发调用链中的下一个过滤器被调用。在链中的最后一个过滤器中调用FilterChain.doFilter（）会引发资源本身被调用。</p><blockquote><p>你没有在Filter.doFilter（）方法实现代码的最后调用FilterChain.doFilter（）方法，那么程序的处理将会在这个地方停止，并且不会调用请求。</p></blockquote><p>Filter中的最后一个生命周期方法是destroy，其方法签名如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个方法在过滤器即将终止服务之前，由Servlet容器调用，一般发生在应用程序停止的时候</p><h4 id="过滤器配置"><a href="#过滤器配置" class="headerlink" title="过滤器配置"></a>过滤器配置</h4><p>配置过滤器有两种方法：一种是利用WebFilter注解类型，一种是署描述符中注册它，来配置过滤器。</p><p>例如，以下@WebFilter 注解指定过滤器的名称为DataCompressionFilter，它适用于所有资源</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName<span class="token operator">=</span><span class="token string">"DataCompressionFilter"</span><span class="token punctuation">,</span>urlpatterns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它相当于在部署描述符中声明这些filter和filter-mapping元素。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>DataCompressionFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>        the fully-qualified name of the filter class    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>DataCompresionFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>按照规范，过滤器类的名称必须以Filter结束。</em></strong></p><h4 id="过滤器的顺序"><a href="#过滤器的顺序" class="headerlink" title="过滤器的顺序"></a>过滤器的顺序</h4><p>如果多个过滤器应用于同一个资源，那么调用顺序就很重要，必须用部署描述符管理应该先调用哪一个过滤器。假如Filter1必须在Filter2之前调用，那么在部署描述符中，Filter1的声明就要放在Filter2的声明之前。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Filterl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>        the fully-qualified name of the filter class    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Filter2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>        the fully-qualified name of the filter class    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果没有部署描述符，是不可能管理过滤器调用顺序的。</strong></p><h4 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h4><p>防止直接从浏览器访问JSP页面：</p><ul><li>将页面放在WEB-INF目录下。在WEB-INF下或WEB-INF子目录下的所有内容都是受到保护的</li><li>使用一个Servlet过滤器，过滤JSP页面的请求。</li><li>在部署描述符中使用安全限制。这比使用过滤器要容易许多，因为不需要编写过滤器类。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再遇servlet</title>
      <link href="/2019/09/21/shen-ru-liao-jie-servlet/"/>
      <url>/2019/09/21/shen-ru-liao-jie-servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h1><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="Servlet-API概述"><a href="#Servlet-API概述" class="headerlink" title="Servlet API概述"></a>Servlet API概述</h4><blockquote><p>Servlet技术的核心是Servlet接口，这是所有Servlet类都必须直接或者间接实现的一个接口。当编写实现Servlet接口的Servlet类时，直接实现它；当扩展一个实现这个接口的类时，则间接实现它。</p></blockquote><blockquote><p>用户的请求会引发Servlet 容器调用一个Servlet的service方法，并给这个方法传入一个ServletRequest实例和一个ServletResponse实例。ServletRequest封装当前的HTTP请求，以便Servlet的开发者不必解析和操作原始的HTTP数据。ServletResponse表示当前用户的HTTP响应，它的作用是使得将响应回传给用户更容易。</p></blockquote><h4 id="servlet-1"><a href="#servlet-1" class="headerlink" title="servlet"></a>servlet</h4><p>Servlet接口定义了以下5个方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span><span class="token keyword">throws</span> ServletException <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest request，ServletResponse response<span class="token punctuation">)</span><span class="token keyword">throws</span> ServlctException<span class="token punctuation">,</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ServletConfig <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>init、service和destroy方法属于Servlet生命周期方法。Servlet容器将根据以下原则调用这三个方法：</p><ul><li>init。第一次请求Servlet时，Servlet容器就会调用这个方法。在后续的请求中，将不再调用该方法。可以利用这个方法来编写一些应用程序初始化相关的代码。在调用这个方法时，Servlet容器会传递一个ServletConfig。一般来说，会将ServletConfig赋给一个类级变量，以便Servlet类中的其他方法也可以使用这个对象。</li><li>service。每次请求Servlet时，Servlet容器都会调用这个方法。必须在这里编写要Servlet完成的相应代码。第一次请求Servlet时，Servlet容器会调用init方法和service方法。对于后续的请求，则只调用service方法。</li><li>destroy。要销毁Servlet时，Servlet容器就会调用这个方法。它通常发生在卸载应用程序，或者关闭Servlet容器的时候。一般来说，可以在这个方法中编写一些资源清理相关的代码。</li></ul><p>Servlet中的另外两个方法是非生命周期方法：getServletlnfo和 getServletConfig。</p><ul><li>getServletlnfo。该方法返回Servlet的描述。可以返回可能有用的任意字符串，甚至是null。</li><li>getServletConfig。该方法返回由Servlet容器传给init方法的ServletConfig。</li></ul><blockquote><p>如果你希望某个资源可以被Servlet访问，但是不能被用户访问，那么应该把它放在WEB-INF目录下面。</p></blockquote><h4 id="ServletRequestt"><a href="#ServletRequestt" class="headerlink" title="ServletRequestt"></a>ServletRequestt</h4><p>对于每一个HTTP请求，Servlet容器都会创建一个ServletRequest实例，并将它传给Servlet的service方法。ServletRequest封装有关请求的信息。<br>下面是ServletRequest接口中的部分方法：</p><blockquote><p>public int getcontentLength()<br>返回请求主体中的字节数。如果不知道字节的长度，该方法将返回-1。</p></blockquote><blockquote><p>public java.lang.String getContentType()<br>返回请求主体的MIME类型，如果不知道类型，则返回null。</p></blockquote><blockquote><p>public java.lang.String qetParameter(java.lang.String name)<br>返回指定请求参数的值。</p></blockquote><blockquote><p>public java.lang.String getProtocol()<br>返回这个HTTP请求的协议名称和版本号。</p></blockquote><h4 id="ServletResponse"><a href="#ServletResponse" class="headerlink" title="ServletResponse"></a>ServletResponse</h4><blockquote><p>javax.servlet.ServletResponse接口表示一个Servlet响应。在调用一个Servlet的service方法之前，Servlet容器会先创建一个ServletResponse，并将它作为第二个参数传给service方法。ServletResponse隐藏了将响应发给浏览器的复杂性。</p></blockquote><blockquote><p>ServletResponse中定义的其中一个方法是getWriter方法(还有getOutputStream方法用来传输二进制数据)，它返回可以将文本传给客户端的java.io.PrintWriter。在默认情况下，PrintWriter对象采用ISO-8859-1编码。在将响应发送给客户端时，通常将它作为HTML发送。</p></blockquote><h4 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h4><blockquote><p>在Servlet容器初始化Servlet时，Servlet容器将ServletConfig传给Servlet的init方法。ServletConfig封装可以通过@WebServlet或者部署描述符传给一个Servlet的配置信息。以这种方式传递的每一条信息都称作初始参数。初始参数有两个组成部分：键和值。</p></blockquote><p>为了从一个Servlet内部获取某个初始参数的值，应该在由Servlet容器传给Servlet的init 方法的ServletConfig 中调用getlnitParameter方法。getlnitParameter方法的签名如下：</p><blockquote><p>java.lang.String getInitParameter(java.lang.String name)<br>此外，getlnitParameterNames方法则是返回所有初始参数名称的一个Enumeration：java.util.Enumeration&lt;java.lang.String&gt;getInitParameterNames()</p></blockquote><blockquote><p>例如，要获取contactName参数值，利用这个：<br>String contactName=servletConfig.getInitParameter(“contactName”);</p></blockquote><pre class="line-numbers language-java"><code class="language-java">@ override <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">)</span><span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span>ServletConfig servletConfig<span class="token operator">=</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String admin<span class="token operator">=</span>servletConfig<span class="token punctuation">.</span> <span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String email<span class="token operator">=</span>servletConfig<span class="token punctuation">.</span> <span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> response<span class="token punctuation">.</span> <span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PrintWriter writer<span class="token operator">=</span>response<span class="token punctuation">.</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer<span class="token punctuation">.</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;html>&lt;head>&lt;/head>&lt;body>"</span><span class="token operator">+</span><span class="token string">"Admin:"</span><span class="token operator">+</span>admin<span class="token operator">+</span><span class="token string">"&lt;br/>Email:"</span><span class="token operator">+</span>email<span class="token operator">+</span><span class="token string">"&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在@WebServlet的initParams属性中给Servlet传递了两个参数</p><pre class="line-numbers language-java"><code class="language-java">@ <span class="token function">WebServlet</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"ServletConfigDemoServlet"</span><span class="token punctuation">,</span> urlPatterns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"/servletConfigDemo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     initParams<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"Harry Taciak"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"emai1"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"admin@ example. com"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><blockquote><p>ServletContext表示Servlet应用程序。每个Web应用程序只有一个context。在分布式环境中，一个应用程序同时部署到多个容器中，并且每台Java虚拟机都有一个ServletContext对象。<br>在ServletConfig 中调用getServletContext 方法可以获得 ServletContext。</p></blockquote><p>保存在ServletContext中的对象称作属性（attribute）。<br>ServletContext中的下列方法是用于处理属性的：</p><pre class="line-numbers language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String name<span class="token punctuation">)</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token operator">></span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String name，java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object object<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h4><p>GenericServlet抽象类实现了Servlet和ServletConfig，并完成以下工作：</p><ul><li>将init方法中的ServletConfig赋给一个类级变量，使它可以通过调用getServletConfig来获取。</li><li>为Servlet接口中的所有方法提供默认实现。</li><li>提供方法来包装ServletConfig中的方法。</li></ul><p>GenericServlet 通过在init方法中将ServletConfig对象赋给一个类级变量servlet-Config，实现对ServletConfig的保存。下面就是init方法在GenericServlet中的实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ServletException<span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>servletConfig<span class="token operator">=</span>servletConfig；    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过继承GenericServlet，就不需要覆盖你没计划要修改的那些方法了。唯一覆盖的方法是service()方法，而且不需要亲自保存ServletConfig。<br>但是现在真正使用的还是HttpServlet</p></blockquote><h4 id="Http-Servlet"><a href="#Http-Servlet" class="headerlink" title="Http Servlet"></a>Http Servlet</h4><blockquote><p>HttpServlet 类覆盖javax.servlet.GenericServlet类。在使用HttpServlet时，还要使用HttpServletRequest 和HttpServletResponse对象，它们分别表示Servlet 请求和Servlet响应。HttpServletRequest 接口继承javax.servlet.ServletRequest，HttpServletResponse继承javax.servlet.ServletResponse。<br>HttpServlet 覆盖GenericServlet中的service方法，并用以下签名添加了另一个service方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> service（HttpServletRequest request，HttpServletResponse response）        <span class="token keyword">throws</span> ServletException，java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>这个新的srvice接受的是HttpServletRequest和HttpServletResponse而非ServletRequest和ServletResponse</strong></p></blockquote><p>与往常一样，Servlet容器调用javax.servlet.Servlet中原始的service方法，HttpServlet中的service方法要如下这么写：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest reg，ServletResponse res<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ServletException，IOException<span class="token punctuation">{</span>    HttpServletRequest request；HttpServletResponse response；    <span class="token keyword">try</span><span class="token punctuation">{</span>        request<span class="token operator">=</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>req；response<span class="token operator">=</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span>res；    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ClassCastException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span>（<span class="token string">"non-HTTP request or response"</span>）<span class="token punctuation">;</span>    <span class="token function">service</span><span class="token punctuation">(</span>request，response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原始的service方法将请求和响应对象进行向下转换，分别从Servlet容器转换成HttpServletRequest和HttpServletResponse，并调用新的service方法。</strong></p><h4 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h4><p>HttpServletRequest 表示HTTP环境中的Servlet 请求。它继承 javax.servlet.ServletRequest接口，并增加了几个方法，例如：</p><blockquote><p>java.lang.String getContextPath()<br>返回表示请求context的请求URI部分。</p></blockquote><blockquote><p>Cookie[]getCookies()<br>返回一个Cookie对象数组。</p></blockquote><blockquote><p>java.lang.String getHeader(java.lang.String name)<br>返回指定HTTP标头的值。</p></blockquote><blockquote><p>java.lang.String getMethod()<br>返回发出这条请求的HTTP方法的名称。</p></blockquote><blockquote><p>java.lang.String getQuerystring()<br>返回请求URL中的查询字符串。</p></blockquote><blockquote><p>HttpSession getSession()<br>返回与这个请求有关的session对象。如果没有找到，则创建新的session对象。</p></blockquote><blockquote><p>HttpSession getSession(boolean create)<br>返回与这个请求有关的session对象。如果没有找到，并且create参数为true，那么将创建新的session对象。</p></blockquote><h4 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h4><p>HttpServletResponse表示HTTP环境下的Servlet响应。下面是其中定义的部分方法：</p><blockquote><p>void addCookie(Cookie cookie)<br>给这个响应对象添加cookie。</p></blockquote><blockquote><p>void addleader(java.lang.String name，java.lang.String value)<br>给这个响应对象添加标头。</p></blockquote><blockquote><p>void sendRedirect(java.lang.String location)<br>发送响应代号，将浏览器重定向到指定的位置。</p></blockquote><h4 id="处理HTML表单"><a href="#处理HTML表单" class="headerlink" title="处理HTML表单"></a>处理HTML表单</h4><p>HTML输入域（文本域、隐藏域或密码域）或者文本域的值被当作一个字符串发送到服务器。对于空白的输入域或者文本域将发送一条空白的字符串。因此，带有一个输入域名称的ServletRequest.getParameter将永远不会返回null。</p><p>HTML的select元素还会给标头发送一个字符串。如果没有选择select元素中的任何选项，那么将会发送所显示的选项值。</p><p>对于一个带有多个值的选择元素（即允许多个选项的select元素，用<select multiple>表示）是发送一个字符串数组，并且必须由<strong>ServletRequest.getParameterValues</strong>进行处理。</select></p><p>复选框比较特别一些。被选中的复选框将字符串“on”发送到服务器。没有被选中的复选框则不发送任何内容到服务器，并且<strong>ServletRequest.getParameter（fieldname）</strong>返回null。</p><p>单选按钮将被选按钮的值发送到服务器。如果没有选中任何按钮，则不发送任何内容到服务器，并且<strong>ServletRequest.getParameter（fieldname）</strong>返回null。</p><p>如果一个表单包含多个同名的输入元素，那么所有的值都会提交，必须用<strong>ServletRequest.getParameterValues来获取它们。ServletRequest.getParameter将只返回最后一个值</strong>。</p><h4 id="使用部署描述符"><a href="#使用部署描述符" class="headerlink" title="使用部署描述符"></a>使用部署描述符</h4><p>部署的一个方面是给Servlet映射配置一条路径。前面的例子利用WebServlet注解类型给一个Servlet映射了一条路径。</p><blockquote><p>使用部署描述符是配置Servlet应用程序的另一种方法，。部署描述符总是命名为web.xml，并放在WEB-INF目录下。</p></blockquote><h3 id="Session管理"><a href="#Session管理" class="headerlink" title="Session管理"></a>Session管理</h3><h4 id="2-1网址重写"><a href="#2-1网址重写" class="headerlink" title="2.1网址重写"></a>2.1网址重写</h4><blockquote><p>网址重写是一种Session追踪技术，需要将一个或多个token作为一个查询字符串添加到一个URL中。token的格式一般是键=值：<br>ur1？key-1=value-I&amp;key-2=value-2…&amp;key-n=value-n<br>注意，URL和token之间要用一个问号(?)隔开，两个token之间则是用一个&amp;符号隔开。</p></blockquote><p>如果token不必在过多的URL中四处携带，那么网址重写就比较合适。采用网址重写的缺点如下：</p><ul><li>在有些Web浏览器中，URL限制为2000个字符。</li><li>仅当有链接要插入值时，值才能转换成后面的资源。此外，要把值添加到静态页面的链接中，可不是一件容易的事情。</li><li>网址重写必须在服务器端有效。所有的链接都必须带有值，这样可能出现一个问题，即一个页面中可能会有许多个链接。</li><li>某些字符，例如空格、&amp;符号及问号都必须进行编码。</li><li>添加到URL中的信息是明显可见的，这种情况有时可不是我们所期待的。<br>由于上述局限性，网址重写只适用于那些既需要保持，却又不跨越太多页面，并且又不太重要的信息。</li></ul><h4 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h4><blockquote><p>利用隐藏域来保持状态，与采用网址重写技术类似。但它不是将值添加到URL后面，而是将它们放在HTML表单的隐藏域中。当用户提交表单时，隐藏域中的值也传送到服务器。只有当页面包含表单，或者可以在页面中添加表单时，才适合使用隐藏域。这种技术胜过网址重写技术的地方在于，可以将更多的字符传到服务器，并且不需要进行字符编码。但是像网址重写一样，也只有当要传递的信息不需要跨越多个页面时，才适合使用这种技术。<br>(不懂)</p></blockquote><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><blockquote><p>cookie是自动地在Web服务器和浏览器之间来回传递的一小块信息。cookie适用于那些需要跨越许多页面的信息。由于cookie是作为HTTP标头嵌入的，因此传输它的过程由HTTP协议处理。除此之外，还可以根据自己的需要设置cookie的有效期限。对于Web浏览器而言，每台Web服务器最多可以支持20个cookie。</p></blockquote><p><strong><em>cookie的不足之处在于，用户可以通过修改他/她的浏览器设置来拒绝接受cookie。</em></strong></p><blockquote><p>要创建 cookie，传递一个名称和一个值给Cookie类的构造器：<br>Cookie cookie=new Cookie（name，value）；</p></blockquote><p>例如，要创建一个选择语言的cookie，可以这么写：<br>Cookie languageSelectionCookie=new Cookie(“language”，”Italian”);</p><p><strong>创建Cookie之后，设置domain(域名),path及maxAge(决定cookie的有效期限)等属性</strong></p><blockquote><p>为了将一个cookie发送到浏览器，需在HttpServletResponse上调用add方法：<br>httpServletResponse.addCookie(cookie)；</p></blockquote><blockquote><p>当浏览器再次发出对同一个资源或者对同一台服务器中的不同资源的请求时，它会同时把从Web浏览器处收到的cookie再传回去。</p></blockquote><p>要访问浏览器发出的cookie，</p><ul><li>可以在HttpServletRequest中使用getCookies方法。</li><li>该方法将返回一个Cookie数组，如果请求中没有cookie，将返回null。</li><li>为了找到某个名称的cookie，需要迭代数组。</li></ul><p>删除cookie(没有直接删除cookie的方法)</p><ul><li>创建一个同名的cookie</li><li>将创建好的cookie的马修Age属性设置为0</li><li>在HttpServletResponse添加此cookie</li></ul><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"useraName"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h4><p>用户可以没有或者有一个HttpSession，并且只能访问他/她自己的HttpSession。HttpSession是当一个用户第一次访问某个网站时自动创建的。</p><blockquote><p>通过在HttpServletRequest中调用getSession方法，可以获得用户的HttpSession</p></blockquote><p>getSession有两个重载方法</p><ul><li>HttpSession getSession():返回当前的HttpSession，如果当前没有，则创建一个并返回。</li><li>HttpSession getSession(boolean create):方法getSession（false）方法返回当前的HttpSession（若有），如果没有，则返回null。getSession（true）方法返回当前的HttpSession（若有），如果没有，则新建一个并返回。</li></ul><blockquote><p>HttpSession的setAttribute方法将一个值放在HttpSession中，其方法签名如下：<br>void setAttribute(java.lang.String name，java.lang.object value)</p></blockquote><p><strong>注意，与网址重写、隐藏域和cookie不同的地方在于，放在HttpSession中的值是保存在内存中的。因此，你只能将尽可能小的对象放在里面，并且数量不能太多。即使现代的ervlet容器可以在内存将满时将HttpSession中的对象移到辅助存储设备中，但是这样会影向性能。因此，对于保存在HttpSession里面的内容一定要慎重</strong></p><blockquote><p>添加到HTTP Session中的值不一定是String，也可以是Java的对象，只要实现了java.io.Serializable接口即可，以便servlet容器将保存的对象序列化保存在数据库</p></blockquote><p><strong>setAttribute方法要求不同的对象要有不同的名称。如果传递一个之前用过的属性名称，那么该名称将与旧值无关联，而与新值相关联了。</strong></p><blockquote><p>通过在HttpSession中调用getAttribute方法，同时传递一个属性名称，可以获取HtpSession中保存的对象。这个方法的签名如下：<br>java.lang.Object getAttribute(java.lang.String name)</p></blockquote><blockquote><p>HttpSession中另一个有用的方法是getAttributeNames，它返回一个Enumeration，迭代一个HttpSession中的所有属性：<br>java.util.Enumeration&lt;java.lang.String&gt; getAttributeNames()</p></blockquote><p><strong>注意，HttpSession中保存的值不发送到客户端，这与其他的Session管理方法不同。而是Servlet容器为它所创建的每一个HttpSession生成一个唯一标识符，并将这个标识符作为一个token发送给浏览器，一般是作为一个名为JSESSIONID的cookie，或者作为一个jsessionid参数添加到URL后面。在后续的请求中，浏览器会将这个token发送回服务器，使服务器能够知道是哪个用户在发出请求。无论Servlet 容器选择用哪一种方式传输 session标识符，那都是在后台自动完成的，不需要你去做额外的处理工作。</strong></p><blockquote><p>通过在HttpSession中调用getld方法，可以获取HttpSession的标识符。<br>java.lang.String getId（）</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> servlet </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低频电路</title>
      <link href="/2019/09/17/mo-ni-dian-lu-bi-ji/"/>
      <url>/2019/09/17/mo-ni-dian-lu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="低频电路"><a href="#低频电路" class="headerlink" title="低频电路"></a>低频电路</h1><h3 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h3><h4 id="电子电路中信号的分类"><a href="#电子电路中信号的分类" class="headerlink" title="电子电路中信号的分类"></a>电子电路中信号的分类</h4><blockquote><p>数字信号：离散性<br>模拟信号：连续性。大多数物理量为模拟信号</p></blockquote><h4 id="模拟电路"><a href="#模拟电路" class="headerlink" title="模拟电路"></a>模拟电路</h4><ul><li>模拟电路是对模拟信号进行处理的电路。</li><li>最基本的处理是对信号的放大，有功能和性能各异的放大电路。</li><li>其它模拟电路多以放大电路为基础。</li></ul><h4 id="电子信息系统的组成"><a href="#电子信息系统的组成" class="headerlink" title="电子信息系统的组成"></a>电子信息系统的组成</h4><p><img src="https://s2.ax1x.com/2019/09/17/nIPBMF.png" alt></p><h3 id="半导体二极管"><a href="#半导体二极管" class="headerlink" title="半导体二极管"></a>半导体二极管</h3><h4 id="半导体基础知识"><a href="#半导体基础知识" class="headerlink" title="半导体基础知识"></a>半导体基础知识</h4><h5 id="半导体和本征半导体"><a href="#半导体和本征半导体" class="headerlink" title="半导体和本征半导体"></a>半导体和本征半导体</h5><p><strong>导体：</strong> 导电性介于导体与绝缘体之间的物质<br><strong>半导体：</strong> 硅（Si）、锗（Ge），均为四价元素，它们原子的最外层电子受原子核的束缚力介于导体与绝缘体之间</p><blockquote><p>本征半导体是纯净(无杂质)的晶体结构(稳定的结构)的半导体。</p></blockquote><h5 id="本征半导体的结构"><a href="#本征半导体的结构" class="headerlink" title="本征半导体的结构"></a>本征半导体的结构</h5><p>硅(Si)、锗(Ge)原子结构及简化模型：<br><img src="https://s2.ax1x.com/2019/09/17/nIVtIJ.md.png" alt></p><h5 id="本征半导体中的两种载流子"><a href="#本征半导体中的两种载流子" class="headerlink" title="本征半导体中的两种载流子"></a>本征半导体中的两种载流子</h5><blockquote><p>本征激发:由于热运动，具有足够能量的价电子挣脱共价键的束缚而成为自由电子<br>空穴：自由电子的产生使共价键中留有一个空位置，称为空穴<br>复合：自由电子与空穴相碰同时消失，称为复合</p></blockquote><p><strong>一定温度下，自由电子与空穴对的浓度一定(动态平衡)；温度升高，热运动加剧，挣脱共价键的电子增多，自由电子与空穴对的浓度加大。</strong></p><blockquote><p>运载电荷的粒子称为载流子。空穴的出现是半导体区别于导体的重要特征</p></blockquote><h4 id="杂质半导体"><a href="#杂质半导体" class="headerlink" title="杂质半导体"></a>杂质半导体</h4><h5 id="N型半导体-自由电子是多数载流子"><a href="#N型半导体-自由电子是多数载流子" class="headerlink" title="N型半导体(自由电子是多数载流子)"></a>N型半导体(自由电子是多数载流子)</h5><blockquote><p>杂质半导体主要靠多数载流子导电。掺入杂质越多，多子浓度越高，导电性越强，实现导电性可控。</p></blockquote><ul><li>N 型半导体<ul><li>多子——自由电子</li><li>少子——空穴(五价元素：施主杂质(原子))</li></ul></li></ul><h5 id="P型半导体"><a href="#P型半导体" class="headerlink" title="P型半导体"></a>P型半导体</h5><blockquote><p>P型半导体主要靠空穴导电，掺入杂质越多，空穴浓度越高，导电性越强</p></blockquote><ul><li>P 型半导体<ul><li>多子——空穴(三价元素：受主杂质(原子))</li><li>少子——自由电子</li></ul></li></ul><h5 id="杂质半导体中载流浓度计算"><a href="#杂质半导体中载流浓度计算" class="headerlink" title="杂质半导体中载流浓度计算"></a>杂质半导体中载流浓度计算</h5><p><strong>热平衡条件:多子浓度与少子浓度的乘积=本征半导体载流子浓度ni的平方</strong><br>即得热平衡方程： <img src="https://s2.ax1x.com/2019/09/17/nIKmIU.png" alt><br>其中: n0 电子浓度  p0 空穴浓度  ni 本征载流子浓度<br><strong>电中性条件:多子浓度=参杂浓度+少子浓度;(半导体中的正电荷量=负荷电量)</strong><br><img src="https://s2.ax1x.com/2019/09/17/nIKxyR.png" alt></p><ul><li>杂质半导体载流子浓度<ul><li>多子浓度取决于掺杂浓度</li><li>少子浓度取决于温度</li></ul></li></ul><blockquote><p>★多子浓度近似等于掺杂浓度，与温度无关，少子浓度随温度升高显著增加。<br>★当温度升高，杂质半导体会变成本征半导。</p></blockquote><h4 id="PN结"><a href="#PN结" class="headerlink" title="PN结"></a>PN结</h4><h5 id="PN-结的形成"><a href="#PN-结的形成" class="headerlink" title="PN 结的形成"></a>PN 结的形成</h5><blockquote><p>因电场作用所产生的运动称为漂移运动。<br>物质因浓度差而产生的运动称为扩散运动。</p></blockquote><p><img src="https://s2.ax1x.com/2019/09/17/nIQAEV.md.png" alt></p><p>空间电荷区：耗尽层、阻挡层、势垒区</p><h5 id="总结PN-结形成的物理过程"><a href="#总结PN-结形成的物理过程" class="headerlink" title="总结PN 结形成的物理过程"></a>总结PN 结形成的物理过程</h5><p><img src="https://s2.ax1x.com/2019/09/17/nIQt8e.png" alt></p><h5 id="正向特性"><a href="#正向特性" class="headerlink" title="正向特性"></a>正向特性</h5><blockquote><p>PN结正偏 — 阻挡层变薄 — 内建电场减弱 — 多子扩散&gt;&gt;少子漂移 — 多子扩散形成较大的正向电流I — PN结导通</p></blockquote><h5 id="反向特性"><a href="#反向特性" class="headerlink" title="反向特性"></a>反向特性</h5><blockquote><p>PN结反偏—阻挡层变宽—内建电场增强—少子漂流&gt;&gt;多子扩散—少子漂流形成微小的反向电流I—PN结截止<br>结论：PN 结具有单方向导电特性。</p></blockquote><h5 id="PN结的电流方程"><a href="#PN结的电流方程" class="headerlink" title="PN结的电流方程"></a>PN结的电流方程</h5><p>PN 结正、反向特性，可用理想的指数函数来描述：<br><img src="https://s2.ax1x.com/2019/09/17/nIlPRe.png" alt></p><h5 id="PN-结的伏安特性及击穿特性"><a href="#PN-结的伏安特性及击穿特性" class="headerlink" title="PN 结的伏安特性及击穿特性"></a>PN 结的伏安特性及击穿特性</h5><p><img src="https://s2.ax1x.com/2019/09/17/nI17jJ.md.png" alt></p><h5 id="PN-结的电容效应"><a href="#PN-结的电容效应" class="headerlink" title="PN 结的电容效应"></a>PN 结的电容效应</h5><p><strong>1. 势垒电容（反偏）</strong><br>势垒区内空间电荷量随外加电压变化产生的电容效应，其等效电容称为势垒电容Cb。<br><strong>扩散电容（正偏）</strong><br>阻挡层外(P 区和 N 区)贮存的非平衡电荷量,随外加电压变化产生的电容效应，其等效电容称为扩散电容Cd</p><h4 id="半导体二极管-1"><a href="#半导体二极管-1" class="headerlink" title="半导体二极管"></a>半导体二极管</h4><blockquote><p>将PN结封装，引出两个电极，就构成了二极管</p></blockquote><h5 id="二极管的结构"><a href="#二极管的结构" class="headerlink" title="二极管的结构"></a>二极管的结构</h5><table><thead><tr><th>结构类型</th><th>特点</th></tr></thead><tbody><tr><td>点接触型</td><td>结面积小，结电容小，故结允许的电流小，最高工作频率高</td></tr><tr><td>面接触型</td><td>结面积大，结电容大，故结允许的电流大，最高工作频率低</td></tr><tr><td>平面型</td><td>结面积可小、可大，小的工作频率高，大的结允许的电流大</td></tr></tbody></table><h5 id="二极管的伏安特性"><a href="#二极管的伏安特性" class="headerlink" title="二极管的伏安特性"></a>二极管的伏安特性</h5><p><img src="https://s2.ax1x.com/2019/09/17/nIGu0s.md.png" alt></p><h5 id="简化电路模型"><a href="#简化电路模型" class="headerlink" title="简化电路模型"></a>简化电路模型</h5><p><img src="https://s2.ax1x.com/2019/09/23/uif9N4.png" alt></p><ul><li>折线等效：在主要利用二极管单向导电性的电路中，实际二极管的伏安特性。</li><li>理想状态：与外电路相比，Vo（on）和Rn均可忽略时，二极管的伏安特性和电路符号。</li><li>开关状态：与外电路相比，Rp可忽略时的伏安特性。</li><li>简化电路模型：折线等效时，二极管的简化电路模型。</li></ul><h5 id="小信号电路模型"><a href="#小信号电路模型" class="headerlink" title="小信号电路模型"></a>小信号电路模型</h5><blockquote><p>当二极管在静态基础上有一动态信号作用时，则可将二极管等效为一个电阻，称为动态电阻</p></blockquote><p><img src="https://s2.ax1x.com/2019/09/23/uif2aF.md.png" alt></p><h4 id="晶体二极管电路分析方法"><a href="#晶体二极管电路分析方法" class="headerlink" title="晶体二极管电路分析方法"></a>晶体二极管电路分析方法</h4><p>分析二极管电路主要采用：<strong>图解法、简化分析法、小信号等效电路法</strong>。（重点掌握简化分析法）</p><h5 id="图像法"><a href="#图像法" class="headerlink" title="图像法"></a>图像法</h5><blockquote><p>利用二极管曲线模型和管外电路所确定的负载线，通过作图的方法进行求解。<br><strong><em>要求：已知二极管伏安特性曲线和外围电路元件值。</em></strong></p></blockquote><p>分析步骤：</p><ul><li>写出管外电路直流负载线方程</li><li>作直流负载线</li><li>分析直流工作点</li></ul><p><img src="https://s2.ax1x.com/2019/09/23/uihNsx.md.png" alt></p><h5 id="简化分析法"><a href="#简化分析法" class="headerlink" title="简化分析法"></a>简化分析法</h5><blockquote><p>即将电路中二极管用简化电路模型代替，利用所得到的简化电路进行分析、求解。<br>（1）估算法</p></blockquote><p>假设电路中二极管全部开路，分析其两端的电位。(判断出二极管是导通还是截止)</p><ul><li>理想二极管：若V&gt;0，则管子导通；反之截止。</li><li>实际二极管：若V&gt;Vo（on），管子导通；反之截止。</li></ul><p>当电路中存在多个二极管时，正偏电压最大的管子优先导通。其余管子需重新分析其工作状态。<br><strong>将截止的二极管开路，导通的二极管用直流简化电路模型替代，然后分析求解。</strong></p><p>(2)画输出信号波形方法<br>根据输入信号大小—》判断二极管的导通与截止—》找出 vo 与 vi 关系—》画输出信号波形。</p><h3 id="晶体三极管"><a href="#晶体三极管" class="headerlink" title="晶体三极管"></a>晶体三极管</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>晶体管有三个极、三个区、两个PN结(NPN型)(PNP型)</p><h5 id="三极管内部结构特点"><a href="#三极管内部结构特点" class="headerlink" title="三极管内部结构特点"></a>三极管内部结构特点</h5><ul><li>发射区高掺杂（相对于基区）</li><li>基区很薄</li><li>集电结面积大</li></ul><h5 id="三极管三种工作模式"><a href="#三极管三种工作模式" class="headerlink" title="三极管三种工作模式"></a>三极管三种工作模式</h5><ul><li>放大模式：发射结正偏，集电结反偏</li><li>饱和模式：发射结正偏，集电结正偏</li><li>截止模式：发射结反偏，集电结反偏</li></ul><blockquote><p>注意：三极管具有正向受控作用，除了满足内部结构特点外，还必须满足放大模式的外部工作条件</p></blockquote><h4 id="放大模式下三极管工作原理"><a href="#放大模式下三极管工作原理" class="headerlink" title="放大模式下三极管工作原理"></a>放大模式下三极管工作原理</h4><h5 id="三极管特性——具有正向受控作用"><a href="#三极管特性——具有正向受控作用" class="headerlink" title="三极管特性——具有正向受控作用"></a>三极管特性——具有正向受控作用</h5><blockquote><p>即三极管输出的集电极电流 IC ，主要受正向发射结电压 VBE 的控制，而与反向集电结电压 VCE 近似无关</p></blockquote><p><strong>注意：NPN 型管与 PNP 型管工作原理相似，但由于它们形成电流的载流子性质不同，结果导致各极电流方向相反，加在各极上的电压极性相反</strong></p><h5 id="电流传输方程"><a href="#电流传输方程" class="headerlink" title="电流传输方程"></a>电流传输方程</h5><p>三极管的三种连接方式——三种组态<br><img src="https://s2.ax1x.com/2019/09/23/uiHdc4.png" alt></p><h5 id="放大模式下三极管的模型"><a href="#放大模式下三极管的模型" class="headerlink" title="放大模式下三极管的模型"></a>放大模式下三极管的模型</h5><p>数学模型(指数模型)<br>三极管的正向受控作用，服从指数函数关系式：<br><img src="https://s2.ax1x.com/2019/09/23/uib3xe.png" alt></p><blockquote><p>IS 指发射结反向饱和电流 IEBS 转化到集电极上的电流值，它不同于二极管的反向饱和电流 IS</p></blockquote><h5 id="放大模式直流简化电路模型"><a href="#放大模式直流简化电路模型" class="headerlink" title="放大模式直流简化电路模型"></a>放大模式直流简化电路模型</h5><p><img src="https://s2.ax1x.com/2019/09/23/uibNVI.md.png" alt></p><h3 id="晶体三极管的其他工作模式"><a href="#晶体三极管的其他工作模式" class="headerlink" title="晶体三极管的其他工作模式"></a>晶体三极管的其他工作模式</h3><h4 id="饱和模式-E-结正偏，C-结正偏"><a href="#饱和模式-E-结正偏，C-结正偏" class="headerlink" title="饱和模式(E 结正偏，C 结正偏)"></a>饱和模式(E 结正偏，C 结正偏)</h4><blockquote><p>三极管失去正向受控作用。</p></blockquote><h5 id="饱和模式直流简化电路模型"><a href="#饱和模式直流简化电路模型" class="headerlink" title="饱和模式直流简化电路模型"></a>饱和模式直流简化电路模型</h5><p><img src="https://s2.ax1x.com/2019/09/23/uiO6qH.md.png" alt></p><h4 id="截止模式-E-结反偏，C-结反偏"><a href="#截止模式-E-结反偏，C-结反偏" class="headerlink" title="截止模式(E 结反偏，C 结反偏)"></a>截止模式(E 结反偏，C 结反偏)</h4><blockquote><p>若忽略反向饱和电流，三极管 IB约等于0，IC约等于0，即三极管工作于截止模式时，相当于开关断开</p></blockquote><h5 id="截止模式直流简化电路模型"><a href="#截止模式直流简化电路模型" class="headerlink" title="截止模式直流简化电路模型"></a>截止模式直流简化电路模型</h5><p><img src="https://s2.ax1x.com/2019/09/23/uiXsf0.md.png" alt></p><h3 id="晶体三极管伏安特性曲线"><a href="#晶体三极管伏安特性曲线" class="headerlink" title="晶体三极管伏安特性曲线"></a>晶体三极管伏安特性曲线</h3><blockquote><p>伏安特性曲线是三极管通用的曲线模型，它适用于任何工作模式。<br><img src="https://s2.ax1x.com/2019/09/23/uijBuD.md.png" alt></p></blockquote><h4 id="输入特性曲线"><a href="#输入特性曲线" class="headerlink" title="输入特性曲线"></a>输入特性曲线</h4><ul><li>VCE 一定：类似二极管伏安特性</li><li>VCE 增加：正向特性曲线略右移</li></ul><p><img src="https://s2.ax1x.com/2019/09/23/uFSnZF.png" alt></p><p><img src="https://s2.ax1x.com/2019/09/23/uFShJs.md.png" alt></p><blockquote><p>注：VCE &gt; 0.3 V 后，曲线移动可忽略不计</p></blockquote><h4 id="输出特性曲线"><a href="#输出特性曲线" class="headerlink" title="输出特性曲线"></a>输出特性曲线</h4><blockquote><p>输出特性曲线可划分为四个区域：饱和区、放大区、截止区、击穿区。<br><img src="https://s2.ax1x.com/2019/09/23/uFp9OK.png" alt></p></blockquote><h5 id="饱和区-VBE大于等于0-7-V-VCE小于0-3-V"><a href="#饱和区-VBE大于等于0-7-V-VCE小于0-3-V" class="headerlink" title="饱和区(VBE大于等于0.7 V,VCE小于0.3 V)"></a>饱和区(VBE大于等于0.7 V,VCE小于0.3 V)</h5><p>条件：发射结正偏，集电结正偏<br>特点：IC 不受 IB 控制，而受 VCE 影响，VCE 略增，IC 显著增加</p><h5 id="放大区-VBE大于等于0-7-V，-VCE大于0-3-V"><a href="#放大区-VBE大于等于0-7-V，-VCE大于0-3-V" class="headerlink" title="放大区(VBE大于等于0.7 V， VCE大于0.3 V)"></a>放大区(VBE大于等于0.7 V， VCE大于0.3 V)</h5><p><img src="https://s2.ax1x.com/2019/09/23/uF999s.md.png" alt></p><h5 id="截止区-VBE小于等于0-5-V，-VCE大于等于0-3-V"><a href="#截止区-VBE小于等于0-5-V，-VCE大于等于0-3-V" class="headerlink" title="截止区(VBE小于等于0.5 V， VCE大于等于0.3 V)"></a>截止区(VBE小于等于0.5 V， VCE大于等于0.3 V)</h5><p><img src="https://s2.ax1x.com/2019/09/23/uF9DDf.md.png" alt></p><h5 id="击穿区"><a href="#击穿区" class="headerlink" title="击穿区"></a>击穿区</h5><blockquote><p>特点：VCE 增大到一定值时，集电结反向击穿，IC 急剧增大,注意：集电结反向击穿电压，随 IB 的增大而减小<br><img src="https://s2.ax1x.com/2019/09/25/uZffsJ.md.png" alt></p></blockquote><h5 id="三极管安全工作区"><a href="#三极管安全工作区" class="headerlink" title="三极管安全工作区"></a>三极管安全工作区</h5><p><img src="https://s2.ax1x.com/2019/09/25/uZhPW8.md.png" alt></p><h4 id="晶体三极管小信号电路模型"><a href="#晶体三极管小信号电路模型" class="headerlink" title="晶体三极管小信号电路模型"></a>晶体三极管小信号电路模型</h4><p><img src="https://s2.ax1x.com/2019/09/25/uZhKYV.png" alt></p><h5 id="小信号电路参数"><a href="#小信号电路参数" class="headerlink" title="小信号电路参数"></a>小信号电路参数</h5><p><img src="https://s2.ax1x.com/2019/09/25/uZhaY6.md.png" alt></p><p><img src="https://s2.ax1x.com/2019/09/25/uZhjpT.md.png" alt></p><blockquote><p>注意：小信号电路模型只能用来分析叠加在 Q 点上各交流量之间的相互关系，不能分析直流参量</p></blockquote><h3 id="晶体三极管电路分析方法"><a href="#晶体三极管电路分析方法" class="headerlink" title="晶体三极管电路分析方法"></a>晶体三极管电路分析方法</h3><blockquote><p>由于交流信号均叠加在静态工作点上，且交流信号幅度很小，因此对工作在放大模式下的电路进行分析时，应先进行直流分析，后进行交流分析</p></blockquote><ul><li><p>直流分析法</p><ul><li>分析指标：IBQ、ICQ、VCEQ</li><li>分析方法：图解法、估算法 </li></ul></li><li><p>交流分析法</p><ul><li>分析指标：Av 、Ri 、Ro</li><li>分析方法：图解法、微变等效电路法</li></ul></li></ul><h4 id="直流分析法"><a href="#直流分析法" class="headerlink" title="直流分析法"></a>直流分析法</h4><h5 id="图解法"><a href="#图解法" class="headerlink" title="图解法"></a>图解法</h5><blockquote><p>要求：已知三极管特性曲线和管外电路元件参数</p></blockquote><p>图解法分析步骤：</p><ul><li><p>由电路输入特性确定 IBQ </p><ul><li>写出管外输入回路直流负载线方程 (VBE - IB)</li><li>在输入特性曲线上作直流负载线</li><li>找出对应交点，得 IBQ 与 VBEQ</li></ul></li><li><p>由电路输出特性确定  ICQ 与 VCEQ </p><ul><li>写出管外输出回路直流负载线方程(VCE - IC)</li><li>在输出特性曲线上作直流负载线</li><li>找出负载线与特性曲线中 IB = IBQ 曲线的交点，即 Q 点，得到 ICQ 与 VCEQ</li></ul></li></ul><p><img src="https://s2.ax1x.com/2019/09/25/uZ4B40.md.png" alt></p><h5 id="工程近似法–估算法"><a href="#工程近似法–估算法" class="headerlink" title="工程近似法–估算法"></a>工程近似法–估算法</h5><p><img src="https://s2.ax1x.com/2019/09/25/uZ4fER.md.png" alt></p><p>一个例子<br><img src="https://s2.ax1x.com/2019/09/25/uZTVIA.md.png" alt></p><h4 id="交流分析法"><a href="#交流分析法" class="headerlink" title="交流分析法"></a>交流分析法</h4><blockquote><p>分析电路加交流输入信号后，叠加在 Q 点上的电压与电流变化量之间的关系。</p></blockquote><h5 id="小信号等效电路法-微变等效电路法"><a href="#小信号等效电路法-微变等效电路法" class="headerlink" title="小信号等效电路法(微变等效电路法)"></a>小信号等效电路法(微变等效电路法)</h5><p>在交流通路基础上，将三极管用小信号电路模型代替得到的线性等效电路即小信号等效电路。利用该等效电路分析 Av 、Ri 、Ro 的方法即小信号等效电路法。</p><blockquote><p>交流通路：即交流信号流通的路径。它是将直流电源短路、耦合、旁路电容短路时对应的电路</p></blockquote><p>小信号等效电路法分析步骤：</p><ul><li>画交流通路(直流电源短路，耦合、旁路电容短路)</li><li>用小信号电路模型代替三极管，得小信号等效电路</li><li>计算微变参数 gm、rbe</li><li>利用小信号等效电路分析交流指标</li></ul><p><strong>注意：小信号等效电路只能用来分析交流量的变化规律及动态性能指标，不能分析静态工作点</strong></p><h5 id="输入正弦信号时，画各极电压与电流的波形"><a href="#输入正弦信号时，画各极电压与电流的波形" class="headerlink" title="输入正弦信号时，画各极电压与电流的波形"></a>输入正弦信号时，画各极电压与电流的波形</h5><p><img src="https://s2.ax1x.com/2019/09/25/uZ736K.md.png" alt></p><h5 id="Q-点位置与波形失真："><a href="#Q-点位置与波形失真：" class="headerlink" title="Q 点位置与波形失真："></a>Q 点位置与波形失真：</h5><p><img src="https://s2.ax1x.com/2019/09/25/uZ7tTH.png" alt></p><h3 id="晶体三极管应用原理"><a href="#晶体三极管应用原理" class="headerlink" title="晶体三极管应用原理"></a>晶体三极管应用原理</h3><h4 id="电流源"><a href="#电流源" class="headerlink" title="电流源"></a>电流源</h4><blockquote><p>利用三极管放大区 iB 恒定时 iC 接近恒流的特性，可构成集成电路中广泛采用的一种单元电路——电流源</p></blockquote><p><img src="https://s2.ax1x.com/2019/09/25/uZ7ynS.png" alt></p><p>该电流源不是普通意义上的电流源，因它本身不提供能量。电流源电路的输出电流 I０，由外电路中的直流电源提供。<br>I０ 只受 IB 控制，与外电路在电流源两端呈现的电压大小几乎无关。就这个意义而言，将其看作为电流源</p><h4 id="放大器"><a href="#放大器" class="headerlink" title="放大器"></a>放大器</h4><p>放大器的作用就是将输入信号进行不失真的放大</p><h5 id="放大原理"><a href="#放大原理" class="headerlink" title="放大原理"></a>放大原理</h5><p><img src="https://s2.ax1x.com/2019/09/25/uZ7qAJ.png" alt><br>电源提供的功率 PD 除了转换成负载上有用的输出功率 PL  外，其余均消耗在晶体三极管上( PC )</p><blockquote><p>放大器放大信号的实质：是利用三极管的正向受控作用，将电源 VCC 提供的直流功率，部分地转换为输出功率。</p></blockquote><p><strong>电源 VCC 不仅要为三极管提供偏置，保证管子工作在放大区，同时还是整个电路的能源</strong><br><strong><em>三极管仅是一个换能器</em></strong></p><h3 id="放大器基础"><a href="#放大器基础" class="headerlink" title="放大器基础"></a>放大器基础</h3><p>放大器是应用最广泛的一类电子线路。它的主要功能是将输入信号进行高效，不失真的放大</p><p>放大器组成框图<br><img src="https://s2.ax1x.com/2019/09/30/uYgAPS.png" alt></p><h3 id="偏置电路和耦合方式"><a href="#偏置电路和耦合方式" class="headerlink" title="偏置电路和耦合方式"></a>偏置电路和耦合方式</h3><h4 id="偏置电路"><a href="#偏置电路" class="headerlink" title="偏置电路"></a>偏置电路</h4><blockquote><p>设置静态工作点的电路称放大器的偏置电路(保证半导体器件工作在放大模式)</p></blockquote><h5 id="对偏置电路的要求"><a href="#对偏置电路的要求" class="headerlink" title="对偏置电路的要求"></a>对偏置电路的要求</h5><ul><li>提供合适的 Q 点，保证器件工作在放大模式(偏置电路须保证三极管 E 结正偏、C 结反偏  Vc&gt;Vb&gt;Ve)</li><li>当环境温度等因素变化时，能稳定电路的 Q 点</li></ul><p>Q 点波动对输出波形的影响：</p><ul><li>Q 点在中点，动态范围最大，输出波形不易失真</li><li>Q 点升高，不失真动态范围减小，输出易饱和失真</li><li>Q 点降低，不失真动态范围减小，输出易截止失真</li></ul><h5 id="固定偏流电路"><a href="#固定偏流电路" class="headerlink" title="固定偏流电路"></a>固定偏流电路</h5><p><img src="https://s2.ax1x.com/2019/09/30/uYIsKS.png" alt><br><img src="https://s2.ax1x.com/2019/09/30/uYITrF.md.png" alt></p><h5 id="分压偏置电路"><a href="#分压偏置电路" class="headerlink" title="分压偏置电路"></a>分压偏置电路</h5><p><img src="https://s2.ax1x.com/2019/09/30/uY77qS.png" alt><br><img src="https://s2.ax1x.com/2019/09/30/uY7v2q.md.png" alt><br><img src="https://s2.ax1x.com/2019/09/30/uYqa5Q.md.png" alt></p><h5 id="耦合方式"><a href="#耦合方式" class="headerlink" title="耦合方式"></a>耦合方式</h5><p>放大器与信号源、放大器与负载以及放大器级与级之间的连接方式称为耦合方式</p><p>为保证交流信号正常传输、不失真放大，耦合方式必须保证:</p><ul><li>交流信号正常传输</li><li>尽量减小有用信号在传输过程中的损失</li></ul><h5 id="电容耦合"><a href="#电容耦合" class="headerlink" title="电容耦合"></a>电容耦合</h5><p><img src="https://s2.ax1x.com/2019/09/30/uYzqX9.png" alt></p><blockquote><p>直流工作时：由于Cb,Cc具有隔直流作用，因此信号源不影响放大器,因此信号源不影响放大器 Q 点正常设置，且各级 Q 点相互独立</p></blockquote><blockquote><p>交流工作时：由于 Cb较大，在信号频率上近似看作短路。因此,Cb的接入不会影响信号的正常传输</p></blockquote><p>电路缺点：体积大，不易集成</p><h5 id="直接耦合"><a href="#直接耦合" class="headerlink" title="直接耦合"></a>直接耦合</h5><p><img src="https://s2.ax1x.com/2019/09/30/ut99Ld.md.png" alt></p><p>直接耦合方式：各级之间不经过任何元件直接相连<br>电路优点：频率特性好，便于集成</p><ul><li>存在问题：<ul><li>级间直流电平配置问题</li><li>零点漂移问题</li></ul></li></ul><blockquote><p><img src="https://s2.ax1x.com/2019/09/30/utCZA1.md.png" alt><br><img src="https://s2.ax1x.com/2019/09/30/utCH4x.png" alt></p></blockquote><p>采用 PNP 管的电平位移电路：<br><img src="https://s2.ax1x.com/2019/09/30/utPC5t.png" alt></p><p>放大模式 NPN 管 VCQ1&gt;VBQ1<br>放大模式 PNP 管 VCQ2&lt;VBQ2 = VCQ1</p><blockquote><p>利用 NPN 管与 PNP 管电位极性相反的特点，将直流电平下移，扩大后级的输出动态范围</p></blockquote><h4 id="放大器的性能指标"><a href="#放大器的性能指标" class="headerlink" title="放大器的性能指标"></a>放大器的性能指标</h4><p>就信号而言，各种小信号放大器均可统一表示为有源线性四端网络：<br><img src="https://s2.ax1x.com/2019/10/11/uq2pp8.png" alt><br>反映放大器性能的主要指标有：输入电阻 Ri 、输出电阻 R0、增益 A。</p><h4 id="输入电阻、输出电阻、增益"><a href="#输入电阻、输出电阻、增益" class="headerlink" title="输入电阻、输出电阻、增益"></a>输入电阻、输出电阻、增益</h4><h5 id="输入电阻"><a href="#输入电阻" class="headerlink" title="输入电阻"></a>输入电阻</h5><blockquote><p>对输入信号源而言，放大器相当于它的一个负载，而这个等效负载电阻就是放大器输入电阻 Ri ,我们希望该电阻可以尽量大，以分到更多的电压<br><img src="https://s2.ax1x.com/2019/10/11/uqWpLQ.png" alt></p></blockquote><p><img src="https://s2.ax1x.com/2019/10/11/uqWAJ0.png" alt></p><p>上式中，Ri 表示本级电路对输入信号源的影响程度</p><h5 id="输出电阻"><a href="#输出电阻" class="headerlink" title="输出电阻"></a>输出电阻</h5><blockquote><p>对输出负载而言(根据戴维宁定理和诺顿定理)，任何放大器均可看作它的信号源，该信号源内阻即放大器输出电阻 Ro<br><img src="https://s2.ax1x.com/2019/10/11/uqWaeH.png" alt></p></blockquote><blockquote><p>vot ：负载开路时 vi 或 ii  在电路输出端产生的开路电压<br>ion ：负载短路时 vi 或 ii  在电路输出端产生的短路电流</p></blockquote><p>输出电阻 Ro 计算：<br><img src="https://s2.ax1x.com/2019/10/11/uqfpp6.md.png" alt></p><h5 id="小信号放大器四种电路模型"><a href="#小信号放大器四种电路模型" class="headerlink" title="小信号放大器四种电路模型"></a>小信号放大器四种电路模型</h5><p><img src="https://s2.ax1x.com/2019/10/11/uqfk0H.png" alt></p><h5 id="增益-放大倍数"><a href="#增益-放大倍数" class="headerlink" title="增益(放大倍数)"></a>增益(放大倍数)</h5><p><img src="https://s2.ax1x.com/2019/10/11/uqfRgK.png" alt="放大器的增益"></p><blockquote><p>即放大器输出信号变化量与输入信号变化量的比值。</p></blockquote><h5 id="电压放大器"><a href="#电压放大器" class="headerlink" title="电压放大器"></a>电压放大器</h5><p><img src="https://s2.ax1x.com/2019/10/11/uqf74I.md.png" alt></p><h5 id="电流放大器"><a href="#电流放大器" class="headerlink" title="电流放大器"></a>电流放大器</h5><p><img src="https://s2.ax1x.com/2019/10/11/uq4AJI.md.png" alt></p><h5 id="互导放大器"><a href="#互导放大器" class="headerlink" title="互导放大器"></a>互导放大器</h5><p><img src="https://s2.ax1x.com/2019/10/11/uq4MwQ.png" alt="互导增益"></p><h5 id="互阻放大器"><a href="#互阻放大器" class="headerlink" title="互阻放大器"></a>互阻放大器</h5><p><img src="https://s2.ax1x.com/2019/10/11/uq41Fs.png" alt="互阻增益"></p><h5 id="理想放大器性能特点"><a href="#理想放大器性能特点" class="headerlink" title="理想放大器性能特点"></a>理想放大器性能特点</h5><p><img src="https://s2.ax1x.com/2019/10/11/uq4YlV.png" alt></p><h5 id="多级放大器"><a href="#多级放大器" class="headerlink" title="多级放大器"></a>多级放大器</h5><p><img src="https://s2.ax1x.com/2019/10/11/uq4Bk9.png" alt></p><h4 id="放大器的失真"><a href="#放大器的失真" class="headerlink" title="放大器的失真"></a>放大器的失真</h4><blockquote><p>放大器的失真是指输出信号不能重现输入信号波形的一种物理现象</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 模拟电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架入门</title>
      <link href="/2019/09/06/java-kuang-jia-spring/"/>
      <url>/2019/09/06/java-kuang-jia-spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h3 id="Spring-概述"><a href="#Spring-概述" class="headerlink" title="Spring 概述"></a>Spring 概述</h3><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，<br>通过启用基于 POJO 编程模型来促进良好的编程实践。</p><h4 id="使用Spring框架的好处"><a href="#使用Spring框架的好处" class="headerlink" title="使用Spring框架的好处"></a>使用Spring框架的好处</h4><ul><li>Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了</li><li>Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</li><li>Spring提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）。</li></ul><h4 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h4><p>Spring 最认同的技术是控制反转的依赖注入（DI）模式。控制反转（IoC）是一个通用的概念<br>IOC 反转控制 是Spring的基础，<strong>Inversion Of Control</strong><br>简单说就是创建对象由以前的程序员自己new 构造方法来调用，变成了交由Spring创建对象<br>DI 依赖注入 <strong>Dependency Inject</strong>. 简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。</p><h4 id="面向方面的程序设计（AOP）"><a href="#面向方面的程序设计（AOP）" class="headerlink" title="面向方面的程序设计（AOP）"></a>面向方面的程序设计（AOP）</h4><p>Spring 框架的一个关键组件是<strong>面向方面的程序设计（AOP）框架</strong>。一个程序中跨越多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样常见的很好的关于方面的例子，比如日志记录、声明性事务、安全性，和缓存等等。<br>在 OOP 中模块化的关键单元是类，而在 AOP 中模块化的关键单元是方面。AOP 帮助你将横切关注点从它们所影响的对象中分离出来，然而依赖注入帮助你将你的应用程序对象从彼此中分离出来。</p><h3 id="Spring-体系结构"><a href="#Spring-体系结构" class="headerlink" title="Spring 体系结构"></a>Spring 体系结构</h3><h4 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h4><p>Spring 有可能成为所有企业应用程序的一站式服务点，然而，Spring 是模块化的，允许你挑选和选择适用于你的模块，不必要把剩余部分也引入<br><img src="https://s2.ax1x.com/2019/09/06/nMxRJJ.png" alt></p><center>Spring 是模块化</center><h5 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h5><p>核心容器由<em>spring-core</em>，<em>spring-beans</em>，<em>spring-context</em>，<em>spring-context-support</em>和<em>spring-expression（SpEL，Spring表达式语言，Spring Expression Language）</em>等模块组成</p><h5 id="数据访问-集成"><a href="#数据访问-集成" class="headerlink" title="数据访问/集成"></a>数据访问/集成</h5><p>数据访问/集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块，<br><code>（注：JDBC=Java Data Base Connectivity，ORM=Object Relational Mapping，OXM=Object XML Mapping，JMS=Java Message Service）</code></p><h5 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h5><p>Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成</p><h3 id="Hello-Spring"><a href="#Hello-Spring" class="headerlink" title="Hello Spring"></a>Hello Spring</h3><h4 id="导入所需要的jar包"><a href="#导入所需要的jar包" class="headerlink" title="导入所需要的jar包"></a>导入所需要的jar包</h4><p><img src="https://s2.ax1x.com/2019/09/06/nQ9CTK.png" alt></p><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hbr<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hbr<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>how2java<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Category<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpring</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Category c <span class="token operator">=</span> <span class="token punctuation">(</span>Category<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>   http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   http://www.springframework.org/schema/tx   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hbr.bean.Category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category 1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-IoC-容器"><a href="#Spring-IoC-容器" class="headerlink" title="Spring IoC 容器"></a>Spring IoC 容器</h3><p>Spring 容器是 Spring 框架的核心。容器将创建对象，把它们连接在一起，配置它们，并管理他们的整个生命周期从创建到销毁。Spring 容器使用依赖注入（DI）来管理组成一个应用程序的组件。这些对象被称为 Spring Beans<br>通过阅读配置元数据提供的指令，容器知道对哪些对象进行实例化，配置和组装。配置元数据可以通过 XML，Java 注释或 Java 代码来表示。下图是 Spring 如何工作的高级视图。 Spring IoC 容器利用 Java 的 POJO 类和配置元数据来生成完全配置和可执行的系统或应用程序。<br><strong>IOC 容器</strong>具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。通常new一个实例，控制权由程序员控制，而”控制反转”是指new实例工作不由程序员来做而是交给Spring容器来做。在Spring中BeanFactory是IOC容器的实际代表者。<br><img src="https://atts.w3cschool.cn/attachments/image/wk/wkspring/ioc1.jpg" alt><br><strong>Spring 提供了两种不同类型的容器</strong></p><ul><li>Spring BeanFactory 容器</li><li>Spring ApplicationContext 容器</li></ul><h3 id="Spring-BeanFactory-容器"><a href="#Spring-BeanFactory-容器" class="headerlink" title="Spring BeanFactory 容器"></a>Spring BeanFactory 容器</h3><h4 id="Spring-的-BeanFactory-容器"><a href="#Spring-的-BeanFactory-容器" class="headerlink" title="Spring 的 BeanFactory 容器"></a>Spring 的 BeanFactory 容器</h4><p>这是一个最简单的容器，它主要的功能是为依赖注入 （DI） 提供支持，这个容器接口在 <code>org.springframework.beans.factory.BeanFactor</code>中被定义。BeanFactory 和相关的接口，比如<code>BeanFactoryAware、DisposableBean、InitializingBean</code>，仍旧保留在 Spring 中，主要目的是向后兼容已经存在的和那些 Spring 整合在一起的第三方框架。<br>在 Spring 中，有大量对 BeanFactory 接口的实现。其中，最常被使用的是<strong>XmlBeanFactory 类</strong>。这个容器从一个 XML 文件中读取配置元数据，由这些元数据来生成一个被配置化的系统或者应用。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>创建一个工程并在 src 文件夹下新建一个package。</li><li>点击右键，选择 Add External JARs 选项，导入 Spring 的库文件，上文的jar包</li><li>在所建的package下创建 HelloWorld.java<strong>（有get和set方法）</strong> 和 MainApp.java<strong>（通过 new XmlBeanFactory(new ClassPathResource(“Beans.xml”));获取对象）</strong>两个类文件。</li><li>在 src 文件夹下创建 Bean 的配置文件 Beans.xml</li><li>最后的步骤是创建所有 Java 文件和 Bean 的配置文件的内容，按照如下所示步骤运行应用程序。</li></ul><p>在MainApp类<code>中利用框架提供的 XmlBeanFactory() API 去生成工厂 bean 以及利用 ClassPathResource() API 去加载在路径 CLASSPATH 下可用的 bean 配置文件。XmlBeanFactory() API 负责创建并初始化所有的对象，即在配置文件中提到的 bean。</code><br>Beans.xml文件内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello World!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-ApplicationContext-容器"><a href="#Spring-ApplicationContext-容器" class="headerlink" title="Spring ApplicationContext 容器"></a>Spring ApplicationContext 容器</h3><p><strong>Application Context 是 BeanFactory 的子接口</strong>，也被成为 Spring 上下文。</p><p> Context 是 spring 中较高级的容器。和 BeanFactory 类似，它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean。 另外，它增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。这个容器在 <code>org.springframework.context.ApplicationContext interface</code>接口中定义。<br><strong>最常被使用的 ApplicationContext 接口实现：</strong></p><ul><li><strong>FileSystemXmlApplicationContext：</strong>该容器从 XML 文件中加载已被定义的 bean。在这里，你需要提供给构造器 XML 文件的完整路径。</li><li><strong>ClassPathXmlApplicationContext：</strong>该容器从 XML 文件中加载已被定义的 bean。在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，因为，容器会从 CLASSPATH 中搜索 bean 配置文件。</li><li><strong>WebXmlApplicationContext：</strong>该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。</li></ul><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><ul><li>创建一个工程， 在 src 下新建一个package</li><li>点击右键，选择 Add External JARs 选项，导入 Spring 的库文件，</li><li>在所建的package下创建 HelloWorld.java 和 MainApp.java 两个类文件。</li><li>文件夹下创建 Bean 的配置文件 Beans.xml。</li><li>最后的步骤是编辑所有 JAVA 文件的内容和 Bean 的配置文件,按照以前我们讲的那样去运行应用程序。</li></ul><p>在主程序当中，我们需要注意以下两点：</p><ul><li>生成工厂对象。加载完指定路径下 bean 配置文件后，利用框架提供的 FileSystemXmlApplicationContext API 去生成工厂 bean。FileSystemXmlApplicationContext 负责生成和初始化所有的对象，比如，所有在 XML bean 配置文件中的 bean。</li><li>利用第一步生成的上下文中的 getBean() 方法得到所需要的 bean。 这个方法通过配置文件中的 bean ID 来返回一个真正的对象。一旦得到这个对象，就可以利用这个对象来调用任何方法。</li></ul><h3 id="Spring-Bean-定义"><a href="#Spring-Bean-定义" class="headerlink" title="Spring Bean 定义"></a>Spring Bean 定义</h3><h4 id="Bean-定义"><a href="#Bean-定义" class="headerlink" title="Bean 定义"></a>Bean 定义</h4><p>被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的<br>配置元数据转换成一组构成每个 bean 定义的下列属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>class</td><td>这个属性是强制性的，并且指定用来创建 bean 的 bean 类</td></tr><tr><td>name</td><td>这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符</td></tr><tr><td>scope</td><td>这个属性指定由特定的 bean 定义创建的对象的作用域</td></tr><tr><td>constructor-arg</td><td>它是用来注入依赖关系的</td></tr><tr><td>properies</td><td>它是用来注入依赖关系的</td></tr><tr><td>autowiring mode</td><td>它是用来注入依赖关系的</td></tr><tr><td>lazy-initialization mode</td><td>延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例</td></tr><tr><td>initialization 方法</td><td>在 bean 的所有必需的属性被容器设置之后，调用回调方法</td></tr><tr><td>destruction 方法</td><td>当包含该 bean 的容器被销毁时，使用回调方法</td></tr></tbody></table><h4 id="Spring-配置元数据"><a href="#Spring-配置元数据" class="headerlink" title="Spring 配置元数据"></a>Spring 配置元数据</h4><p>Spring IoC 容器完全由实际编写的配置元数据的格式解耦。有下面三个重要的方法把配置元数据提供给 Spring 容器：</p><ul><li>基于 XML 的配置文件</li><li>基于注解的配置</li><li>基于 Java 的配置</li></ul><h4 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h4><p>Spring 框架支持以下五个作用域，分别为singleton、prototype、request、session和global-session</p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td></tr><tr><td>prototype</td><td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td></tr><tr><td>request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</td></tr><tr><td>session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td></tr><tr><td>global-session</td><td>一般用于Portlet应用环境，该运用域仅适用于WebApplicationContext环境</td></tr></tbody></table><p><strong>Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域</strong><br><strong>Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h4><p>Bean的生命周期可以表达为：<code>Bean的定义——Bean的初始化——Bean的使用——Bean的销毁</code><br>以后再补</p><h4 id="Bean后置处理器"><a href="#Bean后置处理器" class="headerlink" title="Bean后置处理器"></a>Bean后置处理器</h4><p>Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理。<br>以后补充</p><h4 id="定义继承"><a href="#定义继承" class="headerlink" title="定义继承"></a>定义继承</h4><p>bean 定义可以包含很多的配置信息，包括构造函数的参数，属性值，容器的具体信息例如初始化方法，静态工厂方法名，等等。<br>子 bean 的定义继承父定义的配置数据。子定义可以根据需要重写一些值，或者添加其他值。<br><code>Spring Bean 定义的继承与 Java 类的继承无关，但是继承的概念是一样的。</code>你可以定义一个<strong>父 bean 的定义作为模板和其他子 bean 就可以从父 bean 中继承所需的配置。</strong><br>当你使用基于 XML 的配置元数据时，通过使用父属性，指定父 bean 作为该属性的值来表明子 bean 的定义。</p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String message1<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message2<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage1</span><span class="token punctuation">(</span>String message1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message1 <span class="token operator">=</span> message1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage2</span><span class="token punctuation">(</span>String message2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message2 <span class="token operator">=</span> message2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloIndia</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String message1<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message2<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message3<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage1</span><span class="token punctuation">(</span>String message1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message1 <span class="token operator">=</span> message1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage2</span><span class="token punctuation">(</span>String message2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message2 <span class="token operator">=</span> message2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getMessage3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage3</span><span class="token punctuation">(</span>String message3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message3 <span class="token operator">=</span> message3<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloWord<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloIndia<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloIndia<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.HelloIndia<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>message1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>message3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloWorld helloWorld <span class="token operator">=</span> <span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloIndia helloIndia <span class="token operator">=</span> <span class="token punctuation">(</span>HelloIndia<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"HelloIndia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloWorld<span class="token punctuation">.</span><span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloWorld<span class="token punctuation">.</span><span class="token function">getMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloIndia<span class="token punctuation">.</span><span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloIndia<span class="token punctuation">.</span><span class="token function">getMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloIndia<span class="token punctuation">.</span><span class="token function">getMessage3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建 “helloIndia” bean 的同时并没有传递 message2，但是由于 Bean 定义的继承，所以它传递了 message2。</p><h5 id="Bean-定义模板"><a href="#Bean-定义模板" class="headerlink" title="Bean 定义模板"></a>Bean 定义模板</h5><p>创建一个 Bean 定义模板，不需要花太多功夫它就可以被其他子 bean 定义使用。在定义一个 Bean 定义模板时，你不应该指定类的属性，而应该指定带 <strong>true 值的抽象属性</strong>，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanTeamplate<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello World!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Second World!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Namaste India!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloIndia<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.HelloIndia<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanTeamplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello India!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Namaste India!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父 bean 自身不能被实例化，因为它是不完整的，而且它也被明确地标记为抽象的。当一个定义是抽象的，它仅仅作为一个纯粹的模板 bean 定义来使用的，充当子定义的父定义使用。</p><h3 id="Spring依赖注入"><a href="#Spring依赖注入" class="headerlink" title="Spring依赖注入"></a>Spring依赖注入</h3><p>Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系。<br>依赖注入类型<br><strong>Constructor-based dependency injection</strong><br>当容器调用带有多个参数的构造函数类时，实现基于<strong>构造函数的 DI</strong>，每个代表在其他类中的一个依赖关系。<br><strong>Setter-based dependency injection</strong><br>基于 setter 方法的 DI 是通过在调用无参数的构造函数或无参数的静态工厂方法实例化 bean 之后<strong>容器调用 beans 的 setter 方法来实现</strong>的。</p><h4 id="Spring-基于构造函数的依赖注入"><a href="#Spring-基于构造函数的依赖注入" class="headerlink" title="Spring 基于构造函数的依赖注入"></a>Spring 基于构造函数的依赖注入</h4><p>当容器调用带有一组参数的类构造函数时，基于构造函数的 DI 就完成了，其中每个参数代表一个对其他类的依赖。</p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Editor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Checker checker<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">Editor</span><span class="token punctuation">(</span>Checker checker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Editor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>checker <span class="token operator">=</span> checker<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">editor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        checker<span class="token punctuation">.</span><span class="token function">checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Checker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Checker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Checker.checker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Editor editor <span class="token operator">=</span> <span class="token punctuation">(</span>Editor<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"editor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Checker checker <span class="token operator">=</span> <span class="token punctuation">(</span>Checker<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"checker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">editor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        checker<span class="token punctuation">.</span><span class="token function">checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloWord<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloIndia<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloIndia<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.HelloIndia<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>message1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>message3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Definition for Editor bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint2.Editor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checker<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint2.Checker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Checker"><a href="#Checker" class="headerlink" title="Checker"></a>Checker</h5><p>如果存在不止一个参数时，当把参数传递给构造函数时，可能会存在歧义。要解决这个问题，那么<strong>构造函数的参数在 bean 定义中的顺序就是把这些参数提供给适当的构造函数的顺序就可以了</strong>。考虑下面的类:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> x<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">Foo</span><span class="token punctuation">(</span>Bar bar<span class="token punctuation">,</span> Baz baz<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下述配置文件工作顺利：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x.y.Foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baz<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x.y.Bar<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baz<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x.y.Baz<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们传递给构造函数不同类型的位置。考虑下面的类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> x<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你使用 type 属性显式的指定了构造函数参数的类型，容器也可以使用与简单类型匹配的类型。例如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Zara<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 index 属性来显式的指定构造函数参数的索引。下面是基于索引为 0 的例子，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Zara<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以通name属性来确定位置如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>year<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Zara<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-基于设值函数的依赖注入"><a href="#Spring-基于设值函数的依赖注入" class="headerlink" title="Spring 基于设值函数的依赖注入"></a>Spring 基于设值函数的依赖注入</h4><p>当容器调用一个无参的构造函数或一个无参的静态 factory 方法来初始化你的 bean 后，通过容器在你的 bean 上调用设值函数，基于设值函数的 DI 就完成了。</p><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// a setter method to inject the dependency.</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSpellChecker</span><span class="token punctuation">(</span>SpellChecker spellChecker<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside setSpellChecker."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// a getter method to return spellChecker</span>   <span class="token keyword">public</span> SpellChecker <span class="token function">getSpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      spellChecker<span class="token punctuation">.</span><span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，你需要检查设值函数方法的名称转换。要设置一个变量 spellChecker，我们使用 setSpellChecker() 方法，该方法与 Java POJO 类非常相似。让我们创建另一个依赖类文件 SpellChecker.java 的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpellChecker</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">SpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside SpellChecker constructor."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside checkSpelling."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是 MainApp.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ApplicationContext context <span class="token operator">=</span>              <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      TextEditor te <span class="token operator">=</span> <span class="token punctuation">(</span>TextEditor<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"textEditor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      te<span class="token punctuation">.</span><span class="token function">spellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是配置文件 Beans.xml 的内容，该文件有基于设值函数注入的配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for textEditor bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textEditor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.TextEditor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for spellChecker bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.SpellChecker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意定义在基于构造函数注入和基于设值函数注入中的 Beans.xml 文件的区别。唯一的区别就是在<strong>基于构造函数注入</strong>中，我们使用的是<strong>〈bean〉标签中的〈constructor-arg〉</strong>元素，而在基于<strong>设值函数的注入</strong>中，我们使用的是<strong>〈bean〉标签中的〈property〉</strong>元素。<br><strong><em>如果你要把一个引用传递给一个对象，那么你需要使用 标签的 ref 属性，而如果你要直接传递一个值，那么你应该使用 value 属性。</em></strong></p><h5 id="使用-p-namespace-实现-XML-配置："><a href="#使用-p-namespace-实现-XML-配置：" class="headerlink" title="使用 p-namespace 实现 XML 配置："></a>使用 p-namespace 实现 XML 配置：</h5><p>如果你有许多的设值函数方法，那么在 XML 配置文件中使用 p-namespace 是非常方便的。让我们查看一下区别：<br>以带有 标签的标准 XML 配置文件为例：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>john-classic<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>John Doe<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spouse<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jane<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jane<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>John Doe<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述 XML 配置文件可以使用 p-namespace 以一种更简洁的方式重写，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>john-classic<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.Person<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>John Doe<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>spouse-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jane<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jane<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.Person<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>John Doe<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>区别指定原始值和带有 p-namespace 的对象引用。-ref 部分表明这不是一个直接的值，而是对另一个 bean 的引用。</em></strong></p><h4 id="注入内部-Beans"><a href="#注入内部-Beans" class="headerlink" title="注入内部 Beans"></a>注入内部 Beans</h4><p>正如我们所知道的 Java 内部类是在其他类的范围内被定义的，同理，inner beans 是在其他 bean 的范围内定义的 bean。因此在 或 元素内 元素被称为内部bean，如下所示。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outerBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>innerBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// a setter method to inject the dependency.</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSpellChecker</span><span class="token punctuation">(</span>SpellChecker spellChecker<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside setSpellChecker."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// a getter method to return spellChecker</span>   <span class="token keyword">public</span> SpellChecker <span class="token function">getSpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      spellChecker<span class="token punctuation">.</span><span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpellChecker</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">SpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside SpellChecker constructor."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside checkSpelling."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpellChecker</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">SpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside SpellChecker constructor."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside checkSpelling."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用内部 bean 为基于 setter 注入进行配置的配置文件 Beans.xml 文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for textEditor bean using inner bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textEditor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.TextEditor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.SpellChecker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h4><p>现在如果你想传递多个值，如 Java Collection 类型 List、Set、Map 和 Properties，应该怎么做呢。为了处理这种情况，Spring 提供了四种类型的集合的配置元素，如下所示：</p><table><thead><tr><th>元素</th><th>描述</th></tr></thead><tbody><tr><td>list</td><td>它有助于连线，如注入一列值，允许重复。</td></tr><tr><td>set</td><td>它有助于连线一组值，但不能重复。</td></tr><tr><td>map</td><td>它可以用来注入名称-值对的集合，其中名称和值可以是任何类型。</td></tr><tr><td>props</td><td>它可以用来注入名称-值对的集合，其中名称和值都是字符串类型。</td></tr></tbody></table><p><strong>你可以使用<list>或<set>来连接任何 java.util.Collection 的实现或数组。</set></list></strong><br>有两种情况</p><ul><li>传递集合中直接的值</li><li>传递一个 bean 的引用作为集合的元素。</li></ul><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> addSet<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> addList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Object<span class="token operator">></span> addMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties addProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getAddSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> addSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddSet</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> addSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addSet <span class="token operator">=</span> addSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getAddList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> addList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> addList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addList <span class="token operator">=</span> addList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getAddMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> addMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Object<span class="token operator">></span> addMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addMap <span class="token operator">=</span> addMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Properties <span class="token function">getAddProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> addProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddProperties</span><span class="token punctuation">(</span>Properties addProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addProperties <span class="token operator">=</span> addProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaCollection collection <span class="token operator">=</span> <span class="token punctuation">(</span>JavaCollection<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">getAddList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">getAddSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">getAddMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">getAddProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 集合的注入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collection<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.collection.JavaCollection<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addSet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>addList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>addList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>addList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>addList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>addMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addMap2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addMpa3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>addMap4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addProperties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>INDIA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>addProperties2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>addProperties3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>four<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>addProperties4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注入-Bean-引用"><a href="#注入-Bean-引用" class="headerlink" title="注入 Bean 引用"></a>注入 Bean 引用</h5><p>下面的 Bean 定义将帮助你理解如何注入 bean 的引用作为集合的元素。甚至你可以将引用和值混合在一起，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Bean Definition to handle references and values --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Passing bean reference  for java.util.List --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addressList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Pakistan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Passing bean reference  for java.util.Set --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addressSet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Pakistan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Passing bean reference  for java.util.Map --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addressMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INDIA<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            &lt;entry key ="two" value-ref="address1"/>            &lt;entry key ="three" value-ref="address2"/>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了使用上面的 bean 定义，你需要定义 setter 方法，它们应该也能够是用这种方式来处理引用。</p><h5 id="注入-null-和空字符串的值"><a href="#注入-null-和空字符串的值" class="headerlink" title="注入 null 和空字符串的值"></a>注入 null 和空字符串的值</h5><p>如果需要传递一个空字符串作为值，那么你可以传递它，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前面的例子相当于 Java 代码：exampleBean.setEmail(“”)。</p><p>如果你需要传递一个 NULL 值，那么你可以传递它，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前面的例子相当于 Java 代码：exampleBean.setEmail(null)。</p><h3 id="Spring-Beans-自动装配"><a href="#Spring-Beans-自动装配" class="headerlink" title="Spring Beans 自动装配"></a>Spring Beans 自动装配</h3><p>Spring 容器可以在不使用<constructor-arg>和<property> 元素的情况下自动装配相互协作的 bean 之间的关系，这有助于减少编写一个大的基于 Spring 的应用程序的 XML 配置的数量。<br><strong>为了尽可能不会造成混乱的代码，尽可能不使用这种方式，而是用显示装配</strong></property></constructor-arg></p><h4 id="自动装配-byName"><a href="#自动装配-byName" class="headerlink" title="自动装配 byName"></a>自动装配 <code>byName</code></h4><p>这种模式由属性名称指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的<strong>auto-wire 属性设置为 byName。</strong>然后，它尝试将它的属性与配置文件中定义为相同名称的 beans 进行匹配和连接。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSpellChecker</span><span class="token punctuation">(</span> SpellChecker spellChecker <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> SpellChecker <span class="token function">getSpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      spellChecker<span class="token punctuation">.</span><span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpellChecker</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">SpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside SpellChecker constructor."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside checkSpelling."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ApplicationContext context <span class="token operator">=</span>              <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      TextEditor te <span class="token operator">=</span> <span class="token punctuation">(</span>TextEditor<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"textEditor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      te<span class="token punctuation">.</span><span class="token function">spellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是在正常情况下的配置文件 Beans.xml 文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for textEditor bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textEditor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.TextEditor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Generic Text Editor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for spellChecker bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.SpellChecker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你要使用自动装配 “byName”，那么你的 XML 配置文件将成为如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for textEditor bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textEditor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.TextEditor<span class="token punctuation">"</span></span>       <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Generic Text Editor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for spellChecker bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.SpellChecker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动装配-‘byType’"><a href="#自动装配-‘byType’" class="headerlink" title="自动装配 ‘byType’"></a>自动装配 ‘byType’</h4><p>这种模式由属性类型指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的** autowire 属性设置为 byType<strong>。然后，如果</strong>它的 type 恰好与配置文件中 beans 名称中的一个相匹配，它将尝试匹配和连接它的属性**。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</p><h5 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for textEditor bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textEditor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.TextEditor<span class="token punctuation">"</span></span>       <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Generic Text Editor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for spellChecker bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SpellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.SpellChecker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="由构造函数自动装配"><a href="#由构造函数自动装配" class="headerlink" title="由构造函数自动装配"></a>由构造函数自动装配</h4><p>这种模式与 byType 非常相似，但它应用于构造器参数。Spring 容器看作 beans，在 XML 配置文件中 beans 的 <strong>autowire 属性设置为 constructor</strong>。然后，它尝试<strong>把它的构造函数的参数与配置文件中 beans 名称中的一个进行匹配和连线</strong>。如果找到匹配项，它会注入这些 bean，否则，它会抛出异常。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for textEditor bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textEditor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.TextEditor<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>constructor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Generic Text Editor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for spellChecker bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SpellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.SpellChecker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h3><p>一旦 被配置后，你就可以开始注解你的代码，表明 Spring 应该自动连接值到属性，方法和构造函数。</p><h4 id="Required-注解（感觉没有用处）"><a href="#Required-注解（感觉没有用处）" class="headerlink" title="@Required 注解（感觉没有用处）"></a>@Required 注解（感觉没有用处）</h4><p>@Required 注释应用于 bean 属性的 setter 方法，<strong>它表明受影响的 bean 属性在配置时必须放在 XML 配置文件中</strong>，否则容器就会抛出一个 BeanInitializationException 异常</p><h4 id="Autowired-注解"><a href="#Autowired-注解" class="headerlink" title="@Autowired 注解"></a>@Autowired 注解</h4><p>@Autowired 注释对在哪里和如何完成自动连接提供了更多的细微的控制。<br>@Autowired 注释可以在 setter 方法中被用于自动连接 bean，就像 @Autowired 注释，容器，一个属性或者任意命名的可能带有多个参数的方法。</p><p>你可以在 XML 文件中的 setter 方法中使用 @Autowired 注释来除去 元素。当 Spring遇到一个在 setter 方法中使用的 @Autowired 注释，它会在方法中试图执行 byType 自动连接。</p><h5 id="属性中的-Autowired"><a href="#属性中的-Autowired" class="headerlink" title="属性中的 @Autowired"></a>属性中的 @Autowired</h5><p>你可以在属性中使用 @Autowired 注释来除去 setter 方法。当时使用 为自动连接属性传递的时候，Spring 会将这些传递过来的值或者引用自动分配给那些属性。所以利用在属性中 @Autowired 的用法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="构造函数中的-Autowired"><a href="#构造函数中的-Autowired" class="headerlink" title="构造函数中的 @Autowired"></a>构造函数中的 @Autowired</h5><p>你也可以在构造函数中使用 @Autowired。一个构造函数 @Autowired 说明当创建 bean 时，即使在 XML 文件中没有使用 元素配置 bean ，构造函数也会被自动连接</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">public</span> <span class="token function">TextEditor</span><span class="token punctuation">(</span>SpellChecker spellChecker<span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside TextEditor constructor."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Autowired-的（required-false）选项"><a href="#Autowired-的（required-false）选项" class="headerlink" title="@Autowired 的（required=false）选项"></a>@Autowired 的（required=false）选项</h5><p>默认情况下，@Autowired 注释意味着依赖是必须的，它类似于 @Required 注释，然而，你可以使用 @Autowired 的 （required=false） 选项关闭默认行为。<br>即使你不为 age 属性传递任何参数，下面的示例也会成功运行，但是对于 name 属性则需要一个参数。你可以自己尝试一下这个示例，因为除了只有Student.java 文件被修改以外，它和 @Required 注释示例是相似的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Qualifier-注释"><a href="#Qualifier-注释" class="headerlink" title="@Qualifier 注释"></a>@Qualifier 注释</h4><p>可能会有这样一种情况，当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，在这种情况下，你可以使用 @Qualifier 注释和 @Autowired 注释通过指定哪一个真正的 bean 将会被装配来消除混乱。下面显示的是使用 @Qualifier 注释的一个示例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Profile</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Autowired</span>   <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"student1"</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> Student student<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside Profile constructor."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age : "</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name : "</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Profile profile <span class="token operator">=</span> <span class="token punctuation">(</span>Profile<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      profile<span class="token punctuation">.</span><span class="token function">printAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      profile<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for profile bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>profile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.Profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for student1 bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Zara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for student2 bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Nuha<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSR-250-注释"><a href="#JSR-250-注释" class="headerlink" title="JSR-250 注释"></a>JSR-250 注释</h4><p>以后补充</p><h4 id="基于Java的配置"><a href="#基于Java的配置" class="headerlink" title="基于Java的配置"></a>基于Java的配置</h4><p>基于 Java 的配置选项，可以使你在不用配置 XML 的情况下编写大多数的 Spring，但是一些有帮助的基于 Java 的注解</p><h5 id="Configuration-和-Bean-注解"><a href="#Configuration-和-Bean-注解" class="headerlink" title="@Configuration 和 @Bean 注解"></a>@Configuration 和 @Bean 注解</h5><p>带有 <strong>@Configuration 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源</strong>。@Bean 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一<strong>个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。</strong>最简单可行的 @Configuration 类如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloWorld <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>上面的代码将等同于下面的 XML 配置：</code></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.HelloWorld<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这里，带有 <strong>@Bean 注解的方法名称作为 bean 的 ID，它创建并返回实际的 bean。</strong>你的配置类可以声明多个 @Bean。一旦定义了配置类，你就可以<strong>使用 AnnotationConfigApplicationContext 来加载并把他们提供给 Spring 容器</strong>，如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   ApplicationContext ctx <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>HelloWorldConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HelloWorld helloWorld <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   helloWorld<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   helloWorld<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloWorld <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> String message<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message  <span class="token operator">=</span> message<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Your Message : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ApplicationContext ctx <span class="token operator">=</span>       <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>HelloWorldConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      HelloWorld helloWorld <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      helloWorld<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      helloWorld<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一旦你完成了创建所有的源文件并添加所需的额外的库后，我们就可以运行该应用程序。你应该注意这里不需要配置文件</strong></p><h5 id="注入-Bean-的依赖性"><a href="#注入-Bean-的依赖性" class="headerlink" title="注入 Bean 的依赖性"></a>注入 Bean 的依赖性</h5><p>当 @Beans 依赖对方时，表达这种依赖性非常简单，只要有一个 bean 方法调用另一个</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Foo <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Bar <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditorConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TextEditor <span class="token function">textEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TextEditor</span><span class="token punctuation">(</span> <span class="token function">spellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SpellChecker <span class="token function">spellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpellChecker</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">TextEditor</span><span class="token punctuation">(</span>SpellChecker spellChecker<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside TextEditor constructor."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      spellChecker<span class="token punctuation">.</span><span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpellChecker</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">SpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside SpellChecker constructor."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside checkSpelling."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ApplicationContext ctx <span class="token operator">=</span>       <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>TextEditorConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      TextEditor te <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>TextEditor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      te<span class="token punctuation">.</span><span class="token function">spellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Import-注解"><a href="#Import-注解" class="headerlink" title="@Import 注解:"></a>@Import 注解:</h5><p>@import 注解允许从另一个配置类中加载 @Bean 定义</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigA</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> A <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在另一个 Bean 声明中导入上述 Bean 声明，如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>ConfigA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigB</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> B <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，当实例化上下文时，不需要同时指定 ConfigA.class 和 ConfigB.class，只有 ConfigB 类需要提供，如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   ApplicationContext ctx <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>ConfigB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// now both beans A and B will be available...</span>   A a <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   B b <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="生命周期回调"><a href="#生命周期回调" class="headerlink" title="生命周期回调"></a>生命周期回调</h5><p>@Bean 注解支持指定任意的初始化和销毁的回调方法，就像在 bean 元素中 Spring 的 XML 的初始化方法和销毁方法的属性：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// initialization logic</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// destruction logic</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"cleanup"</span> <span class="token punctuation">)</span>   <span class="token keyword">public</span> Foo <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定-Bean-的范围："><a href="#指定-Bean-的范围：" class="headerlink" title="指定 Bean 的范围："></a>指定 Bean 的范围：</h5><p>默认范围是单实例，但是你可以重写带有 @Scope 注解的该方法，如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> Foo <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-中的事件处理"><a href="#Spring-中的事件处理" class="headerlink" title="Spring 中的事件处理"></a>Spring 中的事件处理</h4><blockquote><p>通过 ApplicationEvent 类和 ApplicationListener 接口来提供在 ApplicationContext 中处理事件。如果一个 bean 实现 ApplicationListener，那么每次 ApplicationEvent 被发布到 ApplicationContext 上，那个 bean 会被通知。</p></blockquote><table><thead><tr><th>Spring 内置事件</th><th>描述</th></tr></thead><tbody><tr><td>ContextRefreshedEvent</td><td>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext 接口中使用 refresh() 方法来发生。</td></tr><tr><td>ContextStartedEvent</td><td>当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</td></tr><tr><td>ContextStoppedEvent</td><td>当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。</td></tr><tr><td>ContextClosedEvent</td><td>当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。</td></tr><tr><td>RequestHandledEvent</td><td>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。</td></tr></tbody></table><blockquote><p>由于 Spring 的事件处理是单线程的，所以如果一个事件被发布，直至并且除非所有的接收者得到的该消息，该进程被阻塞并且流程将不会继续。因此，如果事件处理被使用，在设计应用程序时应注意。</p></blockquote><h5 id="监听上下文事件"><a href="#监听上下文事件" class="headerlink" title="监听上下文事件"></a>监听上下文事件</h5><p>为了监听上下文事件，一个 bean 应该实现只有一个方法 onApplicationEvent() 的 ApplicationListener 接口<br>这里是 HelloWorld.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> String message<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message  <span class="token operator">=</span> message<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Your Message : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 CStartEventHandler.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ContextStartedEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CStartEventHandler</span>    <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ContextStartedEvent<span class="token operator">></span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ContextStartedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ContextStartedEvent Received"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 CStopEventHandler.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ContextStoppedEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CStopEventHandler</span>    <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ContextStoppedEvent<span class="token operator">></span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ContextStoppedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ContextStoppedEvent Received"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 MainApp.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurableApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ConfigurableApplicationContext context <span class="token operator">=</span>       <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Let us raise a start event.</span>      context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      HelloWorld obj <span class="token operator">=</span> <span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Let us raise a stop event.</span>      context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是配置文件 Beans.xml 文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello World!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cStartEventHandler<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.CStartEventHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cStopEventHandler<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.CStopEventHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-中的自定义事件"><a href="#Spring-中的自定义事件" class="headerlink" title="Spring 中的自定义事件"></a>Spring 中的自定义事件</h4><ul><li><ul><li>通过扩展 ApplicationEvent,创建一个事件类 CustomEvent。这个类必须定义一个默认的构造函数，它应该从 ApplicationEvent 类中继承的构造函数。</li></ul></li><li><ul><li>一旦定义事件类，你可以从任何类中发布它，假定 EventClassPublisher 实现了 ApplicationEventPublisherAware。你还需要在 XML 配置文件中声明这个类作为一个 bean，之所以容器可以识别 bean 作为事件发布者，是因为它实现了 ApplicationEventPublisherAware 接口。</li></ul></li><li><ul><li>发布的事件可以在一个类中被处理，假定 EventClassHandler 实现了 ApplicationListener 接口，而且实现了自定义事件的 onApplicationEvent 方法。</li></ul></li></ul><p>这个是 CustomEvent.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CustomEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"My Custom Event"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 CustomEventPublisher.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEventPublisher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEventPublisherAware<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomEventPublisher</span>    <span class="token keyword">implements</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> ApplicationEventPublisher publisher<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationEventPublisher</span>              <span class="token punctuation">(</span>ApplicationEventPublisher publisher<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>publisher <span class="token operator">=</span> publisher<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      CustomEvent ce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>ce<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 CustomEventHandler.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomEventHandler</span>    <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>CustomEvent<span class="token operator">></span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>CustomEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 MainApp.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurableApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ConfigurableApplicationContext context <span class="token operator">=</span>       <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          CustomEventPublisher cvp <span class="token operator">=</span>       <span class="token punctuation">(</span>CustomEventPublisher<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"customEventPublisher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cvp<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cvp<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是配置文件 Beans.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customEventHandler<span class="token punctuation">"</span></span>       <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.CustomEventHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customEventPublisher<span class="token punctuation">"</span></span>       <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.CustomEventPublisher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-框架的-AOP"><a href="#Spring-框架的-AOP" class="headerlink" title="Spring 框架的 AOP"></a>Spring 框架的 AOP</h3><p>Spring 框架的一个关键组件是<strong>面向方面的编程(AOP)框架</strong>。面向方面的编程需要把程序逻辑分解成不同的部分称为所谓的<strong>关注点</strong>。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑</p><blockquote><p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能</p></blockquote><h5 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h5><table><thead><tr><th>项</th><th>描述</th></tr></thead><tbody><tr><td>Aspect</td><td>一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。</td></tr><tr><td>Join point</td><td>在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</td></tr><tr><td>Advice</td><td>这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</td></tr><tr><td>Pointcut</td><td>这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</td></tr><tr><td>Introduction</td><td>引用允许你添加新方法或属性到现有的类中。</td></tr><tr><td>Target object</td><td>被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</td></tr><tr><td>Weaving</td><td>Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</td></tr></tbody></table><h5 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h5><p>Spring 方面可以使用下面提到的五种通知工作：</p><table><thead><tr><th>通知</th><th>描述</th></tr></thead><tbody><tr><td>前置通知</td><td>在一个方法执行之前，执行通知。</td></tr><tr><td>后置通知</td><td>在一个方法执行之后，不考虑其结果，执行通知。</td></tr><tr><td>返回后通知</td><td>在一个方法执行之后，只有在方法成功完成时，才能执行通知。</td></tr><tr><td>抛出异常后通知</td><td>在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</td></tr><tr><td>环绕通知</td><td>在建议方法调用之前和之后，执行通知。</td></tr></tbody></table><h4 id="Spring-中基于-AOP-的-XML架构"><a href="#Spring-中基于-AOP-的-XML架构" class="headerlink" title="Spring 中基于 AOP 的 XML架构"></a>Spring 中基于 AOP 的 XML架构</h4><p>先导入spring-aop架构</p><pre class="line-numbers language-xml"><code class="language-xml">xmlns:aop="http://www.springframework.org/schema/aop"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还需要在你的应用程序的 CLASSPATH 中使用以下 AspectJ库文件。<br><img src="https://s2.ax1x.com/2019/09/14/nyTlGj.png" alt></p><h5 id="声明一个-aspect"><a href="#声明一个-aspect" class="headerlink" title="声明一个 aspect"></a>声明一个 aspect</h5><p>一个 aspect 是使用 元素声明的，支持的 bean 是使用 ref 属性引用的，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   ...   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，“aBean” 将被配置和依赖注入，就像前面的章节中你看到的其他的 Spring bean 一样。</p><h5 id="声明一个切入点"><a href="#声明一个切入点" class="headerlink" title="声明一个切入点"></a>声明一个切入点</h5><p>下面的示例定义了一个名为 “businessService” 的切入点，该切入点将与 com.tutorialspoint 包下的 Student 类中的 getName() 方法相匹配：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>businessService<span class="token punctuation">"</span></span>      <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.tutorialspoint.Student.getName(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   ...   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="声明建议"><a href="#声明建议" class="headerlink" title="声明建议"></a>声明建议</h5><p>你可以使用 &lt;aop:{ADVICE NAME}&gt; 元素在一个 中声明五个建议中的任何一个，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>businessService<span class="token punctuation">"</span></span>         <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.xyz.myapp.service.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- a before advice definition --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>businessService<span class="token punctuation">"</span></span>          <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doRequiredTask<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- an after advice definition --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>businessService<span class="token punctuation">"</span></span>          <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doRequiredTask<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- an after-returning advice definition --></span>      <span class="token comment" spellcheck="true">&lt;!--The doRequiredTask method must have parameter named retVal --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>businessService<span class="token punctuation">"</span></span>         <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>retVal<span class="token punctuation">"</span></span>         <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doRequiredTask<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- an after-throwing advice definition --></span>      <span class="token comment" spellcheck="true">&lt;!--The doRequiredTask method must have parameter named ex --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>businessService<span class="token punctuation">"</span></span>         <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span>         <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doRequiredTask<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- an around advice definition --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>businessService<span class="token punctuation">"</span></span>          <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doRequiredTask<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   ...   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以对不同的建议使用相同的 <strong>doRequiredTask 或者不同的方法</strong>。这些方法将会作为 aspect 模块的一部分来定义。</p><h5 id="基于-AOP-的-XML-架构的示例"><a href="#基于-AOP-的-XML-架构的示例" class="headerlink" title="基于 AOP 的 XML 架构的示例"></a>基于 AOP 的 XML 架构的示例</h5><p>这里是 Logging.java 文件的内容。这实际上是 aspect 模块的一个示例，它定义了在各个点调用的方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logging</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**     * This is the method which I would like to execute    * before a selected method execution.    */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Going to setup student profile."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**     * This is the method which I would like to execute    * after a selected method execution.    */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student profile has been setup."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**     * This is the method which I would like to execute    * when any method returns.    */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningAdvice</span><span class="token punctuation">(</span>Object retVal<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Returning:"</span> <span class="token operator">+</span> retVal<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * This is the method which I would like to execute    * if there is an exception raised.    */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AfterThrowingAdvice</span><span class="token punctuation">(</span>IllegalArgumentException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"There has been an exception: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 Student.java 文件(切点)的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age : "</span> <span class="token operator">+</span> age <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name : "</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printThrowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exception raised"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 Student.java 文件的内容：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age : "</span> <span class="token operator">+</span> age <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name : "</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printThrowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exception raised"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是配置文件 Beans.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span>          <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.tutorialspoint.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeAdvice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterAdvice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span>                               <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>retVal<span class="token punctuation">"</span></span>                              <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterReturningAdvice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span>                              <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span>                             <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AfterThrowingAdvice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for student bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Zara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Definition for logging aspect --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logging<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint.Logging<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-中基于-AOP-的-AspectJ"><a href="#Spring-中基于-AOP-的-AspectJ" class="headerlink" title="Spring 中基于 AOP 的 @AspectJ"></a>Spring 中基于 AOP 的 @AspectJ</h4><p>导包<br><img src="https://s2.ax1x.com/2019/09/15/ncglB4.png" alt></p><p>通过在你的基于架构的 XML 配置文件中包含以下元素，@AspectJ 支持是可用的。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="声明一个-aspect-1"><a href="#声明一个-aspect-1" class="headerlink" title="声明一个 aspect"></a>声明一个 aspect</h5><p>Aspects 类和其他任何正常的 bean 一样，除了它们将会用 @AspectJ 注释之外，它和其他类一样可能有方法和字段，如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>xyz<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它们将在 XML 中按照如下进行配置，就和其他任何 bean 一样：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.xyz.AspectModule<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- configure properties of aspect here as normal --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="声明一个切入点-1"><a href="#声明一个切入点-1" class="headerlink" title="声明一个切入点"></a>声明一个切入点</h5><p>一个切入点有助于确定使用不同建议执行的感兴趣的连接点（即方法）。在处理基于配置的 XML 架构时，切入点的声明有两个部分：</p><blockquote><p>一个切入点表达式决定了我们感兴趣的哪个方法会真正被执行。<br>一个切入点标签包含一个名称和任意数量的参数。方法的真正内容是不相干的，并且实际上它应该是空的。</p></blockquote><p>下面的示例中定义了一个名为 ‘businessService’ 的切入点，该切入点将与 com.xyz.myapp.service 包下的类中可用的每一个方法相匹配：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xyz.myapp.service.*.*(..))"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// expression </span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">businessService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// signature</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面的示例中定义了一个名为 ‘getname’ 的切入点，该切入点将与 com.tutorialspoint 包下的 Student 类中的 getName() 方法相匹配：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.tutorialspoint.Student.getName(..))"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="声明建议-1"><a href="#声明建议-1" class="headerlink" title="声明建议"></a>声明建议</h5><p>你可以使用 @{ADVICE-NAME} 注释声明五个建议中的任意一个，如下所示。这假设你已经定义了一个切入点标签方法 businessService()：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"businessService()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBeforeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"businessService()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"businessService()"</span><span class="token punctuation">,</span> returning<span class="token operator">=</span><span class="token string">"retVal"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturnningTask</span><span class="token punctuation">(</span>Object retVal<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// you can intercept retVal here.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"businessService()"</span><span class="token punctuation">,</span> throwing<span class="token operator">=</span><span class="token string">"ex"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterThrowingTask</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// you can intercept thrown exception here.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"businessService()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAroundTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以为任意一个建议定义你的切入点内联。下面是在建议之前定义内联切入点的一个示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xyz.myapp.service.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">doBeforeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="基于-AOP-的-AspectJ-示例"><a href="#基于-AOP-的-AspectJ-示例" class="headerlink" title="基于 AOP 的 @AspectJ 示例"></a>基于 AOP 的 @AspectJ 示例</h5><p>Student类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>AspectJ<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printThrowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Logging类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>AspectJ<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AfterReturning<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AfterThrowing<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logging</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.AspectJ.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">businessService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"businessService()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"businessService()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"businessService()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"ret"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningAdvice</span><span class="token punctuation">(</span>Object ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回后"</span> <span class="token operator">+</span> ret<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"businessService()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowingAdvice</span><span class="token punctuation">(</span>Throwable ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"There has been an exception: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainApp类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>AspectJ<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">printThrowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置applicationContext.xml文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.AspectJ.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RyouL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logging<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.AspectJ.Logging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="还可以用接口实现"><a href="#还可以用接口实现" class="headerlink" title="还可以用接口实现"></a>还可以用接口实现</h4><p>此处不赘述</p><h3 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h3><h5 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h5><p>一个数据库事务是一个被视为单一的工作单元的操作序列。<strong>这些操作应该要么完整地执行，要么完全不执行</strong>。事务管理是一个重要组成部分，RDBMS 面向企业应用程序，以确保数据完整性和一致性。事务的概念可以描述为具有以下四个关键属性说成是 ACID：</p><blockquote><ul><li><strong>原子性：</strong>事务应该当作一个单独单元的操作，这意味着整个序列操作要么是成功，要么是失败的。</li><li><strong>一致性：</strong>这表示数据库的引用完整性的一致性，表中唯一的主键等。</li><li><strong>隔离性：</strong>可能同时处理很多有相同的数据集的事务，每个事务应该与其他事务隔离，以防止数据损坏。</li><li><strong>持久性：</strong>一个事务一旦完成全部操作后，这个事务的结果必须是永久性的，不能因系统故障而从数据库中删除。</li></ul></blockquote><h5 id="局部事物-vs-全局事务"><a href="#局部事物-vs-全局事务" class="headerlink" title="局部事物 vs. 全局事务"></a>局部事物 vs. 全局事务</h5><p><strong>局部事务是特定于一个单一的事务资源，如一个 JDBC 连接，而全局事务可以跨多个事务资源事务，如在一个分布式系统中的事务。</strong><br>局部事务管理在一个集中的计算环境中是有用的，该计算环境中应用程序组件和资源位于一个单位点，而事务管理只涉及到一个运行在一个单一机器中的本地数据管理器。局部事务更容易实现。</p><h5 id="编程式-vs-声明式"><a href="#编程式-vs-声明式" class="headerlink" title="编程式 vs. 声明式"></a>编程式 vs. 声明式</h5><p>Spring 支持两种类型的事务管理:<br><strong>编程式事务管理 ：</strong>这意味着你在编程的帮助下有管理事务。这给了你极大的灵活性，但却很难维护。<br><strong>声明式事务管理 ：</strong>这意味着你从业务代码中分离事务管理。你仅仅使用注释或 XML 配置来管理事务。<br><strong><em>声明式事务管理比编程式事务管理更可取，尽管它不如编程式事务管理灵活，但它允许你通过代码控制事务</em></strong>。但作为一种横切关注点，声明式事务管理可以使用 AOP 方法进行模块化。Spring 支持使用 Spring AOP 框架的声明式事务管理。</p><h3 id="spring-web-MVC框架"><a href="#spring-web-MVC框架" class="headerlink" title="spring web MVC框架"></a>spring web MVC框架</h3><h5 id="MVC-框架教程"><a href="#MVC-框架教程" class="headerlink" title="MVC 框架教程"></a>MVC 框架教程</h5><p>Spring web MVC 框架提供了<strong>模型-视图-控制</strong>的体系结构和可以用来开发灵活、松散耦合的 web 应用程序的组件。MVC 模式导致了应用程序的不同方面(输入逻辑、业务逻辑和 UI 逻辑)的分离，同时提供了在这些元素之间的松散耦合。</p><blockquote><ul><li>模型封装了应用程序数据，并且通常它们由 POJO 组成。</li><li>视图主要用于呈现模型数据，并且通常它生成客户端的浏览器可以解释的 HTML 输出。</li><li>控制器主要用于处理用户请求，并且构建合适的模型并将其传递到视图呈现。</li></ul></blockquote><h5 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h5><p>Spring Web 模型-视图-控制（MVC）框架是<strong>围绕 DispatcherServlet 设计的，DispatcherServlet 用来处理所有的 HTTP 请求和响应。</strong>Spring Web MVC DispatcherServlet 的请求处理的工作流程如下图所示：<br><img src="https://s2.ax1x.com/2019/09/15/ncI9mV.png" alt></p><p>下面是对应于 DispatcherServlet 传入 HTTP 请求的事件序列：</p><ul><li><code>收到一个 HTTP 请求后，DispatcherServlet 根据 HandlerMapping 来选择并且调用适当的控制器。</code></li><li><code>控制器接受请求，并基于使用的 GET 或 POST 方法来调用适当的 service 方法。Service 方法将设置基于定义的业务逻辑的模型数据，并返回视图名称到 DispatcherServlet 中。</code></li><li><code>DispatcherServlet 会从 ViewResolver 获取帮助，为请求检取定义视图。</code></li><li><code>一旦确定视图，DispatcherServlet 将把模型数据传递给视图，最后呈现在浏览器中。</code></li></ul><h5 id="需求的配置"><a href="#需求的配置" class="headerlink" title="需求的配置"></a>需求的配置</h5><p>需要映射你想让 DispatcherServlet 处理的请求，通过使用在 web.xml 文件中的一个 URL 映射。<br>web.xml 文件将被保留在你的应用程序的 WebContent/WEB-INF 目录下。好的，在初始化 HelloWeb DispatcherServlet 时，该框架将尝试加载位于该应用程序的 WebContent/WEB-INF 目录中文件名为 [servlet-name]-servlet.xml 的应用程序内容。在这种情况下，我们的文件将是 HelloWeb-servlet.xml。<br>标签表明哪些 URLs 将被 DispatcherServlet 处理。这里所有以 .jsp 结束的 HTTP 请求将由 HelloWeb DispatcherServle t处理。<br>如果你不想使用默认文件名 [servlet-name]-servlet.xml 和默认位置 WebContent/WEB-INF，你可以通过在 web.xml 文件中添加 servlet 监听器 ContextLoaderListener 自定义该文件的名称和位置，如下所示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app...</span><span class="token punctuation">></span></span>....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/WEB-INF/HelloWeb-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>      org.springframework.web.context.ContextLoaderListener   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查 HelloWeb-servlet.xml 文件的请求配置，该文件位于 web 应用程序的 WebContent/WEB-INF 目录下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>   http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是关于 HelloWeb-servlet.xml 文件的一些要点：</p><ul><li>[servlet-name]-servlet.xml 文件将用于创建 bean 定义，重新定义在全局范围内具有相同名称的任何已定义的 bean。</li><li>标签将用于激活 Spring MVC 注释扫描功能，该功能允许使用注释，如 @Controller 和 @RequestMapping 等等。</li><li>InternalResourceViewResolver 将使用定义的规则来解决视图名称。按照上述定义的规则，一个名称为 hello 的逻辑视图将发送给位于 /WEB-INF/jsp/hello.jsp 中实现的视图。</li></ul><h5 id="定义控制器"><a href="#定义控制器" class="headerlink" title="定义控制器"></a>定义控制器</h5><p>DispatcherServlet 发送请求到控制器中执行特定的功能。<strong>@Controller 注释表明一个特定类是一个控制器的作用。@RequestMapping 注释用于映射 URL 到整个类或一个特定的处理方法。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span><span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">printHello</span><span class="token punctuation">(</span>ModelMap model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello Spring MVC Framework!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>@Controller 注释定义该类作为一个 Spring MVC 控制器。在这里，第一次使用的 @RequestMapping 表明在该控制器中处理的所有方法都是相对于 /hello 路径的。下一个注释 @RequestMapping(method = RequestMethod.GET) 用于声明 printHello() 方法作为控制器的默认 service 方法来处理 HTTP GET 请求。你可以在相同的 URL 中定义其他方法来处理任何 POST 请求。</p></blockquote><p>你可以用另一种形式来编写上面的控制器，你可以在 @RequestMapping 中添加额外的属性，如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span><span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">printHello</span><span class="token punctuation">(</span>ModelMap model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello Spring MVC Framework!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值属性表明 URL 映射到哪个处理方法，方法属性定义了 service 方法来处理 HTTP GET 请求。关于上面定义的控制器，这里有以下几个要注意的要点：</p><ul><li>你将在一个 service 方法中定义需要的业务逻辑。你可以根据每次需求在这个方法中调用其他方法。</li><li>基于定义的业务逻辑，你将在这个方法中创建一个模型。你可以设置不同的模型属性，这些属性将被视图访问并显示最终的结果。这个示例创建了一个带有属性 “message” 的模型。</li><li>一个定义的 service 方法可以返回一个包含视图名称的字符串用于呈现该模型。这个示例返回 “hello” 作为逻辑视图的名称。</li></ul><h4 id="Spring-MVC-Hello-World-例子"><a href="#Spring-MVC-Hello-World-例子" class="headerlink" title="Spring MVC Hello World 例子"></a>Spring MVC Hello World 例子</h4><ul><li>创建一个名称为 HelloWeb 的动态 Web 项目，并且在已创建的项目的 src 文件夹中创建一个包 com.tutorialspoint。</li><li>将上面提到的 Spring 和其他库拖拽到文件夹 WebContent/WEB-INF/lib 中。</li><li>在 com.tutorialspoint 包下创建一个 Java 类 HelloController。</li><li>在 WebContent/WEB-INF 文件夹下创建 Spring 的配置文件 Web.xml 和 HelloWeb-servlet.xml。</li><li>在 WebContent/WEB-INF 文件夹下创建名称为 jsp 的子文件夹。在这个子文件夹下创建一个视图文件 hello.jsp。</li><li>最后一步是创建所有的源代码和配置文件的内容，并导出该应用程序，正如下面解释的一样。</li></ul><p>该项目所需要的包<br><img src="https://s2.ax1x.com/2019/09/15/ng1BOU.png" alt></p><p>helloController.java文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tutorialspoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>ModelMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">printHello</span><span class="token punctuation">(</span>ModelMap model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//添加属性</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello Spring MVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会将.jsp文件放在此目录下</p><pre class="line-numbers language-xml"><code class="language-xml">property name="prefix" value="/WEB-INF/jsp/" /><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>HelloWeb-servlet.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tutorialspoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>HelloWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>         org.springframework.web.servlet.DispatcherServlet      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在WEB-INF下的子文件jsp下的文件hello.jsp</p><pre class="line-numbers language-html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>${message}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-MVC-表单处理例子"><a href="#Spring-MVC-表单处理例子" class="headerlink" title="Spring MVC 表单处理例子"></a>Spring MVC 表单处理例子</h4><ul><li>创建一个名称为 HelloWeb 的动态 Web 项目，并且在已创建的项目的 src 文件夹中创建一个包 com.tutorialspoint。</li><li>将上面提到的 Spring 和其他库拖拽到文件夹 WebContent/WEB-INF/lib 中。</li><li>在 com.tutorialspoint 包下创建一个 Java 类 Student 和 StudentController。</li><li>在 WebContent/WEB-INF 文件夹下创建 Spring 的配置文件 Web.xml 和 HelloWeb-servlet.xml。</li><li>在 WebContent/WEB-INF 文件夹下创建名称为 jsp 的子文件夹。在这个子文件夹下创建视图文件 student.jsp 和 result.jsp。</li><li>最后一步是创建所有的源代码和配置文件的内容，并导出该应用程序，正如下面解释的一样。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息学习--Linux</title>
      <link href="/2019/09/05/web-an-quan-2/"/>
      <url>/2019/09/05/web-an-quan-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux知识"><a href="#Linux知识" class="headerlink" title="Linux知识"></a>Linux知识</h1><h3 id="Linux系统目录结构"><a href="#Linux系统目录结构" class="headerlink" title="Linux系统目录结构"></a>Linux系统目录结构</h3><p>使用 Linux 时，通过命令行输入 ls -l / 可以看到，在** Linux 根目录（/）下包含很多的子目录（称为一级目录）<strong>，例如 bin、boot、dev 等。同时，</strong>各一级目录下还含有很多子目录（称为二级目录）**，比如 /bin/bash、/bin/ed 等。Linux 文件系统目录总体呈现树形结构，/ 根目录就相当于树根。</p><h4 id="Linux-根目录"><a href="#Linux-根目录" class="headerlink" title="Linux 根目录(/)"></a>Linux 根目录(/)</h4><p><img src="https://s2.ax1x.com/2019/09/13/nr6w5T.md.png" alt><br>Linux 系统的根目录（/）最为重要（没有之一），其原因有以下 2 点：</p><ul><li>所有目录都是由根目录衍生出来的；</li><li>根目录与系统的开机、修复、还原密切相关；<br>因此，<strong>根目录必须包含开机软件、核心文件、开机所需程序、函数库、修复系统程序等文件，</strong></li></ul><table><thead><tr><th>一级目录</th><th>功能（作用）</th></tr></thead><tbody><tr><td>/bin</td><td>存放系统命令，普通用户和 root 都可以执行。放在 /bin 下的命令在单用户模式下也可以执行</td></tr><tr><td>/boot</td><td>系统启动目录，保存与系统相关的文件，如内核文件和启动引导程序(grub)文件等</td></tr><tr><td>/dev</td><td>设备文件保存位置</td></tr><tr><td>/etc</td><td>配置文件保存位置。系统内所有采用默认安装方式（rpm 安装）的服务配置文件全部保存在此目录中，如用户信息、服务的启动脚本、常用服务的配置文件等</td></tr><tr><td>/home</td><td>普通用户的主目录（也称为家目录）。在创建用户时，每个用户要有一个默认登录和保存自己数据的位置，就是用户的主目录，所有普通用户的主目录是在 /home/ 下建立一个和用户名相同的目录。如用户 liming 的主目录就是 /home/liming</td></tr><tr><td>/lib</td><td>系统调用的函数库保存位置</td></tr><tr><td>/media</td><td>挂载目录。系统建议用来挂载媒体设备，如软盘和光盘</td></tr><tr><td>/mnt</td><td>挂载目录。早期 Linux 中只有这一个挂载目录，并没有细分。系统建议这个目录用来挂载额外的设备，如 U 盘、移动硬盘和其他操作系统的分区</td></tr><tr><td>/misc</td><td>挂载目录。系统建议用来挂载 NFS 服务的共享目录。虽然系统准备了三个默认挂载目录 /media/、/mnt/、/misc/，但是到底在哪个目录中挂载什么设备可以由管理员自己决定</td></tr><tr><td>/opt</td><td>第三方安装的软件保存位置。这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。/usr/local/ 目录也可以用来安装软件</td></tr><tr><td>/root</td><td>root 的主目录。普通用户主目录在 /home/ 下，root 主目录直接在“/”下</td></tr><tr><td>/sbin</td><td>保存与系统环境设置相关的命令，只有 root 可以使用这些命令进行系统环境设置，但也有些命令可以允许普通用户查看</td></tr><tr><td>/srv</td><td>服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据</td></tr><tr><td>/temp</td><td>临时目录。系统存放临时文件的目录，在该目录下，所有用户都可以访问和写入。建议此目录中不能保存重要数据，最好每次开机都把该目录清空</td></tr><tr><td>/lost+found</td><td>当系统意外崩溃或意外关机时，产生的一些文件碎片会存放在这里。在系统启动的过程中，fsck 工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如，/lost+found 就是根分区的备份恢复目录，/boot/lost+found 就是 /boot 分区的备份恢复目录</td></tr><tr><td>/proc</td><td>虚拟文件系统。该目录中的数据并不保存在硬盘上，而是保存到内存中。主要保存系统的内核、进程、外部设备状态和网络状态等。如 /proc/cpuinfo 是保存 CPU 信息的，/proc/devices 是保存设备驱动的列表的，/proc/filesystems 是保存文件系统列表的，/proc/net 是保存网络协议信息的……</td></tr><tr><td>/sys</td><td>虚拟文件系统。和 /proc/ 目录相似，该目录中的数据都保存在内存中，主要保存与内核相关的信息</td></tr></tbody></table><h4 id="Linux-usr目录"><a href="#Linux-usr目录" class="headerlink" title="Linux /usr目录"></a>Linux /usr目录</h4><p>usr（注意不是 user），全称为<code>Unix Software Resource</code>，此目录用于存储系统软件资源。FHS 建议所有开发者，<strong>应把软件产品的数据合理的放置在 /usr 目录下的各子目录中，而不是为他们的产品创建单独的目录。</strong><br>Linux 系统中，所有系统默认的软件都存储在 /usr 目录下，/usr 目录类似 <strong>Windows 系统中 C:\Windows\ + C:\Program files\ 两个目录的综合体。</strong><br>FHS 建议，/usr 目录应具备下表所示的子目录。</p><table><thead><tr><th>子目录</th><th>功能（作用）</th></tr></thead><tbody><tr><td>/usr/bin</td><td>存放系统命令，普通用户和超级用户都可以执行。这些命令和系统启动无关，在单用户模式下不能执行</td></tr><tr><td>/usr/sbin</td><td>存放根文件系统不必要的系统管理命令，如多数服务程序，只有 root 可以使用。</td></tr><tr><td>/usr/lib</td><td>应用程序调用的函数库保存位置</td></tr><tr><td>/usr/XllR6</td><td>图形界面系统保存位置</td></tr><tr><td>/usr/local</td><td>手工安装的软件保存位置。我们一般建议源码包软件安装在这个位置</td></tr><tr><td>/usr/share</td><td>应用程序的资源文件保存位置，如帮助文档、说明文档和字体目录</td></tr><tr><td>/usr/src</td><td>源码包保存位置。我们手工下载的源码包和内核源码包都可以保存到这里。不过有人更习惯把手工下载的源码包保存到 /usr/local/src/ 目录中，把内核源码保存到 /usr/src/linux/ 目录中</td></tr><tr><td>/usr/include</td><td>C/C++ 等编程语言头文件的放置目录</td></tr></tbody></table><h4 id="Linux-var-目录"><a href="#Linux-var-目录" class="headerlink" title="Linux /var 目录"></a>Linux /var 目录</h4><p>/var 目录用于存储动态数据，例如缓存、日志文件、软件运行过程中产生的文件等。通常，此目录下建议包含如下表所示的这些子目录。</p><table><thead><tr><th>/var子目录</th><th>功能（作用）</th></tr></thead><tbody><tr><td>/var/lib</td><td>程序运行中需要调用或改变的数据保存位置。如 MySQL 的数据库保存在 /var/lib/mysql/ 目录中</td></tr><tr><td>/var/log</td><td>登陆文件放置的目录，其中所包含比较重要的文件如 /var/log/messages, /var/log/wtmp 等。</td></tr><tr><td>/var/run</td><td>一些服务和程序运行后，它们的 PID（进程 ID）保存位置</td></tr><tr><td>/var/spool</td><td>里面主要都是一些临时存放，随时会被用户所调用的数据，例如 /var/spool/mail/ 存放新收到的邮件，/var/spool/cron/ 存放系统定时任务。</td></tr><tr><td>/var/www</td><td>RPM 包安装的 Apache 的网页主目录</td></tr><tr><td>/var/nis和/var/yp</td><td>NIS 服务机制所使用的目录，nis 主要记录所有网络中每一个 client 的连接信息；yp 是 linux 的 nis 服务的日志文件存放的目录</td></tr><tr><td>/var/tmp</td><td>一些应用程序在安装或执行时，需要在重启后使用的某些文件，此目录能将该类文件暂时存放起来，完成后再行删除</td></tr></tbody></table><p>图形界面切换到字符界面：<strong><em>CTRL+ALT+F2</em></strong><br>字符界面切换到图像界面：<strong><em>CTRL+ALT+F1</em></strong></p><h3 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h3><p>用于实现某一类功能的指令或程序，<strong>命令的执行依赖于解释器程序（例如：/bin/bash）</strong></p><h4 id="Linux命令的分类"><a href="#Linux命令的分类" class="headerlink" title="Linux命令的分类"></a>Linux命令的分类</h4><p>内部命令：属于She11解释器的一部分（安装完操作系统所带来的命令）<br>外部命令：独立于Shel1解释器之外的程序文件（安装外部软件所产生的能使用的命令）</p><h4 id="Linux命令的通用命令格式"><a href="#Linux命令的通用命令格式" class="headerlink" title="Linux命令的通用命令格式"></a>Linux命令的通用命令格式</h4><p>命令字 [选项][参数]<br>选项及参数含义</p><ul><li>选项：用于调节命令的具体功能</li><li>以”-“引导短格式选项（单个字符），例如”-l”</li><li>以“- -”引导长格式选项（多个字符），例如“- -color”</li><li>多个短格式选项可以写在一起，只用一个”-“引导，例如“-a&quot;<br>参数：命令操作的对象，如文件、目录名等</li></ul><p>例子：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost~]# ls -l /home总计0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><em>/home （ / 代表绝对目录下的文件）</em></strong></p><h4 id="命令行编辑的几个辅助操作"><a href="#命令行编辑的几个辅助操作" class="headerlink" title="命令行编辑的几个辅助操作"></a>命令行编辑的几个辅助操作</h4><p><strong>Tab键：自动补齐</strong><br><strong>反斜杠”&quot;：强制换行</strong><br><strong>快捷键Ctrl+U：清空至行首</strong><br><strong>快捷键Ctrl+K：清空至行尾</strong><br><strong>快捷键 Ctrl+L：清屏</strong><br><strong>快捷键Ctr1+C：取消本次命令编辑</strong></p><p>“–help”查看帮助</p><h4 id="uname命令"><a href="#uname命令" class="headerlink" title="uname命令"></a>uname命令</h4><ul><li>查看系统相关信息</li><li>常用命令选项：<ul><li>-a：显示主机名、内核版本、硬件平台等详细信息</li><li>-r：显示内核版本</li></ul></li></ul><p><code>which uname :</code> 可以查看这个命令的位置</p><h4 id="hostname（Windows下一样适用）"><a href="#hostname（Windows下一样适用）" class="headerlink" title="hostname（Windows下一样适用）"></a>hostname（Windows下一样适用）</h4><p>查看当前主机用户名</p><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>查看ip地址子网掩码等信息<br>eth0 是自己的信息</p><p><img src="https://s2.ax1x.com/2019/09/13/nr5kP1.png" alt></p><h4 id="查看cpu信息"><a href="#查看cpu信息" class="headerlink" title="查看cpu信息"></a>查看cpu信息</h4><p><strong>cat /proc/cpuinfo **<br>**cat /proc/meminfo</strong><br><strong>* 注意空格*</strong></p><h4 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h4><p>halt：关机<br>reboot：重启<br>shutdown -h now：也可以关机<br>shutdown -r now：也可以重启</p><h4 id="查看及切换目录"><a href="#查看及切换目录" class="headerlink" title="查看及切换目录"></a>查看及切换目录</h4><p>pwd命令：查看当前工作的目录（print working directory）<br>cd命令：切换工作目录（change directory）</p><ul><li>绝对路径：cd /etc/httpd/</li><li>相对路径：cd conf</li></ul><h4 id="目录操作命令—-ls"><a href="#目录操作命令—-ls" class="headerlink" title="目录操作命令—-ls"></a>目录操作命令—-ls</h4><p>用途：列表（List）显示目录内容格式：1s[选项]..[目录或文件名]<br>常用命令选项</p><ul><li>-1：以长格式显示</li><li>-a：显示所有子目录和文件的信息，包括隐藏文件</li><li>-A：类似于“-a”，但不显示“.”和..”目录的信息</li><li>-d：显示目录本身的属性</li><li>-h：以更易读的字节单位（K、M等）显示信息</li><li>-color：以颜色区分不同类型文件</li></ul><h4 id="目录操作命令——du"><a href="#目录操作命令——du" class="headerlink" title="目录操作命令——du"></a>目录操作命令——du</h4><p>用途：统计目录及文件的空间占用情况（estimate file space usage）<br>格式：du[选项]..[目录或文件名]<br>常用命令选项</p><ul><li>-a：统计时包括所有的文件，而不仅仅只统计目录</li><li>-h：以更易读的字节单位（K、M等）显示信息</li><li>-s：只统计每个参数所占用空间总的大小</li></ul><p>结合<br><code>du -sh /home</code>（注意空格）</p><h4 id="创建目录命令——mkdir"><a href="#创建目录命令——mkdir" class="headerlink" title="创建目录命令——mkdir"></a>创建目录命令——mkdir</h4><p>mkdir命令<br>用途：创建新的目录（Make Directory）<br>格式： <strong>mkdir[-p][/路径/]门目录名</strong><br><strong><em>-p是递归创建，没有文件可以逐级创建</em></strong><br>示例： mkdir -p /multimedia/movie/cartoon</p><h4 id="创建文件命令——touch"><a href="#创建文件命令——touch" class="headerlink" title="创建文件命令——touch"></a>创建文件命令——touch</h4><p>用途：新建空文件，或更新文件时间标记<br>格式：touch 文件名…<br><strong>执行该命令之后，如果目录下没有该文件则创建文件，如果有该文件则修改此文件的日期</strong></p><h4 id="创建连接文件—In"><a href="#创建连接文件—In" class="headerlink" title="创建连接文件—In"></a>创建连接文件—In</h4><p>用途：为文件或目录建立链接（Link）<br>格式：1n [-s] 源文件或目录…链接文件或目标目录<br>常用命令选项</p><ul><li>-s：建立符号链接文件（省略此项则建立硬链接）</li></ul><p><strong>差不多创建了一个快捷方式 如果不加-s就相当于复制了一份</strong><br>示例：<code>in -s /etc/resolv.conf /root/resolv.conf</code></p><h4 id="复制文件或目录—cp"><a href="#复制文件或目录—cp" class="headerlink" title="复制文件或目录—cp."></a>复制文件或目录—cp.</h4><p>用途：复制（Copy）文件或目录格式：cp[选项]…源文件或目录…目标文件或目录<br>常用命令选项</p><ul><li>-r：递归复制整个目录树</li><li>-p：保持源文件的属性不变</li><li>-f：强制覆盖目标同名文件或目录</li><li>-i：需要覆盖文件或目录时进行提醒</li></ul><h4 id="删除文件或目录—rm"><a href="#删除文件或目录—rm" class="headerlink" title="删除文件或目录—rm"></a>删除文件或目录—rm</h4><p>用途：删除（Remove）文件或目录格式：rm[选项]令或目录<br>常用命令选项</p><ul><li>-f：强行删除文件或目录，不进行提醒</li><li>-i：删除文件或目录时提醒用户确认</li><li>-r：递归删除整个目录树</li></ul><p>示例：rm -rf 文件名</p><h4 id="移动文件或目录—mv"><a href="#移动文件或目录—mv" class="headerlink" title="移动文件或目录—mv"></a>移动文件或目录—mv</h4><p>用途：移动（Move）文件或目录，若如果目标位置与源位置相同，则相当于改名<br>格式：mv[选项]…源文件或目录…目标文件或目录</p><h4 id="查找文件或目录——find"><a href="#查找文件或目录——find" class="headerlink" title="查找文件或目录——find"></a>查找文件或目录——find</h4><p>用途：用于查找文件或目录格式：find[查找范围][董找条件]<br>常用查找条件</p><ul><li>-name：按文件名称查找</li><li>-size：按文件大小查找</li><li>-user：按文件属主查找</li><li>-type：按文件类型查找</li></ul><p>示例：<code>find /etc -name &quot;resol.conf&quot;</code></p><h4 id="进入vi"><a href="#进入vi" class="headerlink" title="进入vi"></a>进入vi</h4><p>vi是一个较大的UNIX命令，在启动的时候也有它自己的选项和参数<br>基本语法：<br>vi[-options] [+[n]] [file]<br>常用选项有：-r，-R</p><ul><li>-r用于恢复系统突然崩溃时正在编辑的文件</li><li>-R用于以只读方式打开文件</li><li>+n用来指明进入vi后直接位于文件的第n行，如果不指定n，则位于最后一行</li></ul><p>文本插入<br>在命令方式下使用某些命令会导致vi马上进入文本插入方式，这些命令包括：i，I，a，A，o，0等<br>在这种方式下用户的任何输入都被当作是文件的内容看待，并将其显示在屏幕上。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>a</td><td>在光标后附加文本</td></tr><tr><td>A</td><td>在本行行末附加文本</td></tr><tr><td>i</td><td>在光标前插入文本</td></tr><tr><td>I</td><td>在本行开始插入文本</td></tr><tr><td>o</td><td>在光标下插入新行</td></tr><tr><td>O</td><td>在光标上插入新行</td></tr></tbody></table><h3 id="使用文本编辑器vi常用命令"><a href="#使用文本编辑器vi常用命令" class="headerlink" title="使用文本编辑器vi常用命令"></a>使用文本编辑器vi常用命令</h3><p>vi就是一种功能强大的文本编辑器，而vim则是高级版的vi，</p><h4 id="vi的三种模式及各个模式之间的转换关系"><a href="#vi的三种模式及各个模式之间的转换关系" class="headerlink" title="vi的三种模式及各个模式之间的转换关系"></a>vi的三种模式及各个模式之间的转换关系</h4><p><img src="https://s2.ax1x.com/2019/09/13/nsmvrt.png" alt></p><h4 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h4><blockquote><p>ctrl+u：向上翻半页<br>  ctrl+f：向上翻一页<br>  ctrl+d：向下翻半页<br>ctrl+b：向下翻一页</p></blockquote><h4 id="移动光标指令"><a href="#移动光标指令" class="headerlink" title="移动光标指令"></a>移动光标指令</h4><blockquote><p>0: 光标移至当前行首<br>$: 光标移至当前行尾</p></blockquote><h4 id="常用插入、删除指令"><a href="#常用插入、删除指令" class="headerlink" title="常用插入、删除指令"></a>常用插入、删除指令</h4><blockquote><p>i：在当前光标前插入，光标后文本向后移<br>  dd: 删除光标所在的行<br>  yy：复制当前行正行内容到剪切板<br>  p：粘贴剪切板中的内容到当前光标位置之后<br>  P：粘贴剪切板中的内容到当前光标位置之前<br>  s: 从当前光标位置处开始，以输入的文本替代指定数目的字符<br>  S: 删除指定数目的行，并以所输入文本代替之<br>  do: 删至行首<br>d$: 删至行尾</p></blockquote><h4 id="vi查找、保存和退出"><a href="#vi查找、保存和退出" class="headerlink" title="vi查找、保存和退出"></a>vi查找、保存和退出</h4><blockquote><p>按u——取消最近一次操作，可按多次，类似撤销。<br> 按U——取消当前行所做的所有编辑。<br> :w ——保存当前文件<br> :wq —— 存盘退出(与指令 :x 功能相同)<br> :q —— 直接退出，如已修改会提示是否保存<br>:q! ——不保存直接退出</p></blockquote><h4 id="打开新文件或读入其它文件内容"><a href="#打开新文件或读入其它文件内容" class="headerlink" title="打开新文件或读入其它文件内容"></a>打开新文件或读入其它文件内容</h4><p>在当前vi编辑器中，执行<strong>“:e 新的文件”</strong>形式的末行命令可以编辑新文件。<br>在当前vi编辑器中，执行<strong>“:r 其他文件”</strong>形式的末行命令读入其他文件的内容，将其复制到当前光标的所在位置。<br>在当前vi编辑器中，执行<strong>“:r !命令”</strong>形式的莫行模式，可以将其他命令的输出粘贴至文本文件光标所在位置。<br>在末行模式执行<strong>“set number “</strong>命令可显示行号，执行<strong>“set nonu”</strong>取消显示行号。</p><h4 id="vim编辑器有用的参数"><a href="#vim编辑器有用的参数" class="headerlink" title="vim编辑器有用的参数"></a>vim编辑器有用的参数</h4><blockquote><p>vim -o file1  file2;将同时打开两个文件，上下显示，使用ctrl+w切换文件。<br>vim -O file1  file2；将同时打开两个文件，左右显示，使用ctrl+ww切换文件。</p></blockquote><h4 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>/string</td><td>向前搜索指定字符串搜索时忽略大小写：set ic搜索指定字符串的下一个出现位置</td></tr><tr><td>：%s/old/new/g（有g会提示是否替换）</td><td>全文替换指定字符串</td></tr><tr><td>：n1，n2s/old/new/g（有g会提示是否替换）</td><td>在一定范围内替换指定字符串</td></tr></tbody></table><h4 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h4><ul><li>cat 显示出文件的全部内容</li><li>-n给输出的所有行加上编号</li><li>cat 1 2 &gt; 3 合并文件，将文件1和2合并到3如cat123..&gt;n</li></ul><p>示例：``cat 文件名或目录</p><h4 id="Wc统计文件中的单次数量字节数行数"><a href="#Wc统计文件中的单次数量字节数行数" class="headerlink" title="Wc统计文件中的单次数量字节数行数"></a>Wc统计文件中的单次数量字节数行数</h4><ul><li>wc统计文件中的单次数量字节数行数</li><li>-1统计行数</li><li>-w统计单词数</li><li>-c统计字符数</li><li>wc sdxh.txt 会出现 2 4 26 ，2是行数4是单词数26是字符数</li><li>history 查看历史命令</li></ul><h4 id="归档和压缩命令-gzip-bzip2"><a href="#归档和压缩命令-gzip-bzip2" class="headerlink" title="归档和压缩命令 gzip bzip2"></a>归档和压缩命令 gzip bzip2</h4><p>只针对单个文件压缩或</p><ul><li>-g显示高压缩比</li><li>-d释放压缩文件</li><li>gzip文件名压缩文件格式为后缀有.gz</li><li>bzip2文件名压缩成的文件名格式为文件</li><li>名.bz2它相对与gzip压缩率更高</li></ul><p>示例：<code>dzip -d 文件名</code> <code>gzip [-g] 文件名 压缩文件名.gz</code></p><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>tar 归档命令 释放归档文件 没有压缩功能<br>格式 tar 选项 归档文件名 源文件或目录</p><ul><li>-c 创建归档文件扩展名为.tar</li><li>-v输出详细信息</li><li>-f表示使用归档文件如</li><li>-cvf创建归档文件</li><li>tar -cvf 4.tar 1 2 3 将文件 1 2 3 打包归档为 4.tar</li><li>tar-xvf 4.tar 解包归档文件 4.tar-xvf 解包归档文件</li><li>-x解开归档文件</li><li>-t列表查看包内的文件（不释放解包）</li></ul><h4 id="修改文件的权限-rwx-421"><a href="#修改文件的权限-rwx-421" class="headerlink" title="修改文件的权限(rwx-421)"></a>修改文件的权限(rwx-421)</h4><p>示例：chmod 777   代表给所有权限</p><h4 id="安装、升级、卸载RPM软件包"><a href="#安装、升级、卸载RPM软件包" class="headerlink" title="安装、升级、卸载RPM软件包"></a>安装、升级、卸载RPM软件包</h4><p>安装或升级RPM软件<br>格式：rpm[选项]RM包文件用法：不同选项适用于不同情况</p><ul><li>i：安装一个新的rpm软件包</li><li>U：升级某个rpm软件，若原本未装，则进行安装</li><li>F：更新某个rpm软件，若原本未装，则放弃安装</li><li>卸载指定的RPM软件格式：rpm-e软件名</li></ul><blockquote><p>安装：rpm -ivh 文件名<br>指定目录： rpm -ivh /media/Packages/文件名<br>卸载RPM软件包：rpm -e man(文件)<br>查看已安装软件：rpm -qa [man—man是否安装]<br>查看详细的安装信息：rpm -qi man(文件)<br>查看安装目录：rpm -ql man(文件)</p></blockquote><p>安装firefox<br>vi /etc/yum.repos.d/rhel-source.repos</p><h5 id="apt-get-，dpkg"><a href="#apt-get-，dpkg" class="headerlink" title="apt-get ，dpkg"></a>apt-get ，dpkg</h5><ul><li>apt-get instal xxx:直接联网下载</li><li>dpkg -i xxx</li><li>dpkg -l </li><li>dpkg -r xxx</li></ul><h4 id="添加用户账号"><a href="#添加用户账号" class="headerlink" title="添加用户账号"></a>添加用户账号</h4><p>useradd命令</p><blockquote><p>格式：useradd[选项].用户名</p></blockquote><p>常用命令选项</p><ul><li>-u：指定UID标记号</li><li>-d：指定宿主目录，缺省为/home用户名</li><li>-e：指定帐号失效时间</li><li>-g：指定用户的基本组名（或UID号）</li><li>-G：指定用户的附加组名（或GID号）</li><li>-M：不为用户建立并初始化宿主目录</li><li>-s：指定用户的登录Shel1</li></ul><blockquote><p>添加用户 ：useradd Ryou(username)<br>查看用户 ：ls /home<br>切换用户 ：su - Ryou(注意空格)<br>设置密码 ：passwd Ryou<br>删除用户 ：userdel [-r–可以更深入删除] Ryou</p></blockquote><h3 id="linux-网络"><a href="#linux-网络" class="headerlink" title="linux 网络"></a>linux 网络</h3><h4 id="网卡类型"><a href="#网卡类型" class="headerlink" title="网卡类型"></a>网卡类型</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>eth0</td><td>以太网</td></tr><tr><td>lo</td><td>(虚拟)回环设备</td></tr><tr><td>ppp0</td><td>使用ppp协议的串口设备(通常指调制调节器)</td></tr><tr><td>tr0</td><td>令牌环(Token Ring)</td></tr><tr><td>fddi0</td><td>光纤</td></tr></tbody></table><h4 id="查看网络连接情况——netstat"><a href="#查看网络连接情况——netstat" class="headerlink" title="查看网络连接情况——netstat"></a>查看网络连接情况——netstat</h4><p>netstat命令<br>查看系统的网络连接状态、路由表、接口统计等信息</p><blockquote><p>格式：netstat[选项]</p></blockquote><p>常用选项：</p><blockquote><ul><li>-a：显示所有活动连接 </li><li>-n：以数字形式显示</li><li>-p：显示进程信息</li><li>-t：查看TCP协议相关信息</li><li>-u：查看UDP协议相关信息</li><li>-r：显示路由表信息</li></ul></blockquote><h4 id="设置路由记录——route"><a href="#设置路由记录——route" class="headerlink" title="设置路由记录——route"></a>设置路由记录——route</h4><p>删除路由表中的默认网关记录</p><blockquote><p>格式：route del default gw IP地址</p></blockquote><p>向路由表中添加默认网关记录</p><blockquote><p>格式：route add default gwP地址</p></blockquote><p>添加到指定网段的路由记录</p><blockquote><p>格式：route add-net网段地址/24gwIP地址</p></blockquote><p>删除到指定网段的路由记录</p><blockquote><p>格式：route del-net 网段地址</p></blockquote><h4 id="网络接口配置文件"><a href="#网络接口配置文件" class="headerlink" title="网络接口配置文件"></a>网络接口配置文件</h4><p> /etc/sysconfig/network-scripts/目录下的<br>ifcfg-eth0：第1块以太网卡的配置文件<br>ifcfg-eth1：第2块以太网卡的配置文件<br>示例：</p><blockquote><p>vi /etc/sysconfig/network-scripts/ifcfg-eth0</p></blockquote><h4 id="启用、禁用网络接囗配置"><a href="#启用、禁用网络接囗配置" class="headerlink" title="启用、禁用网络接囗配置"></a>启用、禁用网络接囗配置</h4><p>重启network网络服务。</p><blockquote><p>service network restart</p></blockquote><p>禁用、启用网络接口</p><blockquote><p>[root@localhost”]#ifdown etho<br>[root@localhost ~]#ifup etho</p></blockquote><h4 id="域名解析配置文件"><a href="#域名解析配置文件" class="headerlink" title="域名解析配置文件"></a>域名解析配置文件</h4><p>/etc/resolv.conf文件<br>用途：保存本机需要使用的DNS服务器的IP地址</p><blockquote><p>[root@localhost ~]#vi/etc/resolv.conf </p></blockquote><h3 id="linux-下配置网站"><a href="#linux-下配置网站" class="headerlink" title="linux 下配置网站"></a>linux 下配置网站</h3><p>安装相关软件</p><blockquote><p>yum -y install httpd php mysql mysql-server php-server</p></blockquote><p>启动阿帕奇服务器</p><blockquote><p>service httpd start</p></blockquote><p>启动mysql</p><blockquote><p>service mysqld start</p></blockquote><p>修改MySQL密码</p><blockquote><p>mysqladmin -uroot password (密码)</p></blockquote><p>清空防火墙</p><blockquote><p>iptables -F</p></blockquote><p>递归修改apache对www文件的管理权限</p><blockquote><p>在var目录下<br>chown -R apache www</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery</title>
      <link href="/2019/09/03/jquery/"/>
      <url>/2019/09/03/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><h3 id="Hello-JQuery"><a href="#Hello-JQuery" class="headerlink" title="Hello JQuery"></a>Hello JQuery</h3><p>JQuery是一个javascript的框架，是对javascript的一种封装。通过JQuery可以非常方便的操作html的元素 </p><h4 id="使用JQuery进行隐藏和显示"><a href="#使用JQuery进行隐藏和显示" class="headerlink" title="使用JQuery进行隐藏和显示"></a>使用JQuery进行隐藏和显示</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>隐藏div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jquery-min-js"><a href="#jquery-min-js" class="headerlink" title="jquery.min.js"></a>jquery.min.js</h4><p>要使用Jquery需要导入一个第三方的javascript库 jquery.min.js</p><h4 id="本地测试的时候如何使用-jquery-min-js"><a href="#本地测试的时候如何使用-jquery-min-js" class="headerlink" title="本地测试的时候如何使用 jquery.min.js"></a>本地测试的时候如何使用 jquery.min.js</h4><ul><li>首先在官网下载 jquery.min.js</li><li>把 jquery.min.js和测试的html放在同一个目录下</li><li>在测试的html中直接写 src=”jquery.min.js”</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scrip</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scrip</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="理解-function"><a href="#理解-function" class="headerlink" title="理解 $(function(){})"></a>理解 $(function(){})</h4><p>表示文档加载。看上去略复杂，其实是由下面两种构成：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>合并在一起就是：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码。<br>换句话说，写在这里面的JQuery代码都是文档加载好之后的。<br>就不会有获取一个还没有加载好的图片这种问题了。<br>一样功能，还有另一个写法</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它也是由两部分组成</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="通过id获取元素"><a href="#通过id获取元素" class="headerlink" title="通过id获取元素"></a>通过id获取元素</h4><p>与javascript通过id获取元素节点的方式(document.getElementById )不同,JQuery通过 $(“#id”) 就可以获取了<br>需要注意的是，通过 document.getElementById 获取到的是 DOM里的 元素节点,而通过$(“#id”) 获取到的是一个 JQuery 对象</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello JQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增加监听器"><a href="#增加监听器" class="headerlink" title="增加监听器"></a>增加监听器</h4><p>JQuery增加click事件的监听</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点击了按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个也是由两部分组成：<br>1 . b1按钮的点击事件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2 . 弹出对话框的函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点击了按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>与原生javascript需要在html元素上增加监听事件不同的是<br><font color="red">JQuery 不需要在html元素上进行操作</font><br>这样的好处是，html只需要显示内容，特别是业务复杂起来之后维护js代码会更加容易。</p><h3 id="JQuery常用方法"><a href="#JQuery常用方法" class="headerlink" title="JQuery常用方法"></a>JQuery常用方法</h3><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><p>通过JQuery对象的val()方法获取值，相当于 document.getElementById(“input1”).value;</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#input1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>默认值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取元素内容-如果有子元素，保留标签"><a href="#获取元素内容-如果有子元素，保留标签" class="headerlink" title="获取元素内容,如果有子元素，保留标签"></a>获取元素内容,如果有子元素，保留标签</h4><p>通过html() 获取元素内容,如果有子元素，保留子标签及其内容</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是div的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>这是div里的span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取元素内容-如果有子元素，不包含子元素标签"><a href="#获取元素内容-如果有子元素，不包含子元素标签" class="headerlink" title="获取元素内容,如果有子元素，不包含子元素标签"></a>获取元素内容,如果有子元素，不包含子元素标签</h4><p>通过text() 获取元素内容,如果有子元素，不包含标签,但是有子标签的内容</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是div的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>这是div里的span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JQuery对css操作"><a href="#JQuery对css操作" class="headerlink" title="JQuery对css操作"></a>JQuery对css操作</h3><h4 id="增加class"><a href="#增加class" class="headerlink" title="增加class"></a>增加class</h4><p>通过addClass() 增加一个样式中的class</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>增加背景色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.pink</span></span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello JQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除class"><a href="#删除class" class="headerlink" title="删除class"></a>删除class</h4><p>通过removeClass() 删除一个样式中的class</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除背景色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.pink</span></span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello JQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切换class"><a href="#切换class" class="headerlink" title="切换class"></a>切换class</h4><p>通过toggleClass() 切换一个样式中的class<br>这里的切换，指得是： 如果存在就删除 ,如果不存在，就添加</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>切换背景色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.pink</span></span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>Hello JQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="css函数"><a href="#css函数" class="headerlink" title="css函数"></a>css函数</h4><p>通过css函数 直接设置样式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">css</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数是样式属性，第二个参数是样式值</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>p1<span class="token punctuation">:</span>v1<span class="token punctuation">,</span>p2<span class="token punctuation">:</span>v2<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数是 {} 包含的属性值对。<br>属性值对之间用 逗号，分割<br>属性值之间用 冒号 ：分割<br>属性和值都需要用引号 “</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"background-color"</span><span class="token punctuation">:</span><span class="token string">"pink"</span><span class="token punctuation">,</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"green"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置单一样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置多种样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>单一样式，只设置背景色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d2<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>多种样式，不仅设置背景色，还设置字体颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="筛选器"><a href="#筛选器" class="headerlink" title="筛选器"></a>筛选器</h3><p>筛选器指的是在已经通过选择器选中了元素后，在此基础上进一步选择。</p><table><thead><tr><th>关键字</th><th>简介</th></tr></thead><tbody><tr><td>first()，last()，eq(num)</td><td>第一个 ，最后一个 ，第几个</td></tr><tr><td>parent()，parents()</td><td>父 ，祖先</td></tr><tr><td>children()，find()</td><td>儿子， 后代</td></tr><tr><td>siblings()</td><td>同级</td></tr></tbody></table><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><p>通过attr()获取一个元素的属性</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"align属性是:"</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#h"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"align"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"game属性是:"</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#h"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"game"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取align属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取自定义属性 game<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">game</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>居中标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>通过attr(attr,value)修改属性</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#h"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"align"</span><span class="token punctuation">,</span><span class="token string">"right"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改align属性为right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>居中标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>通过removeAttr(attr)删除属性</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#h"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"align"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除align属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">game</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>居中标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="prop与attr的区别"><a href="#prop与attr的区别" class="headerlink" title="prop与attr的区别"></a>prop与attr的区别</h4><p>与prop一样attr也可以用来获取与设置元素的属性。<br>区别在于，对于自定义属性和选中属性的处理。<br>选中属性指的是 checked,selected 这2种属性</p><ul><li>对于自定义属性 attr能够获取，prop不能获取</li><li>对于选中属性<br>attr 只能获取初始值， 无论是否变化<br>prop 能够访问变化后的值，并且以true|false的布尔型返回。<br>所以在访问表单对象属性的时候，应该采用prop而非attr<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><script>$(function(){   $("#b1").click(function(){      alert("game属性是:" + $("#c").attr("game") );   });   $("#b2").click(function(){      alert("game属性是:" + $("#c").prop("game") );   });   $("#b3").click(function(){      alert("checked属性是:" + $("#c").attr("checked") );   });   $("#b4").click(function(){      alert("checked属性是:" + $("#c").prop("checked") );   });});</script><style>button{  display:block;}</style><p><button id="b1">通过attr获取自定义属性 game</button><br><button id="b2">通过prop获取自定义属性 game</button><br><button id="b3">通过attr获取 checked属性</button><br><button id="b4">通过prop获取 checked属性</button></p><br><br><p><input type="checkbox" id="c" game="LOL" checked="checked"> 选中的复选框</p><pre><code>### 效果#### 显示 隐藏 切换显示 隐藏 切换 分别通过show(), hide(),toggle()实现也可以加上毫秒数，表示延时操作,比如show(2000)```html&lt;script&gt;$(function(){var div = $(&quot;#d&quot;);   $(&quot;#b1&quot;).click(function(){      div.hide();   });   $(&quot;#b2&quot;).click(function(){      div.show();   });   $(&quot;#b3&quot;).click(function(){      div.toggle();   });   $(&quot;#b4&quot;).click(function(){      div.show(1000);   });   $(&quot;#b5&quot;).click(function(){      div.hide(1000);   });   $(&quot;#b6&quot;).click(function(){      div.toggle(1000);   });});&lt;/script&gt;</code></pre><h4 id="向上滑动-向下滑动-滑动切换"><a href="#向上滑动-向下滑动-滑动切换" class="headerlink" title="向上滑动 向下滑动 滑动切换"></a>向上滑动 向下滑动 滑动切换</h4><p>向上滑动 向下滑动 滑动切换 分别通过slideUp(), slideDown(),slideToggle()实现<br>也可以加上毫秒数，表示延时操作，比如slideUp(2000)</p><h4 id="淡入-淡出-淡入淡出切换-指定淡入程度"><a href="#淡入-淡出-淡入淡出切换-指定淡入程度" class="headerlink" title="淡入 淡出 淡入淡出切换 指定淡入程度"></a>淡入 淡出 淡入淡出切换 指定淡入程度</h4><p>淡入 淡出 淡入淡出切换 指定淡入程度 分别通过fadeIn(), fadeOut(),fadeToggle() fadeTo()实现<br>也可以加上毫秒数，表示延时操作，比如fadeIn(2000)<br>fadeTo跟的参数是0-1之间的小数。 0表示不淡入，1表示全部淡入</p><h4 id="自定义动画效果"><a href="#自定义动画效果" class="headerlink" title="自定义动画效果"></a>自定义动画效果</h4><p>通过animate 可以实现更为丰富的动画效果<br>animate()第一个参数为css样式<br>animate()第二个参数为延时毫秒<br><font color="red">注： 默认情况下，html中的元素都是固定，并且无法改变的位置的。 为了使用animate()自定义动画效果，需要通过css把元素的position设置为relative、absolute或者fixed。</font></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token string">'100px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token string">'0px'</span><span class="token punctuation">,</span>top<span class="token punctuation">:</span><span class="token string">'50px'</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token string">'50px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">button</span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>自定义动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>1. 向右移动100px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>2. 向左下移动50px，同时高度变小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>效果一般需要一定的时间，并且这个时间可长可短，所以就无法精确的确定该效果何时结束。<br>好在，效果方法都提供对回调函数callback()的支持。<br>只需要在调用效果方法的最后一个参数传入一个function，当效果结束的时候，就会自动调用该function了。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token string">'100px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token string">'0px'</span><span class="token punctuation">,</span>top<span class="token punctuation">:</span><span class="token string">'50px'</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token string">'50px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动画演示结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>页面加载有两种方式表示 </p><ul><li>$(document).ready(); </li><li>$(); 这种比较常用<br>图片加载用load()函数</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"页面加载成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"图片加载成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/example.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h4><p>click() 表示单击<br>dblclick() 表示双击<br><font color="red">注: 空白键和回车键也可以造成click事件，但是只有双击鼠标才能造成dblclick事件</font></p><h4 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h4><p>keydown 表示按下键盘<br>keypress 表示按住键盘<br>keyup 表示键盘弹起<br>这三者的区别分别表现在发生的 先后顺序，获取到的键盘按钮值，已经对输入框的文本取值这三方面<br>先后顺序： 按照 keydown keypress keyup 顺序发生<br>键盘按钮值：<br>通过event对象的which属性获取键盘的值<br>keydown和keyup 能获取所有按键，不能识别大小写<br>keypress 不能获取功能键，如F1 SHIFT等，能够识别大小写<br>文本取值：<br>keydown和keypress：不能获取最后一个字符<br>keyup： 获取所有字符<br>发生的先后顺序是 keydown,keypress,keyup<br>keydown和keyup取到大写B的ASCII码表 66,keypress取到小写b的ASCII码表 98.<br>keydown和keypress只能取到文本值a, keyup可以取到ab</p><h4 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h4><p>mousedown 表示鼠标按下<br>mouseup 表示鼠标弹起 </p><p>mousemove 表示鼠标进入<br>mouseenter 表示鼠标进入<br>mouseover 表示鼠标进入 </p><p>mouseleave 表示鼠标离开<br>mouseout 表示鼠标离开 </p><p>进入事件有3个 mousemove mouseenter mouseover<br>mousemove ：当鼠标进入元素，每移动一下都会被调用<br>mouseenter ：当鼠标进入元素，调用一下，在其中移动，不调用<br>mouseover：当鼠标进入元素，调用一下，在其中移动，不调用 </p><p>mouseenter 和 mouseover的区别<br>mouseenter: 当鼠标经过其子元素不会被调用<br>mouseover：当鼠标经过其子元素会被调用 </p><p>mouseleave 和 mouseout的区别<br>mouseleave: 当鼠标经过其子元素不会被调用<br>mouseout：当鼠标经过其子元素会被调用</p><h4 id="焦点"><a href="#焦点" class="headerlink" title="焦点"></a>焦点</h4><p>focus() 获取焦点<br>blur() 失去焦点</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"获取了焦点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"失去了焦点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h4><p>change() 内容改变<br><font color="red">注： 对于文本框，只有当该文本失去焦点的时候，才会触发change事件。</font></p><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>submit() 提交form表单</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/login.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>密码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登陆<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"提交账号密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h4><p>以上所有的事件处理，都可以通过on() 绑定事件来处理</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"selector"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"单击按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"dblclick"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"双击按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试单击和双击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h4><p>触发事件，在本例中，文档加载好之后，就触发dblclick双击事件，而不是通过去手动双击。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"selector"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"单击按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"dblclick"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"双击按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"dblclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试单击和双击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><h4 id="提交AJAX请求"><a href="#提交AJAX请求" class="headerlink" title="提交AJAX请求"></a>提交AJAX请求</h4><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   url<span class="token punctuation">:</span> page<span class="token punctuation">,</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span>   success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkResult"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$.ajax采用参数集的方式 {param1,param2,param3} 不同的参数之间用,隔开<br>第一个参数 url:page 表示访问的是page页面<br>第二个参数 data:{name:value} 表示提交的参数<br>第三个参数 success: function(){} 表示服务器成功返回后对应的响应函数</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>输入账号 :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyup</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> page <span class="token operator">=</span> <span class="token string">"/study/checkName.jsp"</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> page<span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkResult"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用get方式提交ajax"><a href="#使用get方式提交ajax" class="headerlink" title="使用get方式提交ajax"></a>使用get方式提交ajax</h4><p>$.get 是 $.ajax的简化版，专门用于发送GET请求</p><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>    page<span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkResult"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$.get 使用3个参数<br>第一个参数: page 访问的页面<br>第二个参数: {name:value} 提交的数据<br>第三个参数: function(){} 响应函数<br>只有第一个参数是必须的，其他参数都是可选</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>输入账号 :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyup</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> page <span class="token operator">=</span> <span class="token string">"/study/checkName.jsp"</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>            page<span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkResult"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用post方式提交ajax"><a href="#使用post方式提交ajax" class="headerlink" title="使用post方式提交ajax"></a>使用post方式提交ajax</h4><p>$.post 是 $.ajax的简化版，专门用于发送POST请求</p><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>    page<span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkResult"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$.post 使用3个参数<br>第一个参数: page 访问的页面<br>第二个参数: {name:value} 提交的数据<br>第三个参数: function(){} 响应函数<br>只有第一个参数是必须的，其他参数都是可选</p><h4 id="最简单的调用ajax的方式"><a href="#最简单的调用ajax的方式" class="headerlink" title="最简单的调用ajax的方式"></a>最简单的调用ajax的方式</h4><p>load比起 $.get,$.post 就更简单了<br>$(“#id”).load(page,[data]);<br>id: 用于显示AJAX服务端文本的元素Id<br>page: 服务端页面<br>data: 提交的数据，可选。 在本例中，直接在page里加上了参数列表</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>输入账号 :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyup</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> page <span class="token operator">=</span> <span class="token string">"/study/checkName.jsp?name="</span><span class="token operator">+</span>value<span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkResult"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格式化form下的输入数据"><a href="#格式化form下的输入数据" class="headerlink" title="格式化form下的输入数据"></a>格式化form下的输入数据</h4><p>serialize()： 格式化form下的输入数据<br>有的时候form下的输入内容比较多，一个一个的取比较麻烦，就可以使用serialize() 把输入数据格式化成字符串</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/checkName.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://how2j.cn/study/checkName.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   输入账号 :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>输入年龄 :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>输入手机号码 :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mobile<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mobile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyup</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"http://how2j.cn/study/checkName.jsp"</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> link <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"?"</span><span class="token operator">+</span> data<span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>$.each 遍历一个数组<br>第一个参数是数组<br>第二个参数是回调函数 i是下标，n是内容</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token string">"元素["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] : "</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">"&lt;br>"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="去除重复"><a href="#去除重复" class="headerlink" title="去除重复"></a>去除重复</h4><p>$.unique() 去掉重复的元<br><font color="red">注意 ： 执行unique之前，要先调用sort对数组的内容进行排序。</font></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token string">"元素["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] : "</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">"&lt;br>"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="是否存在-inArray"><a href="#是否存在-inArray" class="headerlink" title="是否存在$.inArray"></a>是否存在$.inArray</h4><p>$.inArray 返回元素在数组中的位置 ，如果不存在返回-1</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">inArray</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h4 id="去除首尾空白"><a href="#去除首尾空白" class="headerlink" title="去除首尾空白"></a>去除首尾空白</h4><p>$.trim() 去除首尾空白</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">" Hello JQuery    "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>将JSON格式的字符串，转换为JSON对象</p><h4 id="将JSON格式的字符串，转换为JSON对象"><a href="#将JSON格式的字符串，转换为JSON对象" class="headerlink" title="将JSON格式的字符串，转换为JSON对象"></a>将JSON格式的字符串，转换为JSON对象</h4><p>$.parseJSON 将JSON格式的字符串，转换为JSON对象</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">"{\"name\":\"盖伦\""</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string">",\"hp\":616}"</span><span class="token punctuation">;</span><span class="token keyword">var</span> s3 <span class="token operator">=</span> s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这是一个JSON格式的字符串:"</span> <span class="token operator">+</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> gareen <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这是一个JSON对象: "</span> <span class="token operator">+</span> gareen<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象转换"><a href="#对象转换" class="headerlink" title="对象转换"></a>对象转换</h3><p>通过get(0)或者[0] 把JQuery对象转为DOM对象</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> div<span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> d <span class="token operator">=</span> div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> s <span class="token operator">=</span><span class="token string">"JQuery对象是 "</span> <span class="token operator">+</span> div<span class="token punctuation">;</span>      s <span class="token operator">+</span><span class="token operator">=</span><span class="token string">"\n对应的DOM对象是 "</span> <span class="token operator">+</span> d      <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JQuery对象div转为DOM对象d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.pink</span></span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello JQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DOM转JQuery"><a href="#DOM转JQuery" class="headerlink" title="DOM转JQuery"></a>DOM转JQuery</h4><p>通过$() 把DOM对象转为JQuery对象</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/study/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> div<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> s <span class="token operator">=</span><span class="token string">"DOM对象是 "</span> <span class="token operator">+</span> div<span class="token punctuation">;</span>      s <span class="token operator">+</span><span class="token operator">=</span><span class="token string">"\n对应的JQuery对象是 "</span> <span class="token operator">+</span> d      <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>DOM对象div转为JQuery对象d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.pink</span></span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello JQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全</title>
      <link href="/2019/09/01/web-an-quan/"/>
      <url>/2019/09/01/web-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><p>超文本传输协议，所有的www文件都必须遵守这个协议</p><h4 id="http头讲解"><a href="#http头讲解" class="headerlink" title="http头讲解"></a>http头讲解</h4><ul><li>200/404 响应码</li><li>date 日期</li><li>content-type 类型（静态页面/动态页面）</li><li>Accept-Chaeset 浏览机器可接收的字符集（utf8）</li><li>Content-Length 表示请求消息正文的长度</li><li>Cookie 最重要的请求消息之一</li></ul><p>静态网站（安全性较高），没有数据库的连接，动态页面（安全性较低）则有数据库的连接<br>判断网站是windows还是linux，用字母大小写来判断，Windows对大小写不敏感，改变了还可以继续访问</p><h3 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h3><p>windows+iis+asp+access</p><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>首先，先将计算机配置成服务器计算机<br><img src="https://s2.ax1x.com/2019/09/01/npl8l6.jpg" alt><br><img src="https://s2.ax1x.com/2019/09/01/npl3Sx.png" alt><br><img src="https://s2.ax1x.com/2019/09/01/npllf1.png" alt><br>将箭头上的选项打开，确定后直接一直下一步就可以将服务器配置完成</p><h4 id="搭建网站"><a href="#搭建网站" class="headerlink" title="搭建网站"></a>搭建网站</h4><p>打开电脑的 Internet 信息服务(IIS)管理器 左击网站，新建网站，直接都是下一步就OK<br><img src="https://s2.ax1x.com/2019/09/01/np1DUJ.jpg" alt><br>将源码放在网站的资源管理器中</p><p>打开新建的网站的属性<br><img src="https://s2.ax1x.com/2019/09/01/np1r59.jpg" alt><br><img src="https://s2.ax1x.com/2019/09/01/np1dDU.png" alt><br><img src="https://s2.ax1x.com/2019/09/01/np1tg0.png" alt><br>打开web服务扩展<br><img src="https://s2.ax1x.com/2019/09/01/np1auT.png" alt><br>打开网络权限<br><img src="https://s2.ax1x.com/2019/09/01/np1NvV.png" alt><br>通过ipconfig在cmd中查询本机的ip地址，在浏览器中访问该IP地址，即可访问到此网站<br><img src="https://s2.ax1x.com/2019/09/01/np1wbF.jpg" alt></p><h3 id="windos重要文件目录一览"><a href="#windos重要文件目录一览" class="headerlink" title="windos重要文件目录一览"></a>windos重要文件目录一览</h3><p><font color="green">C:\Users\VULCAN\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</font><br>在该目录下的文件在电脑开机时就会自动启动<br><font color="green">C:\Windows\System32</font><br>此目录是放置系统配置文件的<br>如：<font color="green">C:\Windows\System32\config\SAM</font>该目录下是放置Windows用户的账号和密码的（无法打开）</p><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>服务：服务是一种应用程序类型，他在后台运行，服务应用程序通常可以在本地和通过网络为用户提供一些<br>功能，例如客户端/服务器应用程序，web服务器，数据库以及其他基于服务器的应用程序<br>打开电脑服务：<font color="green">Win + R -&gt; services.msc</font><br>或者在右击我的电脑打开计算机管理<br>服务的作用：</p><ul><li>服务决定了计算机的一些功能是否被启用</li><li>不同的服务对应的功能不同</li><li>通过计算机提供的服务可以有效实现资源共享</li></ul><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>计算机“端口”是英文port的义译，可以认为是计算机与外界通讯交流的出口。按端口号可分为3大类：公认端口（Well Known Ports）；注册端口（Registered Ports）；动态和/私有端口（Dynamic and/or Private Ports）</p><h4 id="端口的分类"><a href="#端口的分类" class="headerlink" title="端口的分类"></a>端口的分类</h4><h5 id="按端口号分布划分"><a href="#按端口号分布划分" class="headerlink" title="按端口号分布划分"></a>按端口号分布划分</h5><ul><li>知名端口（Well-Known Ports）<br>知名端口即众所周知的端口号，范围从0到1023，这些端口号一般固定分配给一些服务。比如21端口分配给P服务，25端口分配给SMTP（简单邮件传输协议）服务，80端口分配给HTTP服务，135端口分配给RPC（远程过程调用）服务等等。</li><li>动态端口（Dynamic Ports）<br>动态端口的范围从1024到65535，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用。比如1024端口就是分配给第一个向系统发出申请的程序。在关闭程序进程后，就会释放所占用的端口号。</li><li>不过，动态端口也常常被病毒木马程序所利用，如冰河默认连接端口是7626、WAY2.4是8011、Netspy 3.0是7306、YAI病毒是1024等等</li></ul><h5 id="按协议类型划分"><a href="#按协议类型划分" class="headerlink" title="按协议类型划分"></a>按协议类型划分</h5><p>按协议类型划分，可以分为TCP、UDP、IP和ICMP（Internet控制消息协议）等端口。<br>下面主要介绍TCP和UDP端囗：</p><ul><li>TCP端口，肌传输控制协议端口，需要在客户端和服务器之间建立连接，这样可以提供可靠的数据传输。<br>Telnet服务的23端口，SMTP服务的25端口，以及HTTP服务的80端口等</li><li>UDP端口即用户数据包协议端口，无需在客户端和服务器之间建立连接，安全性得不到保障。常见的有DNS服务的53端口，SNMP（简单网络管理协议）服务的161端口，QQ使用的8000和4000端口等等。</li></ul><h4 id="常见的端口-要求熟悉）"><a href="#常见的端口-要求熟悉）" class="headerlink" title="常见的端口(要求熟悉）"></a>常见的端口(要求熟悉）</h4><ul><li>HTTP协议代理服务器常用端口号：80/8080/3128/8081/9080</li><li>FTP（文件传输）协议代理服务器常用端口号：21</li><li>Telnet（远程登录）协议代理服务器常用端口：23</li><li>TFTP（Trivial File Transfer Protocol），默认的端口号为69/udp；</li><li>SSH（安全登录）、SCP（文件传输）、端口重定向，默认的端口号为22/tcp；</li><li>SMTP Simple Mail Transfer Protocol（E-mail），默认的端口号为25/tcp（木马Antigen、Email</li><li>Password Sender、Haebu Coceda.Shtrilitz Stealth、WinPC、WinSpy都开放这个端口）；</li><li>POP3 Post Office Protocol（E-mail），默认的端口号为110/tcp；</li><li>TOMCAT，默认的端口号为8080；</li><li>WIN2003远程登陆，默认的端口号为3389；</li><li>Oracle数据库，默认的端口号为1521；</li><li>MS SQL*SERVER数据库server，默认的端口号为1433/tcp 1433/udp；</li><li>QQ，默认的端口号为1080/udp</li></ul><h3 id="注册表-相当于人体的筋络）"><a href="#注册表-相当于人体的筋络）" class="headerlink" title="注册表(相当于人体的筋络）"></a>注册表(相当于人体的筋络）</h3><p>注册表（Registry，繁体中文版Windows称之为登录档）是Microsoft Windows中的一个重要的数据库，<br>用于存储系统和应用程序的设置信息。早在Windows 3.0推出OLE技术的时候，注册表就已经出现。随后推出的Windows NT是第一个从系统级别广泛使用注册表的操作系统。<br>但是，从Microsoft Windows 95开始，注册表才真正成为Windows用户经常接触的内容，并在其后的操作系统中继续沿用至今。</p><h4 id="打开注册表"><a href="#打开注册表" class="headerlink" title="打开注册表"></a>打开注册表</h4><p><font color="green">Win + R –&gt;regedit</font></p><h4 id="注册表的作用"><a href="#注册表的作用" class="headerlink" title="注册表的作用"></a>注册表的作用</h4><p>注册表是windows操作系统中的一个核心数据库，其中存放着各种参数，直接控制着windows的启动、硬件驱动程序的装载以及一些windows应用程序的运行，<br>从而在整个系统中起着核心作用。这些作用包括了软、硬件的相关配置和状态信息，比如注册表中保存有应用程序和资源管理器外壳的初始条件、首选项和卸载数据等，<br>联网计算机的整个系统的设置和各种许可，文件扩展名与应用程序的关联，硬件部件的描述、状态和属性，性能记录和其他底层的系统状态信息，以及其他数据等。</p><h4 id="注册表结构"><a href="#注册表结构" class="headerlink" title="注册表结构"></a>注册表结构</h4><p><img src="https://s2.ax1x.com/2019/09/01/npbAd1.png" alt></p><ul><li><font color="green">HKEY_CLASSES ROOT</font><br>管理文件系统。根据在<font color="red">Windows</font>中安装的应用程序的扩展名，该根键指明其文件类型的名称，相应打开该文件所要调用的程序等等信息</li><li><font color="green">HKEY_CURRENT_USER</font><br>管理系统当前的用户信息。在这个根罐中保存了本地计算机中存放的当前登录的用户信息，包括用户登最用户名和暂存的密码。在用户登录<font color="red">Windows 98</font>时，其信息<font color="red">从HKEY_USERS</font>中相应的项摔贝到<font color="red">HKEY_CURRENT_USER</font>中。</li><li><font color="green">HKEY_LOCAL_MACHINE</font><br>管理当前系统硬件配置，在这个根键中保存了本地计算机硬件配墨数据，此根键下的子关键字包括在<font color="red">SYSTEM.DAT</font>中，用来提供<font color="red">HKEY_LOCAL_MACHINE</font>所需的信息，或者在远程计算机中可访问的一组键中。<br>这个根键里面的许多子键与<font color="red">System.ini</font>文件中设置项类似。</li><li><font color="green">HKEY_USERS</font><br>管理系统的用户信息。在这个根键中保存了存放在本地计算机口令列表中的用户标识和密码列表。同时每个用户的预配置信息都存储在<font color="red">HKEY_USERS</font>根键中，<font color="red">HKEY_USERS</font>是远程计算机中访问的根键之一。</li><li><font color="green">HKEY_CURRENT_CONFIG</font><br>管理当前用户的系统配置。在这个根捷中保存着定义当前用户真面配置（如显示器等等的数据该用户使用过的文档列表（MRU），应用程序配置和其他有关当前用户的<font color="red">Windows98</font>中文版的安装的信息。</li></ul><h3 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h3><table><thead><tr><th>DOS命令</th><th>备注</th><th>作用</th></tr></thead><tbody><tr><td>color</td><td>color ？：查看颜色表</td><td>改变cmd颜色</td></tr><tr><td>ping -t -l65500+ip</td><td>TTL值低于68是linux，win7,08的服务器，128的是03，xp</td><td>加大传输数据包，累垮服务器</td></tr><tr><td>ipconfig</td><td>ipconfig /all查看详细参数 ipconfig /release(renew) 释放(重连)ip</td><td>查看ip</td></tr><tr><td>systeminfo</td><td></td><td>查看系统信息</td></tr><tr><td>arp -a</td><td>首个动态地址为网关，可以访问到路由器</td><td>查看局域网正在使用的ip</td></tr><tr><td>net view</td><td></td><td>查看局域网内其他计算机的计算机名</td></tr><tr><td>shutdown -s -t 180 -c “窗口出现的话”</td><td>180 是时间秒s改成r是重启，可通shutdown -a 撤销该命令</td><td>将在指定的时间上关机</td></tr><tr><td>dir</td><td></td><td>查看目录</td></tr><tr><td>cd</td><td></td><td>切换目录</td></tr><tr><td>md</td><td></td><td>md 目录名</td></tr><tr><td>rd</td><td></td><td>rd 目录名</td></tr><tr><td>copy con c:\wenjian.txt</td><td>ctrl+z+enter结束输入文本</td><td>创建文件</td></tr><tr><td>type 文件名 / start 文件名</td><td></td><td>打开该目录下的文件</td></tr><tr><td>del 文件名</td><td></td><td>删除文件</td></tr><tr><td>tree</td><td></td><td>树形列出文件夹结构</td></tr><tr><td>copy 文件名 + 路径名(存放位置)</td><td></td><td>复制文件</td></tr><tr><td>move 文件名 + 路径名(存放位置)</td><td></td><td>转移文件</td></tr><tr><td>net use k: \192.168.1.1\c$</td><td>要求能ping通</td><td>将指定IP地址的电脑的C盘拿来在此电脑形成一个K盘</td></tr><tr><td>net use k: \192.168.1.1\c$ /del</td><td></td><td>删除上一条命令的效果</td></tr><tr><td>net start</td><td></td><td>查看开启了哪些服务</td></tr><tr><td>net start 服务名</td><td>net start telnet,net start schedule</td><td>开启服务</td></tr><tr><td>net stop 服务名</td><td></td><td>停止某服务</td></tr><tr><td>net user 用户名 密码 /add</td><td></td><td>创建用户</td></tr><tr><td>net user guest/active:yes</td><td></td><td>激活guest用户</td></tr><tr><td>net user</td><td></td><td>查看有哪些用户</td></tr><tr><td>net user 账户名</td><td></td><td>查看账户的属性</td></tr><tr><td>net localGroup administrators 用户名 /add 用户</td><td>administrator后加s复数</td><td>把该用户添加到管理员中使其具有管理员权限</td></tr><tr><td>net user guest 12345</td><td></td><td>用guest用户登录后将密码改为12345</td></tr><tr><td>net password 密码</td><td></td><td>更改系统登陆密码</td></tr><tr><td>net share</td><td></td><td>查看本地开启的共享</td></tr><tr><td>net share ipc$</td><td></td><td>开启ipc$共享</td></tr><tr><td>net share ipc$ /del</td><td></td><td>删除ipc$共享</td></tr><tr><td>net share c$ /del</td><td></td><td>删除C:共享</td></tr><tr><td>netstat -a</td><td></td><td>查看开启了哪些端口，常用netstat -an</td></tr><tr><td>netstat -n</td><td></td><td>查看端口的网络连接情况，常用netstat -an</td></tr><tr><td>netstat -v</td><td></td><td>查看正在进行的工作</td></tr><tr><td>at id号</td><td>at 16：00 shutdown 在16：00关机</td><td>开启已注册的某个计划任务</td></tr><tr><td>at /delete</td><td></td><td>停止所有计划任务，用参数/yes则不需要确认就直接停止</td></tr><tr><td>at id号/delete</td><td></td><td>停止某个已注册的计划任务</td></tr><tr><td>at</td><td></td><td>查看所有的计划任务</td></tr><tr><td>attrib 文件名（目录名）</td><td></td><td>查看某文件（目录）的属性</td></tr></tbody></table><h3 id="批处理文件"><a href="#批处理文件" class="headerlink" title="批处理文件"></a>批处理文件</h3><p>批处理又件是dos命令的组合文件，写在批处理文件的命令会被逐一执行。<br>后缀名：<font color="green">.bat</font></p><h4 id="新建批处理文件"><a href="#新建批处理文件" class="headerlink" title="新建批处理文件"></a>新建批处理文件</h4><p>新建一个文本文档保存时把后缀名改为bat<br>也可以使用命令<br>copy con 123.bat<br>net user cracer 123123/add    //这是内容<br>net localgroup administrator cracer/add  //这是内容<br>Ctrl+z<br>回车</p><h3 id="Windows操作系统快捷键（不是win10的，略有不同）"><a href="#Windows操作系统快捷键（不是win10的，略有不同）" class="headerlink" title="Windows操作系统快捷键（不是win10的，略有不同）"></a>Windows操作系统快捷键（不是win10的，略有不同）</h3><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>F1</td><td>显示当前程序或者windows的帮助内容。</td></tr><tr><td>F2</td><td>当你选中一个文件的话，这意味着“重命名”</td></tr><tr><td>F3</td><td>当你在桌面上的时候是打开“查找：所有文件”对话框</td></tr><tr><td>CTRL+F4</td><td>关闭当前应用程序中的当前文本（如word中）</td></tr><tr><td>F5</td><td>刷新</td></tr><tr><td>CTRL+F5</td><td>强行刷新</td></tr><tr><td>CTRL+F6</td><td>切换到当前应用程序中的下一个文本（加shift 可以跳到前一个窗口）</td></tr><tr><td>F10或ALT</td><td>激活当前程序的菜单栏</td></tr><tr><td>windows键或CTRL+ESC</td><td>打开开始菜单</td></tr><tr><td>CTRL+ALT+DELETE</td><td>在win9x中打开关闭程序对话框</td></tr><tr><td>DELETE</td><td>删除被选择的选择项目，如果是文件，将被放入回收站</td></tr><tr><td>SHIFT+DELETE</td><td>删除被选择的选择项目，如果是文件，将被直接删除而不是放入回收站</td></tr><tr><td>CTRL+N</td><td>新建一个新的文件</td></tr><tr><td>CTRL+O</td><td>打开“打开文件”对话框</td></tr><tr><td>CTRL+P</td><td>打开“打印”对话框</td></tr><tr><td>CTRL+S</td><td>保存当育前操作的文件</td></tr><tr><td>CTRL+X</td><td>剪切被选择的项目到剪贴板</td></tr><tr><td>CTRL+INSERT或CTRL+C</td><td>复制被选择的项目到剪贴板</td></tr><tr><td>SHIFT+INSERT 或CTRL+V</td><td>粘贴剪贴板中复制过来的文本</td></tr><tr><td>ALT+BACKSPACE或CTRL+Z</td><td>撤销上一步的操作</td></tr><tr><td>ALT+SHIFT+BACKSPACE</td><td>重做上一步被撤销的操作</td></tr><tr><td>Windows键+M</td><td>最小化所有被打开的窗口。</td></tr><tr><td>Windows键+CTRL+M</td><td>重新将恢复上一项操作前窗口的大小和位置</td></tr><tr><td>Windows键+E</td><td>打开资源管理器</td></tr><tr><td>Windows键+F</td><td>打开“查找：所有文件”对话框</td></tr><tr><td>Windows键+R</td><td>打开“运行”对话框</td></tr><tr><td>Windows键+L</td><td>锁定电脑</td></tr><tr><td>Windows键+BREAK</td><td>打开“系统属性”对话框</td></tr><tr><td>Windows键+CTRL+F</td><td>打开“查找：计算机”对话框</td></tr><tr><td>SHIFT+F10或鼠标右击</td><td>打开当前活动项目的快捷菜单</td></tr><tr><td>ALT+F4</td><td>关闭当前应用程序</td></tr><tr><td>ALT+SPACEBAR</td><td>打开程序最左上角的菜单</td></tr><tr><td>ALT+TAB</td><td>切换当前程序</td></tr><tr><td>ALT+ESC</td><td>切换当前程序</td></tr><tr><td>ALT+ENTER</td><td>将windows下运行的MSDOS窗口在窗口和全屏幕状态间切换</td></tr><tr><td>PRINT SCREEN</td><td>将当前屏幕以图象方式拷贝到剪贴板</td></tr></tbody></table><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3><h4 id="修改启动项"><a href="#修改启动项" class="headerlink" title="修改启动项"></a>修改启动项</h4><p><font color="green">win+R–&gt;msconfig  可以打开系统启动项</font></p><h4 id="加快系统启动速度"><a href="#加快系统启动速度" class="headerlink" title="加快系统启动速度"></a>加快系统启动速度</h4><p><font color="green">win+R–&gt;msconfig  可以打开系统“引导”选项</font><br>打开系统配置窗口后找到“引导”选项（英文系统是Boot）。·点击“高级选项”此时就可以看到我们将要修改的设置项了。</p><h4 id="提高窗口切换提速"><a href="#提高窗口切换提速" class="headerlink" title="提高窗口切换提速"></a>提高窗口切换提速</h4><p>·右击计算机属性—性能信息和工具—调整<br>视觉效果<br>·先点击让windows选择<br>计算机的最佳设置—-再点击自定义—把最后的勾选去掉–确定</p><h3 id="在同一个电脑里添加多个服务器"><a href="#在同一个电脑里添加多个服务器" class="headerlink" title="在同一个电脑里添加多个服务器"></a>在同一个电脑里添加多个服务器</h3><ul><li>ip地址不同</li><li>相同ip不同端口号</li><li>使用域名访问</li></ul><h3 id="配置dns"><a href="#配置dns" class="headerlink" title="配置dns"></a>配置dns</h3><p>解析域名给计算机访问<br><font color="green">管理你的服务器–&gt;添加或删除角色–&gt;自定义一个服务器</font><br><img src="https://s2.ax1x.com/2019/09/05/nnPuVO.png" alt></p><p>选择dns服务器,下一步<br><img src="https://s2.ax1x.com/2019/09/05/nnPLdO.png" alt></p><p>win10关闭指定端口<br>netstat -ano|findstr 8005<br>taskkill /pid 3116 /f</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局</title>
      <link href="/2019/08/31/css-bu-ju/"/>
      <url>/2019/08/31/css-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h1><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>绝对定位<br>属性：position<br>值： absolute<br>通过指定left,top绝对定位一个元素</p><h4 id="绝对定位-1"><a href="#绝对定位-1" class="headerlink" title="绝对定位"></a>绝对定位</h4><p>属性：position<br>值： absolute<br>设置了绝对定位的元素，相当于该元素被从原文档中删除了，不会占领之前应该的位置</p><h4 id="绝对定位是基于最近的一个定位了的父容器"><a href="#绝对定位是基于最近的一个定位了的父容器" class="headerlink" title="绝对定位是基于最近的一个定位了的父容器"></a>绝对定位是基于最近的一个定位了的父容器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p<span class="token class">.abs</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.absdiv</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">215</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字f<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字g<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>absdiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个定位了的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abs<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>绝对定位的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 “绝对定位的文字” 这个p，其定位了的父容器即 class=”absdiv” 的div<br>所以 “绝对定位的文字” 这个p 出现的位置是以这个div 为基础的</p><h4 id="如果没有定位了的父容器"><a href="#如果没有定位了的父容器" class="headerlink" title="如果没有定位了的父容器"></a>如果没有定位了的父容器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p<span class="token class">.abs</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字f<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常文字g<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这个div没有定位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abs<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>绝对定位的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“绝对定位的文字” 这个p 的父容器div，并没有定位。 所以它的”最近的一个定位了的父容器” 即body</p><h4 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h4><p>通过绝对定位可以把一个元素放在另一个元素上，这样位置就重复了。<br>重复了，就存在一个谁掩盖谁的问题。 这个时候就可以使用<br>z-index属性， 当z-index的值越大，就表示放上面，z-index:越小就表示放下面。</p><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>属性：position<br>值：relative<br>与绝对定位不同的是，相对定位不会把该元素从原文档删除掉，而是在原文档的位置的基础上，移动一定的距离<br>把原来的位置作为原点</p><h4 id="相对定位，但是又不占用位置"><a href="#相对定位，但是又不占用位置" class="headerlink" title="相对定位，但是又不占用位置"></a>相对定位，但是又不占用位置</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div<span class="token class">.r</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token selector">div<span class="token class">.a</span></span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>正常文字1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>正常文字2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>r<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相对定位的文字3(不占坑)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>正常文字4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>正常文字5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。<br>属性：float<br>值： left,right</p><h4 id="文字向右浮动"><a href="#文字向右浮动" class="headerlink" title="文字向右浮动"></a>文字向右浮动</h4><p>文字向右浮动<br>浮动后，原来的“坑”就让出来了<br>并且是在原来的高度的基础上，向右浮动</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.f</span></span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>正常文字1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>正常文字2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>f<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浮动的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>正常文字4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>正常文字5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文字向左浮动"><a href="#文字向左浮动" class="headerlink" title="文字向左浮动"></a>文字向左浮动</h4><p>文字向左浮动<br>首先，向左浮动后，会把“坑”让出来，这个时候”正常的文字4“ 就会过来试图占这个坑，但是，发现 “浮动的文字”并没有走，结果，就只好排在它后面了</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.f</span></span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>正常文字1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>正常文字2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>f<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浮动的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>正常文字4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>正常文字5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文字围绕图片"><a href="#文字围绕图片" class="headerlink" title="文字围绕图片"></a>文字围绕图片</h4><p>当图片不浮动时，文字就会换行出现在下面<br>当图片浮动时，文字围绕着图片<br>当图片浮动的时候，就会让出这个“坑”出来，这个时候文字就试图去填补这个“坑”，结果发现，图片没走，那就只好围绕图片摆放了</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.f</span></span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">320</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/example.gif<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  当图片不浮动时，文字就会换行出现在下面  当图片不浮动时，文字就会换行出现在下面  当图片不浮动时，文字就会换行出现在下面  当图片不浮动时，文字就会换行出现在下面  当图片不浮动时，文字就会换行出现在下面  当图片不浮动时，文字就会换行出现在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>f<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/example.gif<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  当图片浮动时，文字围绕着图片 当图片浮动时，文字围绕着图片 当图片浮动时，文字围绕着图片 当图片浮动时，文字围绕着图片 当图片浮动时，文字围绕着图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文字不想围绕图片"><a href="#文字不想围绕图片" class="headerlink" title="文字不想围绕图片"></a>文字不想围绕图片</h4><p>不允许出现浮动元素<br>属性:clear<br>值: left right both none<br>如果p左边出现了浮动的元素，如此例，则设置clear:left 即达到不允许浮动元素出现在左边的效果</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.f</span></span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">320</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearp</span></span><span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>f<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/example.gif<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  当图片浮动时，文字围绕着图片 当图片浮动时，文字围绕着图片 当图片浮动时，文字围绕着图片 当图片浮动时，文字围绕着图片 当图片浮动时，文字围绕着图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>f<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/example.gif<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clearp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  当图片浮动时，文字却不想围绕图片当图片浮动时，文字却不想围绕图片当图片浮动时，文字却不想围绕图片当图片浮动时，文字却不想围绕图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="水平排列div"><a href="#水平排列div" class="headerlink" title="水平排列div"></a>水平排列div</h4><p>默认的div排列是会换行的<br>如果使用float就可以达到水平排列的效果，通常会用在菜单，导航栏等地方<br>如果超出了父容器，还会有自动换行的效果</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div<span class="token id">#floatingDiv</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token id">#floatingDiv</span> div</span><span class="token punctuation">{</span>   <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>默认的div排列是会换行的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>如果使用float就可以达到水平排列的效果，通常会用在菜单，导航栏等地方如果超出了父容器，还会有自动换行的效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>floatingDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单4 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       菜单6 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="显示方式"><a href="#显示方式" class="headerlink" title="显示方式"></a>显示方式</h3><p>元素的display显示方式有多种，隐藏、块级、内联、内联-块级</p><h4 id="隐藏-display-none"><a href="#隐藏-display-none" class="headerlink" title="隐藏(display:none)"></a>隐藏(display:none)</h4><p>在隐藏章节已经使用过通过display的方式隐藏一个元素<br>display:none; 使得被选择的元素隐藏，并且不占用原来的位置</p><h4 id="块级-display-block"><a href="#块级-display-block" class="headerlink" title="块级(display:block)"></a>块级(display:block)</h4><p>display:block; 表示块级元素<br>块级元素会自动在前面和后面加上换行，并且在其上的width和height也能够生效<br>div默认是块级元素<br>span默认是内联元素(不会有换行,width和height也不会生效)</p><h4 id="内联-display-inline"><a href="#内联-display-inline" class="headerlink" title="内联(display:inline)"></a>内联(display:inline)</h4><p>display:inline; 表示内联元素<br>内联元素前后没有换行，并且在其上的width和height也无效。 其大小由其中的内容决定<br>div默认是块级元素<br>span默认是内联元素</p><h4 id="内联-块级-inline-block"><a href="#内联-块级-inline-block" class="headerlink" title="内联-块级(inline-block)"></a>内联-块级(inline-block)</h4><p>内联是不换行，但是不能指定大小<br>块级时能指定大小，但是会换行<br>有时候，需要元素处于同一行，同时还能指定大小，这个时候，就需要用到内联-块级 inline-block</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">span</span><span class="token punctuation">{</span>   <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>   <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid lightgray<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>像这样 ，每个都能设置宽度 ，同时还能在同一行。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>盖伦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>蒙多医生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>奈德丽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>蒸汽机器人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能指定大小且不换行</p><h4 id="其他的显示方式"><a href="#其他的显示方式" class="headerlink" title="其他的显示方式"></a>其他的显示方式</h4><p>list-item 显示为列表<br>table 显示为表格<br>inline-table 显示为前后无换行的表格<br>table-cell 显示为单元格<br>不常见</p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><h4 id="内容居中"><a href="#内容居中" class="headerlink" title="内容居中"></a>内容居中</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid lightgray<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>通过设置属性align="center" 居中的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>通过样式style="text-align:center" 居中的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">div</span><span class="token punctuation">{</span>     <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px lightgray<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">span</span><span class="token punctuation">{</span>     <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px lightskyblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 默认情况下div会占用100%的宽度,所以无法观察元素是否居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  设置本div的宽度，然后再使用样式 margin: 0 auto来使得元素居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  span 是内联元素，无法设置宽度，所以不能通过margin:0 auto居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span的居中可以通过放置在div中，然后让div text-align实现居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="左侧固定，右边自动占满"><a href="#左侧固定，右边自动占满" class="headerlink" title="左侧固定，右边自动占满"></a>左侧固定，右边自动占满</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>pink  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>lightskyblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边自动填满<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><h4 id="line-height方式"><a href="#line-height方式" class="headerlink" title="line-height方式"></a>line-height方式</h4><p>line-height 适合单独一行垂直居中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#d</span> </span><span class="token punctuation">{</span><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px lightskyblue<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>line-height 适合单独一行垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内边距方式"><a href="#内边距方式" class="headerlink" title="内边距方式"></a>内边距方式</h4><p>借助设置相同的上下内边距，实现垂直居中效果，可以用在多行文本上</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#d</span> </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px lightskyblue<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="table方式"><a href="#table方式" class="headerlink" title="table方式"></a>table方式</h4><p>首先通过display: table-cell;把div用单元格的形式显示，然后借用单元格的垂直居中vertical-align: middle; 来达到效果。<br>这样对图片也可以居中，上一步 line-height就不能对图片居中。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#d</span> </span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px lightskyblue<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="左右固定"><a href="#左右固定" class="headerlink" title="左右固定"></a>左右固定</h3><h4 id="左右固定，中间自适应的布局"><a href="#左右固定，中间自适应的布局" class="headerlink" title="左右固定，中间自适应的布局"></a>左右固定，中间自适应的布局</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>pink  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>pink  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> <span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间自适应<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一个div始终贴在下方"><a href="#一个div始终贴在下方" class="headerlink" title="一个div始终贴在下方"></a>一个div始终贴在下方</h4><p>首先把蓝色div设置为相对定位<br>然后把内部的绿色div设置为绝对定位， bottom: 0表示贴在下面</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#div1</span>        </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90%</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#div2</span>        </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 无论蓝色div高度如何变化，绿色div都会贴在下面    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/2019/08/30/css-ji-chu/"/>
      <url>/2019/08/30/css-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>通过id选择元素<br><font color="red">注： 一个元素的id应该是唯一的。另一个元素不应该重复使用 </font></p><pre class="line-numbers language-html"><code class="language-html">#p1{  color:blue;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>没有id的p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id=p1的p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>当需要多个元素，都使用同样的css的时候，就会使用类选择器 </p><pre class="line-numbers language-html"><code class="language-html">.pre{  color:blue;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pre<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前3个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pre<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前3个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pre<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前3个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更准确的选择"><a href="#更准确的选择" class="headerlink" title="更准确的选择"></a>更准确的选择</h4><p>同时根据元素名和class来选择 p.blue </p><pre class="line-numbers language-html"><code class="language-html">p.blue{  color:blue;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class=blue的p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class=blue的span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尺寸大小"><a href="#尺寸大小" class="headerlink" title="尺寸大小"></a>尺寸大小</h3><p>属性：width<br>值：可以是百分比或者像素</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p<span class="token id">#percentage</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token id">#pix</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">180</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>percentage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 按比例设置尺寸50%宽 50%高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 按象素设置尺寸  180px宽 50 px高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><table><thead><tr><th>关键字</th><th>简介</th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td></tr><tr><td>background-image:url(imagepath)</td><td>图片背景</td></tr><tr><td>url(background.jpg</td><td>本地测试</td></tr><tr><td>background-repeat</td><td>背景重复</td></tr><tr><td>background-size:contain</td><td>背景平铺</td></tr></tbody></table><h4 id="背景颜色-background-color"><a href="#背景颜色-background-color" class="headerlink" title="背景颜色 (background-color)"></a>背景颜色 (background-color)</h4><p>属性名background-color<br>颜色的值可以采用3种方式</p><ul><li>预定义的颜色名字<br>比如red,gray,white,black,pink,</li><li>rgb格式<br>分别代表红绿蓝的比例 rgb(250,0,255) 即表示红色是满的，没有绿色，蓝色是满的，即红色和蓝色混合在一起：紫色</li><li>16进制的表示<br>#00ff00 等同于 rgb(0,255,0) </li></ul><h4 id="图片做背景"><a href="#图片做背景" class="headerlink" title="图片做背景"></a>图片做背景</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div<span class="token id">#test</span>  </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(/study/background.jpg)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  这是一个有背景图的DIV<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">当图片文件跟html文件在同一个文件夹的级别下时，用background-image:url(background.jpg);而不是background-image:url(/study/background.jpg);</font></p><h4 id="背景重复-background-repeat"><a href="#背景重复-background-repeat" class="headerlink" title="背景重复(background-repeat)"></a>背景重复(background-repeat)</h4><p>background-repeat属性<br>值可以选 </p><ul><li>repeat; 水平垂直方向都重复 </li><li>repeat-x; 只有水平方向重复 </li><li>repeat-y; 只有垂直方向重复 </li><li>no-repeat; 无重复 </li></ul><h4 id="背景平铺-background-size"><a href="#背景平铺-background-size" class="headerlink" title="背景平铺(background-size )"></a>背景平铺(background-size )</h4><p>属性：background-size<br>值：contain </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div<span class="token id">#contain</span>  </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(/study/background_small.jpg)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS文本"><a href="#CSS文本" class="headerlink" title="CSS文本"></a>CSS文本</h3><table><thead><tr><th>关键字</th><th>简介</th></tr></thead><tbody><tr><td>color</td><td>文字颜色</td></tr><tr><td>text-align</td><td>对齐</td></tr><tr><td>text-decoration</td><td>文本修饰</td></tr><tr><td>line-height</td><td>行间距</td></tr><tr><td>letter-spacing</td><td>字符间距</td></tr><tr><td>word-spacing</td><td>单词间距</td></tr><tr><td>text-indent</td><td>首行缩进</td></tr><tr><td>text-transform</td><td>大小写</td></tr><tr><td>white-space</td><td>空白格</td></tr></tbody></table><h4 id="文字颜色-color"><a href="#文字颜色-color" class="headerlink" title="文字颜色 (color)"></a>文字颜色 (color)</h4><p>属性名color<br>颜色的值可以采用3种方式</p><ul><li>预定义的颜色名字<br>比如red,gray,white,black,pink</li><li>rgb格式<br>分别代表红绿蓝的比例 rgb(250,0,255) 即表示红色是满的，没有绿色，蓝色是满的，即红色和蓝色混合在一起：紫色</li><li>16进制的表示<br>#00ff00 等同于 rgb(0,255,0) </li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div<span class="token id">#colorful</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorful<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  粉红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对齐-text-align"><a href="#对齐-text-align" class="headerlink" title="对齐(text-align)"></a>对齐(text-align)</h4><p>属性:text-align<br>值：left,right,center<br>div是块级元素，其默认宽度是100%，所以文本有对齐的空间前提。<br>但是，span却看不出右对齐效果，为什么呢？<br>因为span是内联元素其默认宽度就是其文本内容的宽度<br>简单说就是文本已经粑在其边框上了，对齐是看不出效果来的</p><h4 id="文本修饰-text-decoration"><a href="#文本修饰-text-decoration" class="headerlink" title="文本修饰(text-decoration)"></a>文本修饰(text-decoration)</h4><p>折<br>属性：text-decoration<br>值： overline </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">h1 </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> overline<span class="token punctuation">}</span><span class="token selector">h2 </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> line-through<span class="token punctuation">}</span><span class="token selector">h3 </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">}</span><span class="token selector">h4 </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>blink<span class="token punctuation">}</span><span class="token selector"><span class="token class">.a</span> </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>上划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>删除效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>闪烁效果，大部分浏览器已经取消该效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>默认的超链<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://how2j.cn/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去掉了下划线的超链<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="行间距-line-height"><a href="#行间距-line-height" class="headerlink" title="行间距 (line-height)"></a>行间距 (line-height)</h4><p>属性：line-height<br>值：数字或者百分比 </p><h4 id="字符间距-letter-spacing"><a href="#字符间距-letter-spacing" class="headerlink" title="字符间距 (letter-spacing )"></a>字符间距 (letter-spacing )</h4><p>属性：letter-spacing<br>值： 数字 </p><h4 id="单词间距-word-spacing"><a href="#单词间距-word-spacing" class="headerlink" title="单词间距 (word-spacing)"></a>单词间距 (word-spacing)</h4><p>属性：word-spacing<br>值： 数字 </p><h4 id="首行缩进-text-indent"><a href="#首行缩进-text-indent" class="headerlink" title="首行缩进 (text-indent )"></a>首行缩进 (text-indent )</h4><p>属性：text-indent<br>值： 数字 </p><h4 id="大小写-text-transform"><a href="#大小写-text-transform" class="headerlink" title="大小写 (text-transform )"></a>大小写 (text-transform )</h4><p>属性：text-transform<br>值：<br>uppercase 全部大写<br>capitalize 首字母大写<br>lowercase 全部小写 </p><h4 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h4><p>属性：white-space<br>值：<br>normal 默认。多个空白格或者换行符会被合并成一个空白格<br>pre 有多少空白格，显示多少空白格，相当于pre标签,如果长度超出父容器也不会换行。<br>pre-wrap 有多少空白格，显示多少空白格，相当于pre标签,如果长度超出父容器，会换行。<br>nowrap 一直不换行，直到使用br </p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><table><thead><tr><th>关键字</th><th>简介</th></tr></thead><tbody><tr><td>font-size</td><td>尺寸</td></tr><tr><td>font-style</td><td>风格</td></tr><tr><td>font-weight</td><td>粗细</td></tr><tr><td>font-family</td><td>字体库</td></tr><tr><td>font</td><td>在一起声明</td></tr></tbody></table><h4 id="尺寸-font-size"><a href="#尺寸-font-size" class="headerlink" title="尺寸(font-size)"></a>尺寸(font-size)</h4><p>属性：font-size<br>值：数字或者百分比 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p<span class="token class">.big</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token class">.small</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token class">.small2</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">0.5</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token punctuation">></span></span>正常大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>30px大小的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>50%比例的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0.5em 等同于 50%比例的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="风格-font-style"><a href="#风格-font-style" class="headerlink" title="风格(font-style)"></a>风格(font-style)</h4><p>font-style:<br>normal 标准字体<br>italic 斜体 </p><h4 id="粗细-font-weight"><a href="#粗细-font-weight" class="headerlink" title="粗细 (font-weight)"></a>粗细 (font-weight)</h4><p>属性 font-weight<br>normal 标准粗细<br>bold 粗一点 </p><h4 id="字库-font-family"><a href="#字库-font-family" class="headerlink" title="字库(font-family )"></a>字库(font-family )</h4><p>属性font-family </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p<span class="token class">.f1</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"Times New Roman"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token class">.f2</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span>Arial<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token class">.f3</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span>宋体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token class">.f4</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span>黑体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token class">.f5</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span>楷体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token class">.f6</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span>微软雅黑<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="声明在一起"><a href="#声明在一起" class="headerlink" title="声明在一起"></a>声明在一起</h4><p>把大小，风格，粗细，字库都写在一行里面 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p<span class="token class">.all</span></span><span class="token punctuation">{</span>   <span class="token property">font</span><span class="token punctuation">:</span>italic bold <span class="token number">30</span>px <span class="token string">"Times New Roman"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>默认字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>斜体的 粗体的 大小是30px的 "Times New Roman" <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">span</span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span>crosshair<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>鼠标移动到这段文字上，就看到鼠标样式变成了十字架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>样式</th></tr></thead><tbody><tr><td>cursor:default</td></tr><tr><td>cursor:auto</td></tr><tr><td>cursor:crosshair</td></tr><tr><td>cursor:pointer</td></tr><tr><td>cursor:e-resize</td></tr><tr><td>cursor:ne-resize</td></tr><tr><td>cursor:nw-resize</td></tr><tr><td>cursor:n-resize</td></tr><tr><td>cursor:se-resize</td></tr><tr><td>cursor:sw-resize</td></tr><tr><td>cursor:w-resize</td></tr><tr><td>cursor:text</td></tr><tr><td>cursor:wait</td></tr><tr><td>cursor:help</td></tr><tr><td>cursor:not-allowed</td></tr></tbody></table><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="表格布局-table-layout"><a href="#表格布局-table-layout" class="headerlink" title="表格布局(table-layout )"></a>表格布局(table-layout )</h4><p>属性:table-layout<br>automatic; 单元格的大小由td的内容宽度决定<br>fixed; 单元格的大小由td上设置的宽度决定<br><font color="red">注：只对连续的英文字母起作用，如果使用中文就看不到效果 </font></p><h4 id="表格边框-border-collapse"><a href="#表格边框-border-collapse" class="headerlink" title="表格边框(border-collapse)"></a>表格边框(border-collapse)</h4><p>属性：border-collapse<br>值：<br>separate:边框分隔<br>collapse:边框合并 </p><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><table><thead><tr><th>关键字</th><th>简介</th></tr></thead><tbody><tr><td>border-style</td><td>边框风格</td></tr><tr><td>borde-color</td><td>边框颜色</td></tr><tr><td>border-width</td><td>边框宽度</td></tr><tr><td>border</td><td>声明在一起</td></tr><tr><td>border-top</td><td>只有一个方向有边框</td></tr><tr><td>border-top，border-left</td><td>有交界的边都有边框</td></tr></tbody></table><h4 id="边框风格-border-style"><a href="#边框风格-border-style" class="headerlink" title="边框风格(border-style)"></a>边框风格(border-style)</h4><p>属性： border-style<br>solid: 实线<br>dotted:点状<br>dashed:虚线<br>double:双线 </p><h4 id="边框颜色-border-color"><a href="#边框颜色-border-color" class="headerlink" title="边框颜色 (border-color)"></a>边框颜色 (border-color)</h4><p>属性：border-color<br>值：red,#ff0000,rgb(255,0,0) </p><h4 id="边框宽度-border-width"><a href="#边框宽度-border-width" class="headerlink" title="边框宽度 (border-width )"></a>边框宽度 (border-width )</h4><p>属性：border-width<br>值：数字 </p><h4 id="都放在一起"><a href="#都放在一起" class="headerlink" title="都放在一起"></a>都放在一起</h4><p>属性：border<br>值：颜色 风格 宽度 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.red</span></span><span class="token punctuation">{</span>   <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px dotted LightSkyBlue<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 默认无边框div <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 点状天蓝色细边框  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="只有一个方向有边框"><a href="#只有一个方向有边框" class="headerlink" title="只有一个方向有边框"></a>只有一个方向有边框</h4><p>通过制定位置，可以只给一个方向设置边框风格，颜色和宽度<br> border-top-style:solid;<br> border-top-color:red;<br> border-top-width: 50px;<br> <font color="green">top,bottom,left,right 分别对应上下左右</font></p><h4 id="有交界的边都有边框"><a href="#有交界的边都有边框" class="headerlink" title="有交界的边都有边框"></a>有交界的边都有边框</h4><p>比如上和左就是有交界的，而上和下就没有交界<br>当有交界的边同时出现边框的时候，就会以倾斜的形式表现交界线。  </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token selector">div<span class="token class">.lefttop</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">150</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">150</span>px<span class="token punctuation">;</span>   <span class="token property">border-top-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>   <span class="token property">border-top-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>   <span class="token property">border-top-width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>   <span class="token property">border-left-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>   <span class="token property">border-left-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>   <span class="token property">border-left-width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span>lightgray<span class="token punctuation">;</span>     <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="块级元素和内联元素的边框区别"><a href="#块级元素和内联元素的边框区别" class="headerlink" title="块级元素和内联元素的边框区别"></a>块级元素和内联元素的边框区别</h4><p>块级元素div默认是占用100%的宽度<br>常见的块级元素有<font color="green">div h1 p </font>等<br>而内联元素span的宽度由其内容的宽度决定<br>常见的内联元素有 <font color="green">a b strong i input</font> 等 </p><h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><p>元素内边距<br>指的是元素里的内容与边框之间的距离<br>属性：<br>padding-left: 左内边距<br>padding-right: 右内边距<br>padding-top: 上内边距<br>padding-bottom: 下内边距<br>padding: 上 右 下 左</p><h4 id="左内边距"><a href="#左内边距" class="headerlink" title="左内边距"></a>左内边距</h4><p>属性:padding-left<br>值：数字<br>指的是，元素中的内容，与边框之间的距离</p><h4 id="内边距，写1个和写4个的区别"><a href="#内边距，写1个和写4个的区别" class="headerlink" title="内边距，写1个和写4个的区别"></a>内边距，写1个和写4个的区别</h4><p>属性：padding<br>值：如果只写一个，即四个方向的值<br>值：如果写四个，即四个方向的值<br>上 右 下 左,依顺时针的方向依次赋值</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.pad-left-one</span></span><span class="token punctuation">{</span>   <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">5</span>px solid red<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.pad-left-four</span></span><span class="token punctuation">{</span>   <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">5</span>px solid red<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="当内边距的值少于4个的时候"><a href="#当内边距的值少于4个的时候" class="headerlink" title="当内边距的值少于4个的时候"></a>当内边距的值少于4个的时候</h4><p>如果缺少左内边距的值，则使用右内边距的值。<br>如果缺少下内边距的值，则使用上内边距的值。<br>如果缺少右内边距的值，则使用上内边距的值。<br>举例说明<br>这是完整4个的<br>padding: 10 20 40 80<br>如果只有3个<br>padding: 10 20 40<br>那么left取right<br>padding: 10 20 40 = padding: 10 20 40 20<br>如果只有两个<br>padding: 10 20<br>那么bottom取top，left取right<br>padding: 10 20 = padding:10 20 10 20<br>如果只有一个<br>padding:10<br>那么right取top，bottom取top，left取top<br>padding:10 = padding:10 10 10 10<br><img src="http://stepimagewm.how2j.cn/482.png" alt></p><h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><p>元素外边距<br>指的是元素边框和元素边框之间的距离<br>属性：<br>margin-left: 左外边距<br>margin-right: 右外边距<br>margin-top: 上外边距<br>margin-bottom: 下外边距 </p><h4 id="左外边距"><a href="#左外边距" class="headerlink" title="左外边距"></a>左外边距</h4><p>属性: margin-left<br>值：数字<br>指的是元素边框和元素边框之间的距离<br><font color="red">注：像span这样的内联元素，默认情况下，只有左右外边距，没有上下外边距。 为了观察上下外边距的效果，可以采用块级元素，比如div.</font></p><h3 id="超链状态"><a href="#超链状态" class="headerlink" title="超链状态"></a>超链状态</h3><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><p>伪类，所谓的伪类即被选中的元素处于某种状态的时候<br>超链状态有4种<br>link - 初始状态，从未被访问过<br>visited - 已访问过<br>hover - 鼠标悬停于超链的上方<br>active - 鼠标左键点击下去，但是尚未弹起的时候 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">a<span class="token pseudo-class">:link</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF0000</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:visited</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#00FF00</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF00FF</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:active</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0000FF</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.12306.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链的不同状态<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="去除超链的下划线"><a href="#去除超链的下划线" class="headerlink" title="去除超链的下划线"></a>去除超链的下划线</h4><p>默认状态下，超链是有下划线的，但是现在网站上的超链普遍采用无下划线风格。<br>使用 text-decoration: none 文本修饰的样式来解决 </p><h3 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h3><p>隐藏元素有两种方式<br>display:none;<br>visibility:hidden;</p><h4 id="隐藏-1"><a href="#隐藏-1" class="headerlink" title="隐藏"></a>隐藏</h4><p>使用display:none; 隐藏一个元素，这个元素将不再占有原空间 “坑” 让出来了<br>使用 visibility:hidden;隐藏一个元素，这个元素继续占有原空间，只是“看不见”</p><h4 id="把样式代码写在style-css，并在html中包含它"><a href="#把样式代码写在style-css，并在html中包含它" class="headerlink" title="把样式代码写在style.css，并在html中包含它"></a>把样式代码写在style.css，并在html中包含它</h4><p>创建一个文件叫style.css<br>然后在html中包含该文件</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/study/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><h4 id="style标签与外部文件style-css样式重复"><a href="#style标签与外部文件style-css样式重复" class="headerlink" title="style标签与外部文件style.css样式重复"></a>style标签与外部文件style.css样式重复</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.p1</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p1 颜色是绿色，优先使用靠的最后出现的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="style标签上的与style属性冲突"><a href="#style标签上的与style属性冲突" class="headerlink" title="style标签上的与style属性冲突"></a>style标签上的与style属性冲突</h4><p>style标签上的与style属性冲突<br>优先使用style属性</p><h4 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h4><p>如果样式上增加了!important，则优先级最高，甚至高于style属性</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.p1</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>green <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p1 颜色是绿色，优先使用!important样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP</title>
      <link href="/2019/08/24/jsp/"/>
      <url>/2019/08/24/jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h3 id="Hello-JSP"><a href="#Hello-JSP" class="headerlink" title="Hello JSP"></a>Hello JSP</h3><p>jsp能够做到直接使用Html代码，然后在html中写java代码</p><h4 id="hello-jsp"><a href="#hello-jsp" class="headerlink" title="hello.jsp"></a>hello.jsp</h4><p>在web目录下下新建一个文件hello.jsp<br>访问网页 <code>http://127.0.0.1/hello.jsp</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@page</span> contentType<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    pageEncoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.*"</span><span class="token operator">%</span><span class="token operator">></span>你好 JSP<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><p><code>&lt;%@page contentType=&quot;text/html; charset=UTF-8&quot;  pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;</code><br>是JSP的<code>&lt;%@page指令</code><br><code>contentType=&quot;text/html; charset=UTF-8&quot;</code>  相当于response.setContentType(“text/html; charset=UTF-8”); 通知浏览器以UTF-8进行中文解码<br><code>pageEncoding=&quot;UTF-8&quot;</code> 如果jsp文件中出现了中文，这些中文使用UTF-8进行编码<br><code>import=&quot;java.util.*</code> 导入其他类，如果导入多个类，彼此用,逗号隔开，像这样 <code>import=&quot;java.util.*,java.sql.*&quot;</code><br><code>&lt;%=</code><br><code>&lt;%=new Date().toLocaleString()%&gt;</code> 输出当前时间，相当于在Servlet中使用response.getWriter()进行输出<br><code>response.getWriter().println(new Date().toLocaleString());</code></p><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><ul><li>把 hello.jsp转译为hello_jsp.java</li><li>hello_jsp.java 位于<br>d:\tomcat\work\Catalina\localhost_\org\apache\jsp</li><li>hello_jsp.java是一个servlet</li><li>把hello_jsp.java 编译为hello_jsp.class</li><li>执行hello_jsp，生成html</li><li>通过http协议把html 响应返回给浏览器<br><img src="https://s2.ax1x.com/2019/08/24/m6Q4ZF.png" alt></li></ul><h4 id="hello-jsp-java-为什么是Servlet"><a href="#hello-jsp-java-为什么是Servlet" class="headerlink" title="hello_jsp.java 为什么是Servlet"></a>hello_jsp.java 为什么是Servlet</h4><p>在Servlet章节中，我们说HelloServlet是一个Servlet，不是因为它的类名里有一个”Servlet”，而是因为它继承了 HttpServlet<br>打开转译hello.jsp 后得到的hello_jsp.java，可以发现它继承了类</p><h3 id="页面元素"><a href="#页面元素" class="headerlink" title="页面元素"></a>页面元素</h3><p>jsp由这些页面元素组成：</p><ul><li>静态内容<br>就是html,css,javascript等内容</li><li>指令<br>以&lt;%@开始 %&gt; 结尾，比如&lt;%@page import=”java.util.*”%&gt;</li><li>表达式 &lt;%=%&gt;<br>用于输出一段html</li><li>Scriptlet<br>在&lt;%%&gt; 之间，可以写任何java 代码</li><li>声明<br>在&lt;%!%&gt; 之间可以声明字段或者方法。但是不建议这么做。</li><li>动作<br>&lt;jsp:include page=”Filename” &gt; 在jsp页面中包含另一个页面。在包含的章节有详细的讲解</li><li>注释 &lt;%– – %&gt;<br>不同于 html的注释 <!-- --> 通过jsp的注释，浏览器也看不到相应的代码，相当于在servlet中注释掉了<br><img src="http://stepimagewm.how2j.cn/1657.png" alt></li></ul><h4 id="lt-gt-和-lt-out-println-gt"><a href="#lt-gt-和-lt-out-println-gt" class="headerlink" title="&lt;%=%&gt;和 &lt;%out.println()%&gt;"></a>&lt;%=%&gt;和 &lt;%out.println()%&gt;</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%=</span><span class="token string">"hello jsp"</span><span class="token operator">%</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就相当于</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>out是jsp的隐式对象，可以直接使用。一共有9种隐式对象<br><font color="red">注: &lt;%=%&gt; 不需要分号结尾，&lt;%%&gt; 需要以分号结尾，和java代码一样</font></p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page language<span class="token operator">=</span><span class="token string">"java"</span> contentType<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    pageEncoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.*"</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"today"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"great"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>table width<span class="token operator">=</span><span class="token string">"200px"</span> align<span class="token operator">=</span><span class="token string">"center"</span> border<span class="token operator">=</span><span class="token string">"1"</span> cellspacing<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span>word<span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">%=</span>word<span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span> table<span class="token operator">></span><span class="token operator">&lt;</span> code<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">>></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>每个网页的最下方都有 版权声明等信息。 如果不使用包含，那么每个网页都需要单独写，如果版权声明要修改，则需要很大的工作量。<br>使用include的办法，只需要准备一个footer.jsp，然后在其他页面包含footer.jsp即可。<br>修改的时候，只需要修改footer.jsp所有的页面就都修改了，维护成本降低了很多。<br>include有两种方式指令include和动作include</p><h4 id="首先准备一个footer-jsp"><a href="#首先准备一个footer-jsp" class="headerlink" title="首先准备一个footer.jsp"></a>首先准备一个footer.jsp</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>copyright@2016<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="指令include"><a href="#指令include" class="headerlink" title="指令include"></a>指令include</h4><p>通过指令<code>&lt;%@include file=&quot;footer.jsp&quot; %&gt;</code>在hello.jsp中包含该页面</p><h4 id="动作include"><a href="#动作include" class="headerlink" title="动作include"></a>动作include</h4><p>通过动作<code>&lt;jsp:include page=&quot;footer.jsp&quot; /&gt;</code>在hello.jsp中包含该页面</p><h4 id="指令include和动作include的区别"><a href="#指令include和动作include的区别" class="headerlink" title="指令include和动作include的区别"></a>指令include和动作include的区别</h4><p>通过之前的学习知道，JSP最后会被转译成Servlet<br>如果是指令include <code>&lt;%@include file=&quot;footer.jsp&quot; %&gt;</code><br>footer.jsp的内容会被插入到 hello.jsp 转译 成的hello_jsp.java中，最后只会生成一个hello_jsp.java文件<br>如果是动作include <code>&lt;jsp:include page=&quot;footer.jsp&quot; /&gt;</code><br>footer.jsp的内容不会被插入到 hello.jsp 转译 成的hello_jsp.java中，还会有一个footer_jsp.java独立存在。 hello_jsp.java 会在服务端访问footer_jsp.java,然后把返回的结果，嵌入到响应中。</p><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><p>和Servlet的跳转一样，JSP的跳转也分服务端跳转和客户端跳转</p><h4 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h4><p>jsp的客户端跳转和Servlet中是一样的。<code>response.sendRedirect(&quot;hello.jsp&quot;);</code></p><h4 id="服务端跳转"><a href="#服务端跳转" class="headerlink" title="服务端跳转"></a>服务端跳转</h4><p>与Servlet的服务端跳转一样，也可以使用<code>request.getRequestDispatcher(&quot;hello.jsp&quot;).forward(request, response);</code><br>或者使用动作，简化代码<code>&lt;jsp:forward page=&quot;hello.jsp&quot;/&gt;</code></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>cookie 在平时生活中的运用:有的网站，登陆的时候，会出现一个选项，问你是否要一周内或者一个月内保持登陆状态。<br>如果你选了，那么一周之内，都不需要再输入账号密码。<br>这个功能，就是靠cookie来实现的</p><h4 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h4><p>Cookie是一种浏览器和服务器交互数据的方式。<br>Cookie是由服务器端创建，但是不会保存在服务器。<br>创建好之后，发送给浏览器。浏览器保存在用户本地。<br>下一次访问网站的时候，就会把该Cookie发送给服务器。</p><h4 id="setCookie-jsp"><a href="#setCookie-jsp" class="headerlink" title="setCookie.jsp"></a>setCookie.jsp</h4><p>在web目录下创建一个文件 setCookie.jsp<br><code>Cookie c = new Cookie(&quot;name&quot;, &quot;Gareen&quot;);</code>创建了一个cookie,名字是”name” 值是”Gareen”<br><code>c.setMaxAge(24 * 60 * 60);</code>表示这个cookie可以保留一天，如果是0，表示浏览器一关闭就销毁<br><code>c.setPath(&quot;/&quot;);</code>Path表示访问服务器的所有应用都会提交这个cookie到服务端，如果其值是 /a, 那么就表示仅仅访问 /a 路径的时候才会提交 cookie<br><code>response.addCookie(c);</code>通过response把这个cookie保存在浏览器端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page language<span class="token operator">=</span><span class="token string">"java"</span> contentType<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    pageEncoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"javax.servlet.http.Cookie"</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>    Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Gareen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"getCookie.jsp"</span><span class="token operator">></span>跳转到获取cookie的页面<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getCookie-jsp"><a href="#getCookie-jsp" class="headerlink" title="getCookie.jsp"></a>getCookie.jsp</h4><p><code>Cookie[] cookies  = request.getCookies();</code>表示获取所有浏览器传递过来的cookie<br><code>if (null != cookies )</code>如果浏览器端没有任何cookie，得到的Cookie数组是null</p><pre class="line-numbers language-for"><code class="language-for">   out.print(cookies[d].getName() + ":" + cookies[d].getValue() + "<br>");} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>遍历所有的cookie<br>可以看到name:Gareen，这个在setCookie.jsp中设置的cookie<br><font color="red">注； JSESSIONID 这个不是我们自己设置的cookie，这是tomcat设置的cookie</font></p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><h4 id="什么是Session"><a href="#什么是Session" class="headerlink" title="什么是Session"></a>什么是Session</h4><p>Session对应的中文翻译是会话。<br>会话指的是从用户打开浏览器访问一个网站开始，无论在这个网站中访问了多少页面，点击了多少链接，都属于同一个会话。 直到该用户关闭浏览器为止，都属于同一个会话。</p><h4 id="setSession-jsp"><a href="#setSession-jsp" class="headerlink" title="setSession.jsp"></a>setSession.jsp</h4><p><code>session.setAttribute(&quot;name&quot;, &quot;teemo&quot;);</code><br>session对象保存数据的方式，有点像Map的键值对(key-value),”name”是键，”teemo” 是值</p><h4 id="getSession-jsp"><a href="#getSession-jsp" class="headerlink" title="getSession.jsp"></a>getSession.jsp</h4><p><code>session.getAttribute(&quot;name&quot;);</code><br>通过session,根据”name” 取出对应的名称</p><h4 id="Session和Cookie的关系"><a href="#Session和Cookie的关系" class="headerlink" title="Session和Cookie的关系"></a>Session和Cookie的关系</h4><p>盒子对应服务器上的Session。<br>钥匙对应浏览器上的Cookie。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>JSP有4个作用域，分别是 </p><ul><li>pageContext 当前页面 </li><li>requestContext 一次请求 </li><li>sessionContext 当前会话 </li><li>applicationContext 全局，所有用户共享</li></ul><h4 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h4><p>pageContext表示当前页面作用域<br>通过pageContext.setAttribute(key,value)的数据，只能在当前页面访问，在其他页面就不能访问了。</p><pre class="line-numbers language-html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span>    <span class="token attr-name">pageContext.setAttribute("name","gareen");</span><span class="token attr-name">%</span><span class="token punctuation">></span></span>&lt;%=pageContext.getAttribute("name")%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="requestContext"><a href="#requestContext" class="headerlink" title="requestContext"></a>requestContext</h4><p>requestContext 表示一次请求。随着本次请求结束，其中的数据也就被回收。<br>常用写法是<br><code>request.setAttribute(&quot;name&quot;,&quot;gareen&quot;); request.getAttribute(&quot;name&quot;)</code><br>但是也可以用pageContext来做，写成<br><code>pageContext.setAttribute(&quot;name&quot;,&quot;gareen&quot;,pageContext.REQUEST_SCOPE); pageContext.getAttribute(&quot;name&quot;,pageContext.REQUEST_SCOPE)</code><br>不过不常用</p><h4 id="requestContext与服务端跳转"><a href="#requestContext与服务端跳转" class="headerlink" title="requestContext与服务端跳转"></a>requestContext与服务端跳转</h4><p>requestContext指的是一次请求<br>如果发生了服务端跳转，从setContext.jsp跳转到getContext.jsp，这其实，还是一次请求。 所以在getContext.jsp中，可以取到在requestContext中设置的值<br>这也是一种页面间传递数据的方式</p><h4 id="requestContext与客户端跳转"><a href="#requestContext与客户端跳转" class="headerlink" title="requestContext与客户端跳转"></a>requestContext与客户端跳转</h4><p>客户端跳转，浏览器会发生一次新的访问，新的访问会产生一个新的request对象。<br>所以页面间客户端跳转的情况下，是无法通过request传递数据的。</p><h4 id="sessionContext"><a href="#sessionContext" class="headerlink" title="sessionContext"></a>sessionContext</h4><p>sessionContext 指的是会话，从一个用户打开网站的那一刻起，无论访问了多少网页，链接都属于同一个会话，直到浏览器关闭。<br>所以页面间传递数据，也是可以通过session传递的。<br>但是，不同用户对应的session是不一样的，所以session无法在不同的用户之间共享数据。<br>与requestContext类似的，也可以用如下方式来做<br><code>pageContext.setAttribute(&quot;name&quot;,&quot;gareen&quot;,pageContext.SESSION_SCOPE);pageContext.getAttribute(&quot;name&quot;,pageContext.SESSION_SCOPE)</code></p><h4 id="applicationContext"><a href="#applicationContext" class="headerlink" title="applicationContext"></a>applicationContext</h4><p>applicationContext 指的是全局，所有用户共享同一个数据</p><p>在JSP中使用application对象， application对象是ServletContext接口的实例<br>也可以通过 request.getServletContext()来获取。<br>所以 application == request.getServletContext() 会返回true<br>application映射的就是web应用本身。<br>与requestContext类似的，也可以用如下方式来做<br><code>pageContext.setAttribute(&quot;name&quot;,&quot;gareen&quot;,pageContext.APPLICATION_SCOPE);pageContext.getAttribute(&quot;name&quot;,pageContext.APPLICATION_SCOPE)</code></p><h3 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h3><p>JSP的隐式对象指的是不需要显示定义，直接就可以使用的对象，比如request,response<br>JSP一共有9个隐式对象，分别是<br>request,response,out<br>pageContext, session,application<br>page,config,exception</p><h4 id="request-response-out"><a href="#request-response-out" class="headerlink" title="request,response,out"></a>request,response,out</h4><ul><li>request 代表请求</li><li>response 代表响应</li><li>out 代表 输出</li></ul><h4 id="pageContext-session-application"><a href="#pageContext-session-application" class="headerlink" title="pageContext, session,application"></a>pageContext, session,application</h4><ul><li>pageContext 代表当前页面作用域</li><li>session 代表当会话作用域</li><li>application 代表当全局作用域</li></ul><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>page 对象即表示当前对象<br>JSP 会被编译为一个Servlet类 ，运行的时候是一个Servlet实例。 page即代表this</p><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>config可以获取一些在web.xml中初始化的参数。<br>在JSP中使用config比较复杂，需要如下几个步骤</p><ul><li>在web.xml中进行配置</li><li>创建一个testconfig.jsp<br>通过config.getInitParameter(“database-ip”) 获取参数</li><li>访问路径，获取web.xml中配置的参数<br><a href="http://127.0.0.1/testconfig" target="_blank" rel="noopener">http://127.0.0.1/testconfig</a><br><font color="red">注1: 不能通过<a href="http://127.0.0.1/testconfig.jsp" target="_blank" rel="noopener">http://127.0.0.1/testconfig.jsp</a> 获取参数，只能通过/testconfig路径</font></li></ul><h4 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h4><p>exception 对象只有当前页面的&lt;%@page 指令设置为isErrorPage=”true”的时候才可以使用。<br>同时，在其他页面也需要设置 &lt;%@page 指令 errorPage=”” 来指定一个专门处理异常的页面。</p><ul><li>准备一个try.jsp<br>设置errorPage=”catch.jsp”，表示有异常产生的话，就交给catch.jsp处理<br>故意在里面造成数组越界异常</li><li>准备一个catch.jsp<br>设置 isErrorPage=”true”，表示当前页面可以使用exception对象<h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3>JSTL JSP Standard Tag Library 标准标签库<br>JSTL允许开人员可以像使用HTML标签 那样在JSP中开发Java功能。<br>JSTL库有core, i18n, fmt, sql 等等。 <h4 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h4>为了能够在JSP 中使用JSTL，首先需要两个jar包，分别是jstl.jar 和standard.jar<h4 id="set-out-remove"><a href="#set-out-remove" class="headerlink" title="set out remove"></a>set out remove</h4>在页面中使用JSTL需要在jsp中 通过指令进行设置</li></ul><p><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</code><br>prefix=”c” 表示后续的标签使用都会以&lt;c: 开头<br><code>&lt;c:set var=&quot;name&quot; value=&quot;${&#39;gareen&#39;}&quot; scope=&quot;request&quot; /&gt;</code><br>在作用域request中设置name,相当于<code>&lt;%request.setAttribute(&quot;name&quot;,&quot;gareen&quot;)%&gt;</code><br><code>&lt;c:out value=&quot;${name}&quot; /&gt;</code>相当于<code>&lt;%=request.getAttribute(&quot;name&quot;)%&gt;</code><br><code>&lt;c:remove var=&quot;name&quot; scope=&quot;request&quot; /&gt;</code>在作用域request中删掉name,相当于<code>&lt;%request.removeAttribute(&quot;name&quot;)%&gt;</code><br>作用域可以是pageContext, request, session, application,</p><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p>JSTL通过&lt;c:if test=””&gt; 进行条件判断<br>但是JSTL没有&lt;c:else，所以常用的办法是在&lt;c:if的条件里取反</p><h4 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h4><p>虽然JSTL没有提供else标签，但是提供了一个else功能的标签<br><code>&lt;c:choose&gt;    &lt;c:when test=&quot;${hp&lt;5}&quot;&gt;    &lt;/c:when&gt;    &lt;c:otherwise&gt;    &lt;/c:otherwise&gt;&lt;/c:choose&gt;</code></p><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>可以在JSP中使用for循环，但是其可读性很差。 借助JSTL的c:forEach标签，可以改善可读性<br>在本例中，分别使用for循环和&lt;c:forEach标签来演示遍历一个List的区别<br><code>&lt;c:forEach items=&quot;${heros}&quot; var=&quot;hero&quot; varStatus=&quot;st&quot;  &gt;</code><br>items=”${heros}” 表示遍历的集合<br>var=”hero” 表示把每一个集合中的元素放在hero上<br>varStatus=”st” 表示遍历的状态</p><h4 id="forTokens"><a href="#forTokens" class="headerlink" title="forTokens"></a>forTokens</h4><p>&lt;c:forTokens专门用于字符串拆分，并且可以指定多个分隔符</p><h4 id="fmt-formatNumber-格式化数字"><a href="#fmt-formatNumber-格式化数字" class="headerlink" title="fmt:formatNumber 格式化数字"></a>fmt:formatNumber 格式化数字</h4><p>fmt 标签常用来进行格式化，其中fmt:formatNumber用于格式化数字<br>使用之前要加上 <code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;  prefix=&#39;fmt&#39; %&gt;</code><br><code>&lt;fmt:formatNumber type=&quot;number&quot; value=&quot;${money}&quot; minFractionDigits=&quot;2&quot;/&gt;</code><br>&lt;fmt:formatNumber 表示格式化数字<br>minFractionDigits 小数点至少要有的位数<br>maxFractionDigits 小数点最多能有的位数</p><h4 id="fmt-formatDate-格式化日期"><a href="#fmt-formatDate-格式化日期" class="headerlink" title="fmt:formatDate 格式化日期"></a>fmt:formatDate 格式化日期</h4><p>fmt 标签常用来进行格式化，其中fmt:formatDate 用于格式化日期<br>和fmt:formatNumber 格式化数字一样，使用之前要加上<br><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;  prefix=&#39;fmt&#39; %&gt;</code><br><code>&lt;fmt:formatDate value=&quot;${now}&quot; pattern=&quot;G yyyy年MM月dd日 E&quot;/&gt;</code><br><code>&lt;fmt:formatDate value=&quot;${now}&quot; pattern=&quot;a HH:mm:ss.S z&quot;/&gt;</code><br><code>&lt;fmt:formatDate value=&quot;${now}&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;/&gt;</code><br>&lt;fmt:formatDate 表示格式化日期<br>yyyy 表示年份<br>MM 表示月份<br>dd 表示日期<br>E 表示星期几<br>a 表示是上午还是下午<br>HH 表示小时<br>mm 表示分钟<br>ss 表示秒<br>S 表示毫秒<br>z 表示时区</p><h3 id="EL表达式语言"><a href="#EL表达式语言" class="headerlink" title="EL表达式语言"></a>EL表达式语言</h3><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><p>不同版本的tomcat是否默认开启对EL表达式的支持，是不一定的。<br>所以为了保证EL表达式能够正常使用，需要在&lt;%@page 标签里加上isELIgnored=”false”<br>使用EL表达式，非常简单<br>比如使用JSTL输出要写成<br><font color="green">&lt;c:out value=”${name}” /&gt; </font><br>但是用EL只需要<br><font color="green">${name}</font></p><h4 id="作用域优先级"><a href="#作用域优先级" class="headerlink" title="作用域优先级"></a>作用域优先级</h4><p>EL表达式可以从pageContext,request,session,application四个作用域中取到值，如果4个作用域都有name属性怎么办？<br>EL会按照从高到低的优先级顺序获取<br>pageContext&gt;request&gt;session&gt;application</p><h4 id="JavaBean概念"><a href="#JavaBean概念" class="headerlink" title="JavaBean概念"></a>JavaBean概念</h4><p>EL可以很方便的访问JavaBean的属性，<br>JavaBean的标准</p><ul><li>提供无参public的构造方法(默认提供)</li><li>每个属性，都有public的getter和setter</li><li>如果属性是boolean,那么就对应is和setter方法</li></ul><h4 id="获取JavaBean的属性"><a href="#获取JavaBean的属性" class="headerlink" title="获取JavaBean的属性"></a>获取JavaBean的属性</h4><p>获取JavaBean的属性，只需要通过.符号操作就可以了。<br>像这样 ${hero.name} ，就会自动调用getName方法了<br><font color="red">注： 如果属性是boolean类型，那么就会自动调用isXXX方法了</font></p><h4 id="取参"><a href="#取参" class="headerlink" title="取参"></a>取参</h4><p>EL表达式还可以做到request.getParameter(“name”) 这样的形式获取浏览器传递过来的参数</p><h4 id="eq"><a href="#eq" class="headerlink" title="eq"></a>eq</h4><p>进行条件判断，大大简化了 JSTL的 c:if 和 c:choose 代码<br>如例，一行代码就能起到其他好几行代码的效果<br><font color="green">${killNumber ge 10? “超神”:”还没超神” }</font><br>例子中讲的是大于等于，除此之外的其他用法如下:<br>eq相等 ne、neq不相等<br>gt大于， lt小于<br>gt大于， lt小于<br>gte、ge大于等于<br>lte、le 小于等于<br>not非 mod求模<br>is [not] div by是否能被某数整除<br>is [not] even是否为偶数<br>is [not] odd是否为奇</p>]]></content>
      
      
      <categories>
          
          <category> j2ee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建动态Web项目</title>
      <link href="/2019/08/24/dong-tai-web-xiang-mu/"/>
      <url>/2019/08/24/dong-tai-web-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="动态web项目"><a href="#动态web项目" class="headerlink" title="动态web项目"></a>动态web项目</h1><h3 id="Servlet创建"><a href="#Servlet创建" class="headerlink" title="Servlet创建"></a>Servlet创建</h3><h4 id="新建Dynamic-Web-Project"><a href="#新建Dynamic-Web-Project" class="headerlink" title="新建Dynamic Web Project"></a>新建Dynamic Web Project</h4><p>File-&gt;New-&gt;Other-&gt;Web-&gt;Dynamic Web Project</p><h4 id="Servlet类"><a href="#Servlet类" class="headerlink" title="Servlet类"></a>Servlet类</h4><p>创建 HelloServlet<br><font color="red">注意：eclipse创建的时候会自带一个包名j2ee，不要使用这个包名，让包名置空</font></p><h4 id="解决HttpServlet找不到问题"><a href="#解决HttpServlet找不到问题" class="headerlink" title="解决HttpServlet找不到问题"></a>解决HttpServlet找不到问题</h4><p>默认的Dynamic Web Project并不会导入servlet-api.jar，所以Servlet会出现编译错误。<br>在tomcat中找到servlet-api.jar,并复制到e:/project/j2ee/WebContent/WEB-INF/lib 目录下</p><h4 id="刷新项目"><a href="#刷新项目" class="headerlink" title="刷新项目"></a>刷新项目</h4><p>复制好之后，右键点击项目，刷新即可。 这个动作，会导致当前项目的build path-&gt;Libraries里的 Web App Libraries 自动加上这个servlet-api.jar包，这样HelloServlet就编译通过了。</p><h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4><p>在WEB-INF目录中创建 web.xml</p><h4 id="通过Eclipse启动Tomcat-Run-On-Server"><a href="#通过Eclipse启动Tomcat-Run-On-Server" class="headerlink" title="通过Eclipse启动Tomcat-Run On Server"></a>通过Eclipse启动Tomcat-Run On Server</h4><p>接下来就是在eclipse中配置Tomcat并启动，这个需要好几个步骤完成。<br>首先右键项目 -&gt; Run As -&gt; Run on Server<br>通过Eclipse启动Tomcat-</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>部署成功之后，访问地址：<br><a href="http://127.0.0.1:8080/j2ee/hello" target="_blank" rel="noopener">http://127.0.0.1:8080/j2ee/hello</a></p><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><p>CRUD是常见的页面功能，即我们常说的增删改查<br>C - Creation 增加<br>R - Retrieve 查询<br>U - Update 修改<br>D - DELETE 删除 </p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="准备实体类"><a href="#准备实体类" class="headerlink" title="准备实体类"></a>准备实体类</h4><p>Hero类有id,name,hp,damage等属性。<br>并且为每一个属性提供public的getter和setter。</p><h4 id="准备DAO-类-HeroDAO"><a href="#准备DAO-类-HeroDAO" class="headerlink" title="准备DAO 类 HeroDAO"></a>准备DAO 类 HeroDAO</h4><p>准备一个HeroDAO，提供增加，删除，修改，查询等常规数据库操作方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> bean<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroDAO</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span>                <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"select count(*) from hero"</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                total <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Hero hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into hero values(null,?,?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Hero hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update hero set name= ?, hp = ? , damage = ? where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"delete from hero where id = "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Hero <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero hero <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from hero where id = "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> hp <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"hp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> damage <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> hero<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Short<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from hero order by id desc limit ?,? "</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Hero hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> hp <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"hp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> damage <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage<span class="token punctuation">;</span>                heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> heros<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建表Hero的SQL"><a href="#创建表Hero的SQL" class="headerlink" title="创建表Hero的SQL"></a>创建表Hero的SQL</h4><p>用于创建表Hero的SQL语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>hero<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>hero<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>hp<span class="token punctuation">`</span> <span class="token keyword">float</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>damage<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="为web应用导入mysql-jdbc的jar包"><a href="#为web应用导入mysql-jdbc的jar包" class="headerlink" title="为web应用导入mysql-jdbc的jar包"></a>为web应用导入mysql-jdbc的jar包</h4><p>其作用的web应用在tomcat中运行起来后，能够找到jar包中的类。所以需要把 mysql 的jar包放在WEB-INF/lib 目录下。<br><strong>放在WEB-INF/lib 下指的是能够web应用中找到对应的class，如果要在eclipse中做调试，还是需要为项目添加该jar才可以。</strong></p><h4 id="编写-HeroListServlet"><a href="#编写-HeroListServlet" class="headerlink" title="编写 HeroListServlet"></a>编写 HeroListServlet</h4><p>做一个Hero的维护页面需要一些通用的操作，比如增加，删除，编辑，修改，查询等。<br>每个不同的操作，都需要一个对应的Servlet，除了做Hero之外，还会做到其他的一些表的相关操作，所以好的规范会对将来的维护更有好处。<br>一般会这样命名,以查询为例 HeroListServlet ： [表][行为]Servlet 这样一种命名规则。<br>所以对于Hero而言就会如此命名：</p><ul><li>增加 HeroAddServlet</li><li>删除 HeroDeleteServlet</li><li>编辑 HeroEditServlet</li><li>修改 HeroUpdateServlet</li><li>查询 HeroListServlet</li></ul><p>在HeroListServlet中，会使用HeroDAO把数据查询出来，然后拼接成一个table用于显示其内容</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> bean<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">import</span> dao<span class="token punctuation">.</span>HeroDAO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroListServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;table align='center' border='1' cellspacing='0'>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;tr>&lt;td>id&lt;/td>&lt;td>name&lt;/td>&lt;td>hp&lt;/td>&lt;td>damage&lt;/td>&lt;/tr>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String trFormat <span class="token operator">=</span> <span class="token string">"&lt;tr>&lt;td>%d&lt;/td>&lt;td>%s&lt;/td>&lt;td>%f&lt;/td>&lt;td>%d&lt;/td>&lt;/tr>\r\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String tr <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>trFormat<span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getHp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><h4 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><p>在web.xml中把路径 listHero映射到HeroListServlet上。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>RegisterServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>RegisterServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>RegisterServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroListServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HeroListServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroListServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/listHero<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="准备增加的页面-addHero-html"><a href="#准备增加的页面-addHero-html" class="headerlink" title="准备增加的页面 addHero.html"></a>准备增加的页面 addHero.html</h4><p>在web目录下增加addHero.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示用UTF-8显示中文，同时浏览器也会使用UTF-8编码提交中文<br>form:<br>action设置为addHero路径<br>method设置为post 也是为了提交中文</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addHero<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     名字 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>血量 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>伤害： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>damage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>增加 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写-HeroAddServlet"><a href="#编写-HeroAddServlet" class="headerlink" title="编写 HeroAddServlet"></a>编写 HeroAddServlet</h4><p>HeroAddServlet 中根据浏览器传过来的参数，创建一个Hero对象。 接着通过HeroDAO把该对象保存到数据库中。<br>最后使用客户端跳转到listHero查看所有的Hero，就能看到新加入的Hero对象了<br><strong>request.setCharacterEncoding(“UTF-8”);</strong><br>表示使用UTF-8的方式获取浏览器传过来的中文</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> bean<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">import</span> dao<span class="token punctuation">.</span>HeroDAO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroAddServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hero hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hero<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hero<span class="token punctuation">.</span><span class="token function">setHp</span><span class="token punctuation">(</span>Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"hp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hero<span class="token punctuation">.</span><span class="token function">setDamage</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"damage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/listHero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置web-xml-1"><a href="#配置web-xml-1" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroAddServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HeroAddServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroAddServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/addHero<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="提供delete超链"><a href="#提供delete超链" class="headerlink" title="提供delete超链"></a>提供delete超链</h4><p>修改HeroLIstServlet，多一个单元格，是一个超链</p><h4 id="修改HeroListServlet"><a href="#修改HeroListServlet" class="headerlink" title="修改HeroListServlet"></a>修改HeroListServlet</h4><p>为table新增加一列delete,对于每条hero数据，增加一个delete超链</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> bean<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">import</span> dao<span class="token punctuation">.</span>HeroDAO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroListServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;table align='center' border='1' cellspacing='0'>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;tr>&lt;td>id&lt;/td>&lt;td>name&lt;/td>&lt;td>hp&lt;/td>&lt;td>damage&lt;/td>&lt;td>delete&lt;/td>&lt;/tr>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String trFormat <span class="token operator">=</span> <span class="token string">"&lt;tr>&lt;td>%d&lt;/td>&lt;td>%s&lt;/td>&lt;td>%f&lt;/td>&lt;td>%d&lt;/td>&lt;td>&lt;a href='deleteHero?id=%d'>delete&lt;/a>&lt;/td>&lt;/tr>\r\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String tr <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>trFormat<span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getHp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hero<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置web-xml-2"><a href="#配置web-xml-2" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><p>配置web.xml 把/deleteHero指向 HeroDeleteServlet</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroDeleteServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HeroDeleteServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroDeleteServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/deleteHero<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写HeroDeleteServlet"><a href="#编写HeroDeleteServlet" class="headerlink" title="编写HeroDeleteServlet"></a>编写HeroDeleteServlet</h4><p>首先获取参数id<br>然后通过HeroDAO根据id，删除该对象<br>然后客户端跳转到 /listHero</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> dao<span class="token punctuation">.</span>HeroDAO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroDeleteServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/listHero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><h4 id="修改HeroListServlet-1"><a href="#修改HeroListServlet-1" class="headerlink" title="修改HeroListServlet"></a>修改HeroListServlet</h4><p>新增加一列 edit，里面放上指向 /editHero的超链</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> bean<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">import</span> dao<span class="token punctuation">.</span>HeroDAO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroListServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;table align='center' border='1' cellspacing='0'>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;tr>&lt;td>id&lt;/td>&lt;td>name&lt;/td>&lt;td>hp&lt;/td>&lt;td>damage&lt;/td>&lt;td>edit&lt;/td>&lt;td>delete&lt;/td>&lt;/tr>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String trFormat <span class="token operator">=</span> <span class="token string">"&lt;tr>&lt;td>%d&lt;/td>&lt;td>%s&lt;/td>&lt;td>%f&lt;/td>&lt;td>%d&lt;/td>&lt;td>&lt;a href='editHero?id=%d'>edit&lt;/a>&lt;/td>&lt;td>&lt;a href='deleteHero?id=%d'>delete&lt;/a>&lt;/td>&lt;/tr>\r\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String tr <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>trFormat<span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getHp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hero<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hero<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置web-xml-3"><a href="#配置web-xml-3" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><p>在web.xml中把 /editHero路径映射到 HeroEditServlet类上</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroEditServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HeroEditServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroEditServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/editHero<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="准备HeroEditServlet"><a href="#准备HeroEditServlet" class="headerlink" title="准备HeroEditServlet"></a>准备HeroEditServlet</h4><p>HeroEditServlet 根据浏览器传过来的id获取一个hero对象<br>然后根据这个hero对象，准备一个类似add.html的页面，不同之处在于每个输入框都是有值的。<br>最后还会提供一个type=”hidden”的input,用于提交id到路径/updateHero</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> bean<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">import</span> dao<span class="token punctuation">.</span>HeroDAO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroEditServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hero hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        format<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;!DOCTYPE html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        format<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;form action='updateHero' method='post'>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        format<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"名字 ： &lt;input type='text' name='name' value='%s' > &lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        format<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"血量 ： &lt;input type='text' name='hp'  value='%f' > &lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        format<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"伤害： &lt;input type='text' name='damage'  value='%d' > &lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        format<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;input type='hidden' name='id' value='%d'>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        format<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;input type='submit' value='更新'>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        format<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/form>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String html <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getHp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><h4 id="编写-HeroUpdateServlet"><a href="#编写-HeroUpdateServlet" class="headerlink" title="编写 HeroUpdateServlet"></a>编写 HeroUpdateServlet</h4><p>HeroUpdateServlet<br>根据浏览器提交的id name hp damage创建一个Hero对象<br>然后调用HeroDAO的update，进行更新<br>更新结束后，客户端跳转到 /listHero</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> bean<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">import</span> dao<span class="token punctuation">.</span>HeroDAO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroUpdateServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hero hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hero<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hero<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hero<span class="token punctuation">.</span><span class="token function">setHp</span><span class="token punctuation">(</span>Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"hp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hero<span class="token punctuation">.</span><span class="token function">setDamage</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"damage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/listHero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置web-xml-4"><a href="#配置web-xml-4" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><p>新增对路径 /updateHero的映射</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroUpdateServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HeroUpdateServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HeroUpdateServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/updateHero<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h4 id="Servlet提交数据"><a href="#Servlet提交数据" class="headerlink" title="Servlet提交数据"></a>Servlet提交数据</h4><p>要运行起来需要jquery.min.js</p>]]></content>
      
      
      <categories>
          
          <category> j2ee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Servlet</title>
      <link href="/2019/08/22/servlet/"/>
      <url>/2019/08/22/servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="Hello-Servlet"><a href="#Hello-Servlet" class="headerlink" title="Hello Servlet"></a>Hello Servlet</h3><p>Servlet 本身不能独立运行，需要在一个web应用中运行的,而一个web应用是部署在tomcat中的</p><ul><li><p>导入必须的servlet-api.jar包,servlet-api.jar 包位于 \tomcat\lib\servlet-api.jar<br>右键点击项目 -&gt; properties -&gt; Java Build Path -&gt;Libraries -&gt; Add External JARs</p></li><li><p>编写HelloServlet,创建 HelloServlet(在Eclipse中创建一个普通类的方式：菜单-&gt;File-&gt;New-&gt;Class)<br>注意：eclipse创建的时候会自带一个包名j2ee，不要使用这个包名，让包名置空<br>HelloServlet继承了 HttpServlet<br>并且提供了一个doGet方法</p></li><li><p>配置web.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定项目输出到classes目录<br>首先在WEB-INF下创建classes目录<br>把项目的class文件输出由原来的 j2ee/bin 设置到 j2ee/web/WEB-INF/classes下<br>步骤:<br>项目右键-&gt;properties-&gt;Java Build Path-&gt;Source-&gt;右下角的 Brower-&gt; 指定位置是 j2ee/web/WEB-INF/classes。</p></li><li><p>配置tomcat的server.xml 中的  <strong>&lt;Context path=”/“ docBase=”项目路径\web” debug=”0” reloadable=”false”</strong>/&gt;</p></li></ul><p>接着就可以在<a href="http://127.0.0.1/hello中访问到网页" target="_blank" rel="noopener">http://127.0.0.1/hello中访问到网页</a></p><h3 id="Servlet跳转"><a href="#Servlet跳转" class="headerlink" title="Servlet跳转"></a>Servlet跳转</h3><p>服务端跳转 <code>request.getRequestDispatcher(&quot;success.html&quot;).forward(request, response);</code><br>客户端跳转 <code>response.sendRedirect(&quot;fail.html&quot;);</code></p><h3 id="Servlet自启动"><a href="#Servlet自启动" class="headerlink" title="Servlet自启动"></a>Servlet自启动</h3><p>在web.xml中，配置Hello Servlet的地方，增加一句 <code>&lt;load-on-startup&gt;10&lt;/load-on-startup&gt;</code><br>如果有多个Servlet都配置了自动启动，数字越小，启动的优先级越高<br>同时，为HelloServlet提供一个init(ServletConfig) 方法验证自启动</p><h3 id="Servlet-request常见方法"><a href="#Servlet-request常见方法" class="headerlink" title="Servlet request常见方法"></a>Servlet request常见方法</h3><ul><li><p>request.getRequestURL(): 浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)” </p></li><li><p>request.getRequestURI(): 浏览器发出请求的资源名部分，去掉了协议和主机名” </p></li><li><p>request.getQueryString(): 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到</p></li><li><p>request.getRemoteAddr(): 浏览器所处于的客户机的IP地址</p></li><li><p>request.getRemoteHost(): 浏览器所处于的客户机的主机名</p></li><li><p>request.getRemotePort(): 浏览器所处于的客户机使用的网络端口</p></li><li><p>request.getLocalAddr(): 服务器的IP地址</p></li><li><p>request.getLocalName(): 服务器的主机名</p></li><li><p>request.getMethod(): 得到客户机请求方式一般是GET或者POST</p></li><li><p>request.getParameter(): 是常见的方法，用于获取单值的参数</p></li><li><p>request.getParameterValues(): 用于获取具有多值的参数，比如注册时候提交的 “hobits”，可以是多选的。</p></li><li><p>request.getParameterMap(): 用于遍历所有的参数，并返回Map类型。</p></li><li><p>request.getHeader() 获取浏览器传递过来的头信息。<br>比如getHeader(“user-agent”) 可以获取浏览器的基本资料，这样就能判断是firefox、IE、chrome、或者是safari浏览器</p></li><li><p>request.getHeaderNames() 获取浏览器所有的头信息名称，根据头信息名称就能遍历出所有的头信息</p></li></ul><h3 id="servlet-response用法"><a href="#servlet-response用法" class="headerlink" title="servlet response用法"></a>servlet response用法</h3><p>通过response设置响应已经用得比较多了，在前面的Servlet学习中都是用到 <code>PrintWriter pw= response.getWriter();</code><br>通过response.getWriter(); 获取一个PrintWriter 对象<br>可以使用println(),append(),write(),format()等等方法设置返回给浏览器的html内容。</p><p><code>response.setContentType(&quot;text/html&quot;);</code><br>“text/html” 是即格式 ，在request获取头信息 中对应的request.getHeader(“accept”).<br>“text/html” 是存在的，表示浏览器可以识别这种格式，如果换一个其他的格式， 比如 “text/lol” ，浏览器不能识别，那么打开此servlet就会弹出一个下载的对话框。</p><ol><li><p>response.setContentType(“text/html; charset=UTF-8”);<br>不仅发送到浏览器的内容会使用UTF-8编码，而且还通知浏览器使用UTF-8编码方式进行显示。所以总能正常显示中文</p></li><li><p>response.setCharacterEncoding(“UTF-8”);<br>仅仅是发送的浏览器的内容是UTF-8编码的，至于浏览器是用哪种编码方式显示不管。 所以当浏览器的显示编码方式不是UTF-8的时候，就会看到乱码，需要手动再进行一次设置。</p></li></ol><h4 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h4><p>客户端有两种跳转<br>302 表示临时跳转<br>301 表示永久性跳转</p><p>302就是前面在客户端跳转章节用到过的<code>response.sendRedirect(&quot;fail.html&quot;);</code><br>301要使用另外的手段：<br><code>response.setStatus(301); response.setHeader(&quot;Location&quot;, &quot;fail.html&quot;);</code></p><h3 id="上传页面-upload-html"><a href="#上传页面-upload-html" class="headerlink" title="上传页面 upload.html"></a>上传页面 upload.html</h3><p>上传页面有两点需要注意</p><ul><li>form 的method必须是post的，get不能上传文件。 还需要加上enctype=”multipart/form-data” 表示提交的数据是二进制文件<br><code>&lt;form action=&quot;uploadPhoto&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</code></li><li>需要提供type=”file” 的字段进行上传</li></ul>]]></content>
      
      
      <categories>
          
          <category> j2ee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反射</title>
      <link href="/2019/08/15/java-fan-she-ji-zhi/"/>
      <url>/2019/08/15/java-fan-she-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射 "></a>反射 </h1><h3 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h3><p>类对象概念： 所有的类，都存在一个类对象，这个类对象用于提供类本身的信息，比如有几种构造方法， 有多少属性，有哪些普通方法。</p><h4 id="什么是类对象"><a href="#什么是类对象" class="headerlink" title="什么是类对象"></a>什么是类对象</h4><p>在理解类对象之前，先说我们熟悉的对象之间的区别：<br>garen和teemo都是Hero对象，他们的区别在于，各自有不同的名称，血量，伤害值。<br>然后说说类之间的区别<br>Hero和Item都是类，他们的区别在于有不同的方法，不同的属性。<br>类对象，就是用于描述这种类，都有什么属性，什么方法的</p><h4 id="获取类对象-1"><a href="#获取类对象-1" class="headerlink" title="获取类对象"></a>获取类对象</h4><p>获取类对象有3种方式</p><ul><li>Class.forName</li><li>Hero.class</li><li>new Hero().getClass()</li></ul><p>在一个JVM中，一种类，只会有一个类对象存在。所以以上三种方式取出来的类对象，都是一样的。<br><font color="red">注： 准确的讲是一个ClassLoader下，一种类，只会有一个类对象存在。通常一个JVM下，只会有一个ClassLoader。</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String className <span class="token operator">=</span> <span class="token string">"charactor.Hero"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Class <span class="token class-name">pClass1</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">pClass2</span><span class="token operator">=</span>Hero<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">pClass3</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pClass1<span class="token operator">==</span>pClass2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pClass1<span class="token operator">==</span>pClass3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取类对象的时候，会导致类属性被初始化"><a href="#获取类对象的时候，会导致类属性被初始化" class="headerlink" title="获取类对象的时候，会导致类属性被初始化"></a>获取类对象的时候，会导致类属性被初始化</h4><p>为Hero增加一个静态属性,并且在静态初始化块里进行初始化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> String copyright<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化 copyright"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    copyright <span class="token operator">=</span> <span class="token string">"版权由Riot Games公司所有"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论什么途径获取类对象，都会导致静态属性被初始化，而且只会执行一次。（除了直接使用 Class c = Hero.class 这种方式，这种方式不会导致静态属性被初始化）</p><h3 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a>创建一个对象</h3><p>通过反射机制创建一个对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传统的使用new的方式创建对象</span>    Hero h1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"teemo"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用反射的方式创建对象</span>        String className <span class="token operator">=</span> <span class="token string">"charactor.Hero"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类对象</span>        Class <span class="token class-name">pClass</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造器</span>        Constructor c<span class="token operator">=</span> pClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过构造器实例化</span>        Hero h2<span class="token operator">=</span> <span class="token punctuation">(</span>Hero<span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"gareen"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><p>通过反射机制修改对象的属性</p><h4 id="Hero-java"><a href="#Hero-java" class="headerlink" title="Hero.java"></a>Hero.java</h4><p>为了访问属性，把name修改为public。<br>对于private修饰的成员，需要使用setAccessible(true)才能访问和修改。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> charactor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> damage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Hero</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span>string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hero [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackHero</span><span class="token punctuation">(</span>Hero h2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span> <span class="token string">" 正在攻击 "</span> <span class="token operator">+</span> h2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TestRelection"><a href="#TestRelection" class="headerlink" title="TestRelection"></a>TestRelection</h4><p>通过反射修改属性的值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestReflection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Hero h <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用传统方式修改name的值为garen</span>            h<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"garen"</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取类Hero的名字叫做name的字段</span>                Field f1<span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//修改这个字段的值</span>                f1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token string">"teemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打印被修改后的值</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getField和getDeclaredField的区别"><a href="#getField和getDeclaredField的区别" class="headerlink" title="getField和getDeclaredField的区别"></a>getField和getDeclaredField的区别</h4><p>getField和getDeclaredField的区别<br>这两个方法都是用于获取字段<br>getField 只能获取public的，包括从父类继承来的字段。<br>getDeclaredField 可以获取本类所有的字段，包括private的，但是不能获取继承来的字段。<br><font color="red">注： 这里只能获取到private的字段，但并不能访问该private字段的值,除非加上setAccessible(true)</font></p><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>通过反射机制，调用一个对象的方法</p><h4 id="调用方法-1"><a href="#调用方法-1" class="headerlink" title="调用方法"></a>调用方法</h4><p>首先为Hero的name属性，增加setter和getter,通过反射机制调用Hero的setName</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> charactor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> damage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Hero</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span>string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hero [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackHero</span><span class="token punctuation">(</span>Hero h2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> reflection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestReflection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取这个名字叫做setName，参数类型是String的方法</span>            Method m <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对h对象，调用这个方法</span>            m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token string">"盖伦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用传统的方式，调用getName方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 图形界面(下)</title>
      <link href="/2019/08/13/java-tu-xiang-jie-mian-xia/"/>
      <url>/2019/08/13/java-tu-xiang-jie-mian-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="图形界面-下"><a href="#图形界面-下" class="headerlink" title="图形界面(下)"></a>图形界面(下)</h1><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><p>GUI的菜单分为菜单栏，菜单和菜单项</p><h4 id="菜单栏-JMenuBar-和菜单-JMenu"><a href="#菜单栏-JMenuBar-和菜单-JMenu" class="headerlink" title="菜单栏(JMenuBar)和菜单(JMenu)"></a>菜单栏(JMenuBar)和菜单(JMenu)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 菜单栏</span>JMenuBar mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 菜单</span>JMenu mHero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"道具"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mWord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"符文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mSummon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"召唤师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mTalent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"天赋树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把菜单加入到菜单栏</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mHero<span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mItem<span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mWord<span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mSummon<span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mTalent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把菜单栏加入到frame，这里用的是set而非add</span>f<span class="token punctuation">.</span><span class="token function">setJMenuBar</span><span class="token punctuation">(</span>mb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="菜单项-JMenuItem"><a href="#菜单项-JMenuItem" class="headerlink" title="菜单项(JMenuItem)"></a>菜单项(JMenuItem)</h4><pre class="line-numbers language-java"><code class="language-java">JMenuBar mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mHero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"道具"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mWord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"符文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mSummon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"召唤师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JMenu mTalent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"天赋树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 菜单项</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"近战-Warriar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"远程-Range"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"物理-physical"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"坦克-Tank"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"法系-Mage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"辅助-Support"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"打野-Jungle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"突进-Charge"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"男性-Boy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"女性-Girl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 分隔符</span>mHero<span class="token punctuation">.</span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHero<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"所有-All"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mHero<span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mItem<span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mWord<span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mSummon<span class="token punctuation">)</span><span class="token punctuation">;</span>mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mTalent<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setJMenuBar</span><span class="token punctuation">(</span>mb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.ax1x.com/2019/08/13/mCO3B6.png" alt></p><h3 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h3><p>工具栏用于存放常用的按钮</p><h4 id="工具栏-JToolBar"><a href="#工具栏-JToolBar" class="headerlink" title="工具栏(JToolBar)"></a>工具栏(JToolBar)</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 工具栏</span>JToolBar tb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JToolBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为工具栏增加按钮</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/4.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/5.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/6.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把工具栏放在north的位置</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tb<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="给按钮设置提示信息"><a href="#给按钮设置提示信息" class="headerlink" title="给按钮设置提示信息"></a>给按钮设置提示信息</h4><p>当鼠标放在按钮上的时候会出现提示</p><pre class="line-numbers language-java"><code class="language-java">JToolBar tb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JToolBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/4.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/5.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/6.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span>tb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给按钮设置提示信息</span>b1<span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">"坑爹英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把工具栏放在north的位置</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tb<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="禁止工具栏拖动"><a href="#禁止工具栏拖动" class="headerlink" title="禁止工具栏拖动"></a>禁止工具栏拖动</h4><p>默认情况下 工具栏可以通过鼠标拖动 <code>setFloatable(false);</code><br>可以禁止鼠标拖动功能</p><pre class="line-numbers language-java"><code class="language-java">b1<span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">"坑爹英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 禁止工具栏拖动</span>tb<span class="token punctuation">.</span><span class="token function">setFloatable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="基本表格"><a href="#基本表格" class="headerlink" title="基本表格"></a>基本表格</h4><p>显示一个Table需要两组数据 </p><ul><li>一维数组： String[]columnNames 表示表格的标题 </li><li>二维数组： String[][] heros 表格中的内容<br>默认情况下，表格的标题是不会显示出来了，除非使用了JScrollPane</li></ul><pre class="line-numbers language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 表格上的title</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> columnNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"hp"</span><span class="token punctuation">,</span> <span class="token string">"damage"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 表格中的内容，是一个二维数组</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"盖伦"</span><span class="token punctuation">,</span> <span class="token string">"616"</span><span class="token punctuation">,</span> <span class="token string">"100"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"提莫"</span><span class="token punctuation">,</span> <span class="token string">"512"</span><span class="token punctuation">,</span> <span class="token string">"102"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"奎因"</span><span class="token punctuation">,</span> <span class="token string">"832"</span><span class="token punctuation">,</span> <span class="token string">"200"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>JTable t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> columnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加滚动条-JScrollPane"><a href="#添加滚动条-JScrollPane" class="headerlink" title="添加滚动条(JScrollPane)"></a>添加滚动条(JScrollPane)</h4><p>JScrollPane: 带滚动条的Panel<br>把table放进去就可以看到table的title<br>同样的把textarea放进去，并且textarea内容够长的话，就会看到滚动条</p><pre class="line-numbers language-java"><code class="language-java">JTable t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> columnNames<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据t创建 JScrollPane</span>JScrollPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或则创建一个空的JScrollPane，再通过setViewportView把table放在JScrollPane中</span><span class="token comment" spellcheck="true">// JScrollPane sp = new JScrollPane(t);</span><span class="token comment" spellcheck="true">// sp.setViewportView(t);</span><span class="token comment" spellcheck="true">// 把sp而非JTable加入到JFrame上，</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列宽"><a href="#列宽" class="headerlink" title="列宽"></a>列宽</h4><p>设置列宽</p><pre class="line-numbers language-java"><code class="language-java">JScrollPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置列宽度</span>t<span class="token punctuation">.</span><span class="token function">getColumnModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColumn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPreferredWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TableModel"><a href="#TableModel" class="headerlink" title="TableModel"></a>TableModel</h4><p>首先说下TableModel的设计思想，在Model这种思想的指导下，数据和显示分离开来了。 比如对于JTable而言，有数据部分，也有显示部分(比如列宽等信息)。 数据部分，专门做一个类，叫做TableModel，就用于存放要显示的数据。<br>使用TableModel的方式存放Table需要显示的数据<br>HeroTableModel 继承AbstractTableModel ，进而实现了接口TableModel<br>在HeroTableModel 中提供一个table显示需要的所有信息</p><ul><li>getRowCount 返回一共有多少行</li><li>getColumnCount 返回一共有多少列</li><li>getColumnName 每一列的名字</li><li>isCellEditable 单元格是否可以修改</li><li>getValueAt 每一个单元格里的值<br>当图形界面需要渲染第一个单元格的数据的时候，就会调用方法TabelModel的getValueAt(0,0) ，把返回值拿到并显示</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gui<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>table<span class="token punctuation">.</span>AbstractTableModel<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroTableModel</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTableModel</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> columnNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"hp"</span><span class="token punctuation">,</span> <span class="token string">"damage"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"盖伦"</span><span class="token punctuation">,</span> <span class="token string">"616"</span><span class="token punctuation">,</span> <span class="token string">"100"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"提莫"</span><span class="token punctuation">,</span> <span class="token string">"512"</span><span class="token punctuation">,</span> <span class="token string">"102"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"奎因"</span><span class="token punctuation">,</span> <span class="token string">"832"</span><span class="token punctuation">,</span> <span class="token string">"200"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回一共有多少行</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> heros<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回一共有多少列</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> columnNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取每一列的名称</span>    <span class="token keyword">public</span> String <span class="token function">getColumnName</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> columnNames<span class="token punctuation">[</span>columnIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 单元格是否可以修改</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCellEditable</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 每一个单元格里的值</span>    <span class="token keyword">public</span> Object <span class="token function">getValueAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> heros<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>columnIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gui<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>BorderLayout<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JScrollPane<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JTable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGUI</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JFrame f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"LoL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个TableModel</span>        HeroTableModel htm<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroTableModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据 TableModel来创建 Table</span>        JTable t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>htm<span class="token punctuation">)</span><span class="token punctuation">;</span>        JScrollPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进一步理解TableModel"><a href="#进一步理解TableModel" class="headerlink" title="进一步理解TableModel"></a>进一步理解TableModel</h4><p>在使用TableModel之前，是使用</p><pre class="line-numbers language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> columnNames <span class="token operator">=</span>。。。String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heros <span class="token operator">=</span> 。。。JTable t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> columnNames<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样的风格创建一个JTable的<br>所以实际上调用的是如下的构造方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">JTable</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rowData<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> columnNames<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TableModel-与DAO结合"><a href="#TableModel-与DAO结合" class="headerlink" title="TableModel 与DAO结合"></a>TableModel 与DAO结合</h4><p>通过TableModel与DAO结合显示数据库中Hero信息。<br>DAO使用<a href="https://silencebutkeep.github.io/2019/08/12/java-jdbc/#toc-heading-33" target="_blank" rel="noopener">HeroDAO</a><br>在TableModel中，使用从DAO返回的List作为TableModel的数据<br>只需要修改HeroTableModel，无需修改TestGUI。 这正好演绎了Model设计思想中的数据分离的好处，当只需要数据发生变化的时候，修改Model即可，界面GUI部分，不需要做任何改动</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gui<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>table<span class="token punctuation">.</span>AbstractTableModel<span class="token punctuation">;</span><span class="token keyword">import</span> jdbc<span class="token punctuation">.</span>HeroDAO<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroTableModel</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTableModel</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> columnNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"hp"</span><span class="token punctuation">,</span> <span class="token string">"damage"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用从DAO返回的List作为TableModel的数据</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// heros.size返回一共有多少行</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> heros<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> columnNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColumnName</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> columnNames<span class="token punctuation">[</span>columnIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCellEditable</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 先通过heros.get(rowIndex)获取行对应的Hero对象</span>    <span class="token comment" spellcheck="true">// 然后根据columnIndex返回对应的属性</span>    <span class="token keyword">public</span> Object <span class="token function">getValueAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero h <span class="token operator">=</span> heros<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> columnIndex<span class="token punctuation">)</span>            <span class="token keyword">return</span> h<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> columnIndex<span class="token punctuation">)</span>            <span class="token keyword">return</span> h<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> columnIndex<span class="token punctuation">)</span>            <span class="token keyword">return</span> h<span class="token punctuation">.</span>hp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> columnIndex<span class="token punctuation">)</span>            <span class="token keyword">return</span> h<span class="token punctuation">.</span>damage<span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TableSelectionModel-监听jtable"><a href="#TableSelectionModel-监听jtable" class="headerlink" title="TableSelectionModel(监听jtable)"></a>TableSelectionModel(监听jtable)</h4><p>通过table可以获取一个 TableSelectionModel，专门用于监听jtable选中项的变化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> HeroTableModel htm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroTableModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> JTable t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>htm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 准备一个Panel上面放一个Label用于显示哪条被选中了</span>JPanel p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"暂时未选中条目"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>JScrollPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用selection监听器来监听table的哪个条目被选中</span>t<span class="token punctuation">.</span><span class="token function">getSelectionModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListSelectionListener</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">ListSelectionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当选择了某一行的时候触发该事件</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valueChanged</span><span class="token punctuation">(</span>ListSelectionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取哪一行被选中了</span>                <span class="token keyword">int</span> row <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getSelectedRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 根据选中的行，到HeroTableModel中获取对应的对象</span>                Hero h <span class="token operator">=</span> htm<span class="token punctuation">.</span>heros<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 更新标签内容</span>                l<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"当前选中的英雄是： "</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新Table"><a href="#更新Table" class="headerlink" title="更新Table"></a>更新Table</h4><p>以新增数据到数据库，然后更新Table</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> HeroTableModel htm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroTableModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> JTable t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>htm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 增加 一个 panel用于放置名称，血量输入框和增加 按钮</span>JPanel p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> JLabel lName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> JTextField tfName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> JLabel lHp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"血量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> JTextField tfHp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton bAdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"增加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tfName<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tfHp<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lName<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tfName<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lHp<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tfHp<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bAdd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为增加按钮添加监听</span>bAdd<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HeroDAO dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据输入框数据创建一个Hero对象</span>        Hero h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>name <span class="token operator">=</span> tfName<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>hp <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>tfHp<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过dao把该对象加入到数据库</span>        dao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过dao更新tablemodel中的数据</span>        htm<span class="token punctuation">.</span>heros <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用JTable的updateUI，刷新界面。</span>        <span class="token comment" spellcheck="true">// 刷新界面的时候，会到tablemodel中去取最新的数据</span>        <span class="token comment" spellcheck="true">// 就能看到新加进去的数据了</span>        t<span class="token punctuation">.</span><span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输入项验证"><a href="#输入项验证" class="headerlink" title="输入项验证"></a>输入项验证</h4><p>如果用户输入的名称为空，或者血量不是小数，在提交数据的时候都会报错。<br>“感觉上” 界面就卡住了。 这是不友好的人机交互行为。<br>所以需要加上输入项的验证，如果输入的数据不合格，应该<a href="https://silencebutkeep.github.io/2019/08/12/java-tu-xiang-jie-mian/#toc-heading-28" target="_blank" rel="noopener">弹出对话框</a>提示用户具体原因。</p><pre class="line-numbers language-java"><code class="language-java">bAdd<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HeroDAO dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hero h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> tfName<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过name长度判断 名称是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 弹出对话框提示用户</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"名称不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 名称输入框获取焦点</span>            tfName<span class="token punctuation">.</span><span class="token function">grabFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String hp <span class="token operator">=</span> tfHp<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把hp转换为浮点型，如果出现异常NumberFormatException表示不是浮点型格式</span>            Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"血量只能是小数 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tfHp<span class="token punctuation">.</span><span class="token function">grabFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        h<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>hp <span class="token operator">=</span> Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        dao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        htm<span class="token punctuation">.</span>heros <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选中指定行"><a href="#选中指定行" class="headerlink" title="选中指定行"></a>选中指定行</h4><ul><li>table初始化后，应该默认选中第一行 </li><li>增加数据后，也应该选中新增的这一条</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置选择模式为 只能选中一行</span>t<span class="token punctuation">.</span><span class="token function">setSelectionMode</span><span class="token punctuation">(</span>ListSelectionModel<span class="token punctuation">.</span>SINGLE_SELECTION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 选中第一行 （基本0）</span>t<span class="token punctuation">.</span><span class="token function">getSelectionModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSelectionInterval</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在增加数据后</span><span class="token comment" spellcheck="true">// 选中 第一行 ，因为 DAO是按照 ID倒排序查询，所以第一行就是新加入的数据</span>t<span class="token punctuation">.</span><span class="token function">getSelectionModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSelectionInterval</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Swing中的线程"><a href="#Swing中的线程" class="headerlink" title="Swing中的线程"></a>Swing中的线程</h3><h4 id="三种线程"><a href="#三种线程" class="headerlink" title="三种线程"></a>三种线程</h4><p>在Swing程序的开发中，需要建立3种线程的概念</p><ul><li>初始化线程<br>初始化线程用于创建各种容器，组件并显示他们，一旦创建并显示，初始化线程的任务就结束了。</li><li>事件调度线程<br>通过事件监听的学习，我们了解到Swing是一个事件驱动的模型，所有和事件相关的操作都放是放在事件调度线程 (Event Dispatch)中进行的。比如点击一个按钮，对应的ActionListener.actionPerformed 方法中的代码，就是在事件调度线程 Event Dispatch Thread中执行的。 </li><li>长耗时任务线程<br>有时候需要进行一些长时间的操作，比如访问数据库，文件复制，连接网络，统计文件总数等等。 这些操作就不适合放在事件调度线程中进行，因为占用时间久了，会让使用者感觉界面响应很卡顿。 为了保持界面响应的流畅性,所有长耗时任务都应该放在专门的 长耗时任务线程中进行</li></ul><h4 id="事件调度线程是单线程的"><a href="#事件调度线程是单线程的" class="headerlink" title="事件调度线程是单线程的"></a>事件调度线程是单线程的</h4><p>在开始讲解这3种线程之前， 要建立一个概念： 事件调度线程是单线程的。<br>为什么呢？<br>这是因为 Swing里面的各种组件类，比如JTextField,JButton 都不是线程安全的，这就意味着，如果有多个线程，那么同一个JTextField的setText方法，可能会被多个线程同时调用，这会导致同步问题以及错误数据的发生。<br>如果把组件类设计成为线程安全的，由于Swing事件调度的复杂性，就很有可能导致死锁的发生。<br>为了规避同步问题，以及降低整个Swing设计的复杂度，提高Swing的相应速度，Swing中的 事件调度线程被设计成为了单线程模式，即只有一个线程在负责事件的响应工作。</p><h4 id="初始化线程"><a href="#初始化线程" class="headerlink" title="初始化线程"></a>初始化线程</h4><p>如代码所示，同时我们在初始化一个图形界面的时候，都会直接在主方法的主线程里，直接调用如下代码来进行初始化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">TestFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是小程序这没有什么问题，如果是复杂的程序就有可能产生问题了。因为这里有两个线程在同时访问组件:</p><ol><li>主线程 2. 事件调度线程。</li></ol><p>如果是复杂的图形界面程序，就有可能出现这两个线程同时操作的情况，导致同步问题的产生。<br>为了规避这个问题的产生，创建和显示界面的工作，最好也交给事件调度线程，这样就保证了只有一个线程在访问这些组件</p><pre class="line-numbers language-java"><code class="language-java">SwingUtilities<span class="token punctuation">.</span><span class="token function">invokeLater</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">TestFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像这样，<code>new TestFrame().setVisible(true);</code>这段代码就是在事件调度线程中执行了。<br>还可以使用SwingUtilities.isEventDispatchThread()来判断当前线程是否是事件调度线程</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gui<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JButton<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>SwingUtilities<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGUI</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">TestFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      SwingUtilities.invokeLater(new Runnable() {</span><span class="token comment" spellcheck="true">//          public void run() {</span><span class="token comment" spellcheck="true">//              new TestFrame().setVisible(true);</span><span class="token comment" spellcheck="true">//          }</span><span class="token comment" spellcheck="true">//      });</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">TestFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"LoL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            JButton b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"一键秒对方基地挂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程是否是 事件调度线程: "</span> <span class="token operator">+</span> SwingUtilities<span class="token punctuation">.</span><span class="token function">isEventDispatchThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件调度线程"><a href="#事件调度线程" class="headerlink" title="事件调度线程"></a>事件调度线程</h4><p>以<a href="https://silencebutkeep.github.io/2019/08/12/java-tu-xiang-jie-mian/#toc-heading-4" target="_blank" rel="noopener">按钮监听</a>中的代码为例，ActionListener.actionPerformed 中的代码，就是事件调度线程执行的。<br>可以借助SwingUtilities.isEventDispatchThread() 确认，是事件调度线程在执行相应的代码</p><h4 id="长耗时任务线程"><a href="#长耗时任务线程" class="headerlink" title="长耗时任务线程"></a>长耗时任务线程</h4><p>有时候需要执行长耗时任务，比如数据库查询，文件复制，访问网络等等。<br>而这些操作一般都会在事件响应后发起，就会自动进入事件调度线程。 而事件调度线程又是单线程模式，其结果就会是在执行这些长耗时任务的时候，界面就无响应了。<br>为了解决这个问题，Swing提供了一个SwingWorker类来解决。 SwingWorker是一个抽象类，为了使用，必须实现方法 doInBackground，在doInBackground中，就可以编写我们的任务，然后执行SwingWorker的execute方法，放在专门的工作线程中去运行。</p><pre class="line-numbers language-java"><code class="language-java">SwingWorker worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SwingWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Object <span class="token function">doInBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//长耗时任务</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwingWorker又是如何工作的呢？<br>当SwingWorker执行execute的时候，调用默认有10根线程的线程池，执行doInBackground中的代码，通过如下代码，可以获知执行当前SwingWorder的线程名称</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行这个SwingWorder的线程是："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"在事件调度线程中执行长耗时任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"使用SwingWorker执行长耗时任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"任务执行结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>b1<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        l<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"开始执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        l<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"任务执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SwingWorker<span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token operator">></span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SwingWorker</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> Void <span class="token function">doInBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行这个SwingWorder的线程是："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"开始执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                l<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"任务执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        worker<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 图形界面(上)</title>
      <link href="/2019/08/12/java-tu-xiang-jie-mian/"/>
      <url>/2019/08/12/java-tu-xiang-jie-mian/</url>
      
        <content type="html"><![CDATA[<h1 id="图形界面-上"><a href="#图形界面-上" class="headerlink" title="图形界面(上)"></a>图形界面(上)</h1><h3 id="初识Swing"><a href="#初识Swing" class="headerlink" title="初识Swing"></a>初识Swing</h3><p>GUI-Graphic User Interface 图形用户界面</p><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><p>JFrame是GUI中的容器<br>JButton是最常见的组件- 按钮<br><font color="rde">注意：f.setVisible(true); 会对所有的组件进行渲染，所以一定要放在最后面</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gui<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JButton<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGUI</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 主窗体</span>        JFrame f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主窗体设置大小</span>        f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主窗体设置位置</span>        f<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主窗体中的组件设置为绝对定位</span>        f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按钮组件</span>        JButton b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按键的文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 同时设置组件的大小和位置</span>        b<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把按钮加入到主窗体中</span>        f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭窗体的时候，退出程序</span>        f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 让窗体变得可见</span>        f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><h4 id="按钮监听"><a href="#按钮监听" class="headerlink" title="按钮监听"></a>按钮监听</h4><p>创建一个匿名类实现ActionListener接口，当按钮被点击时，actionPerformed方法就会被调用</p><pre class="line-numbers language-java"><code class="language-java">JButton b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"隐藏图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给按钮 增加 监听</span>b<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当按钮被点击时，就会触发 ActionEvent事件</span>    <span class="token comment" spellcheck="true">// actionPerformed 方法就会被执行</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//被点击后就执行此处代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="键盘监听"><a href="#键盘监听" class="headerlink" title="键盘监听"></a>键盘监听</h4><p>键盘监听器： KeyListener</p><ul><li>keyPressed 代表 键被按下</li><li>keyReleased 代表 键被弹起</li><li>keyTyped 代表 一个按下弹起的组合动作</li><li>KeyEvent.getKeyCode() 可以获取当前点下了哪个键</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ImageIcon i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/shana.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 增加键盘监听</span>f<span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 键被弹起</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyReleased</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 39代表按下了 “右键”</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">39</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 图片向右移动 （y坐标不变，x坐标增加）</span>            l<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//键被按下</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 一个按下弹起的组合动作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="鼠标监听"><a href="#鼠标监听" class="headerlink" title="鼠标监听"></a>鼠标监听</h4><p>MouseListener 鼠标监听器</p><ul><li>mouseReleased 鼠标释放</li><li>mousePressed 鼠标按下</li><li>mouseExited 鼠标退出</li><li>mouseEntered 鼠标进入</li><li>mouseClicked 鼠标点击</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 释放鼠标</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 按下鼠标</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 鼠标退出</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 鼠标进入</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 按下释放组合动作为点击鼠标</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h4><p>MouseAdapter 鼠标监听适配器<br>一般说来在写监听器的时候，会实现MouseListener。<br>但是MouseListener里面有很多方法实际上都没有用到，比如mouseReleased ，mousePressed，mouseExited等等。<br>这个时候就可以使用 鼠标监听适配器，MouseAdapter 只需要重写必要的方法即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// MouseAdapter 适配器，只需要重写用到的方法，没有用到的就不用写了</span>l<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 只有mouseEntered用到了</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>java的图形界面中，容器是用来存放 按钮，输入框等组件的。窗体型容器有两个，一个是JFrame,一个是JDialog</p><h4 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h4><p>JFrame是最常用的窗体型容器，默认情况下，在右上角有最大化最小化按钮</p><h4 id="JDialog"><a href="#JDialog" class="headerlink" title="JDialog"></a>JDialog</h4><p>JDialog也是窗体型容器，右上角没有最大和最小化按钮</p><h4 id="模态JDialog"><a href="#模态JDialog" class="headerlink" title="模态JDialog"></a>模态JDialog</h4><p>当一个对话框被设置为模态的时候，其背后的父窗体，是不能被激活的，除非该对话框被关闭</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gui<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JButton<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JDialog<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGUI</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JFrame f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"外部窗体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据外部窗体实例化JDialog</span>        JDialog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置为模态</span>        d<span class="token punctuation">.</span><span class="token function">setModal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"模态的对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"一键秒对方基地挂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="窗体大小不可变化"><a href="#窗体大小不可变化" class="headerlink" title="窗体大小不可变化"></a>窗体大小不可变化</h4><p>通过调用方法 setResizable(false); 做到窗体大小不可变化</p><h3 id="布局器"><a href="#布局器" class="headerlink" title="布局器"></a>布局器</h3><p>布局器是用在容器上的。 用来决定容器上的组件摆放的位置和大小</p><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p>绝对定位就是指不使用布局器，组件的位置和大小需要单独指定</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置布局器为null，即进行绝对定位，容器上的组件都需要指定位置和大小</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定位置和大小</span>b1<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b3<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 没有指定位置和大小，不会出现在容器上</span>JButton b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h4><p>设置布局器为FlowLayout,顺序布局器,容器上的组件水平摆放,加入到容器即可，无需单独指定大小和位置</p><pre class="line-numbers language-java"><code class="language-java"> JFrame f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"LoL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置布局器为FlowLayerout</span><span class="token comment" spellcheck="true">// 容器上的组件水平摆放</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加入到容器即可，无需单独指定大小和位置</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BorderLayout"><a href="#BorderLayout" class="headerlink" title="BorderLayout"></a>BorderLayout</h4><p>设置布局器为BorderLayout<br>容器上的组件按照上北 下南 左西 右东 中的顺序摆放</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置布局器为BorderLayerout</span><span class="token comment" spellcheck="true">// 容器上的组件按照上北下南左西右东中的顺序摆放</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"洪七"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"段智兴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"欧阳锋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"黄药师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"周伯通"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加入到容器的时候，需要指定位置</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b4<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b5<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h4><p>GridLayout，即网格布局器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置布局器为GridLayerout，即网格布局器</span><span class="token comment" spellcheck="true">// 该GridLayerout的构造方法表示该网格是2行3列</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"洪七"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"段智兴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"欧阳锋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"黄药师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"周伯通"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="setPreferredSize"><a href="#setPreferredSize" class="headerlink" title="setPreferredSize"></a>setPreferredSize</h4><p>即便 使用 布局器 ，也可以 通过setPreferredSize，向布局器建议该组件显示的大小.<br><fontt color="red">注 只对部分布局器起作用，比如FlowLayout可以起作用。 比如GridLayout就不起作用，因为网格布局器必须对齐</fontt></p><pre class="line-numbers language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 即便 使用 布局器 ，也可以 通过setPreferredSize，向布局器建议该组件显示的大小</span>b3<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CardLayout"><a href="#CardLayout" class="headerlink" title="CardLayout"></a>CardLayout</h4><p>CardLayerout 布局器 很像TabbedPanel ，在本例里面上面是一个下拉框，下面是一个CardLayerout 的JPanel<br>这个JPanel里有两个面板，可以通过CardLayerout方便的切换</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>JAVA的图形界面下有两组控件，一组是awt,一组是swing。一般都是使用swing</p><table><thead><tr><th>关键字</th><th>简介</th></tr></thead><tbody><tr><td>JLabel</td><td>标签</td></tr><tr><td>setIcon</td><td>使用JLabel显示图片</td></tr><tr><td>JButton</td><td>按钮</td></tr><tr><td>JCheckBox</td><td>复选框</td></tr><tr><td>JRadioButton</td><td>单选框</td></tr><tr><td>ButtonGroup</td><td>按钮组</td></tr><tr><td>JComboBox</td><td>下拉框</td></tr><tr><td>JOptionPane</td><td>对话框</td></tr><tr><td>JTextFile</td><td>文本框</td></tr><tr><td>JPasswordField</td><td>密码框</td></tr><tr><td>JTextArea</td><td>文本域</td></tr><tr><td>JProgressBar</td><td>进度条</td></tr><tr><td>JFileChooser</td><td>文本选择器</td></tr></tbody></table><h4 id="标签-Label"><a href="#标签-Label" class="headerlink" title="标签(Label)"></a>标签(Label)</h4><p>Label用于显示文字</p><pre class="line-numbers language-java"><code class="language-java">JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"LOL文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文字颜色</span>l<span class="token punctuation">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用JLabel显示图片-ImageIcon"><a href="#使用JLabel显示图片-ImageIcon" class="headerlink" title="使用JLabel显示图片(ImageIcon)"></a>使用JLabel显示图片(ImageIcon)</h4><p>java GUI 显示图片是通过在label上设置图标实现的</p><pre class="line-numbers language-java"><code class="language-java">JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据图片创建ImageIcon对象</span>ImageIcon i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/shana.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置ImageIcon</span>l<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//label的大小设置为ImageIcon,否则显示不完整</span>l<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按钮-JButton"><a href="#按钮-JButton" class="headerlink" title="按钮(JButton)"></a>按钮(JButton)</h4><p>JButton按钮</p><pre class="line-numbers language-java"><code class="language-java">JButton b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"一键秒对方基地挂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="复选框-JCheckBox"><a href="#复选框-JCheckBox" class="headerlink" title="复选框(JCheckBox)"></a>复选框(JCheckBox)</h4><p>JCheckBox 复选框，使用isSelected来获取是否选中了</p><pre class="line-numbers language-java"><code class="language-java">JCheckBox bCheckBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"物理英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置 为 默认被选中</span>bCheckBox<span class="token punctuation">.</span><span class="token function">setSelected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bCheckBox<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JCheckBox bCheckBox2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"魔法 英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bCheckBox2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断 是否 被 选中</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bCheckBox2<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单选框-JRadioButton"><a href="#单选框-JRadioButton" class="headerlink" title="单选框(JRadioButton)"></a>单选框(JRadioButton)</h4><p>JRadioButton 单选框，使用isSelected来获取是否选中了<br>在这个例子里，两个单选框可以被同时选中，为了实现只能选中一个，还需要用到ButtonGroup</p><pre class="line-numbers language-java"><code class="language-java">JRadioButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"物理英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置 为 默认被选中</span>b1<span class="token punctuation">.</span><span class="token function">setSelected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b1<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JRadioButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"魔法 英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按钮组-ButtonGroup"><a href="#按钮组-ButtonGroup" class="headerlink" title="按钮组(ButtonGroup)"></a>按钮组(ButtonGroup)</h4><p>ButtonGroup 对按钮进行分组，把不同的按钮，放在同一个分组里 ，同一时间，只有一个 按钮 会被选中</p><pre class="line-numbers language-java"><code class="language-java">JRadioButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"物理英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b1<span class="token punctuation">.</span><span class="token function">setSelected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b1<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JRadioButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"魔法 英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 按钮分组</span>ButtonGroup bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把b1，b2放在 同一个 按钮分组对象里 ，这样同一时间，只有一个 按钮 会被选中</span>bg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>bg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="下拉框-JComboBox"><a href="#下拉框-JComboBox" class="headerlink" title="下拉框(JComboBox)"></a>下拉框(JComboBox)</h4><p>JComboBox 下拉框<br>使用getSelectedItem来获取被选中项<br>使用setSelectedItem() 来指定要选中项</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下拉框出现的条目</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"卡特琳娜"</span><span class="token punctuation">,</span> <span class="token string">"库奇"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>JComboBox cb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span>heros<span class="token punctuation">)</span><span class="token punctuation">;</span>cb<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对话框-JOptionPane"><a href="#对话框-JOptionPane" class="headerlink" title="对话框(JOptionPane)"></a>对话框(JOptionPane)</h4><p>JOptionPane 用于弹出对话框<br>JOptionPane.showConfirmDialog(f, “是否 使用外挂 ？”);<br>表示询问，第一个参数是该对话框以哪个组件对齐<br>JOptionPane.showInputDialog(f, “请输入yes，表明使用外挂后果自负”);<br>接受用户的输入<br>JOptionPane.showMessageDialog(f, “你使用外挂被抓住！ 罚拣肥皂3次！”);<br>显示消息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> option <span class="token operator">=</span> JOptionPane<span class="token punctuation">.</span><span class="token function">showConfirmDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"是否 使用外挂 ？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>JOptionPane<span class="token punctuation">.</span>OK_OPTION <span class="token operator">==</span> option<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String answer <span class="token operator">=</span> JOptionPane<span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"请输入yes，表明使用外挂后果自负"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">)</span>        JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"你使用外挂被抓住！ 罚拣肥皂3次！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文本框-JtextField"><a href="#文本框-JtextField" class="headerlink" title="文本框(JtextField)"></a>文本框(JtextField)</h4><p>JTextField 输入框<br>setText 设置文本<br>getText 获取文本<br>JTextField 是单行文本框，如果要输入多行数据，请使用JTextArea<br><font color="orange">tfPassword.grabFocus(); 表示让密码输入框获取焦点</font></p><pre class="line-numbers language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JLabel lName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"账号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入框</span>JTextField tfName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tfName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"请输入账号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tfName<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JLabel lPassword <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入框</span>JTextField tfPassword <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tfPassword<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tfPassword<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lName<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tfName<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tfPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tfPassword<span class="token punctuation">.</span><span class="token function">grabFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="密码框-JPasswordField"><a href="#密码框-JPasswordField" class="headerlink" title="密码框(JPasswordField)"></a>密码框(JPasswordField)</h4><p>JPasswordField 密码框<br>与文本框不同，获取密码框里的内容，推荐使用getPassword，该方法会返回一个字符数组，而非字符串</p><h4 id="文本域-JTextArea"><a href="#文本域-JTextArea" class="headerlink" title="文本域(JTextArea)"></a>文本域(JTextArea)</h4><p>JTextArea：文本域。<br>和文本框JTextField不同的是，文本域可以输入多行数据<br>如果要给文本域初始文本，通过\n来实现换行效果<br>JTextArea通常会用到append来进行数据追加<br>如果文本太长，会跑出去，可以通过setLineWrap(true) 来做到自动换行</p><pre class="line-numbers language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"文本域："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JTextArea ta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ta<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//\n换行符</span>ta<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"抢人头！\n抢你妹啊抢！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//追加数据</span>ta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"我去送了了了了了了了了了了了了了了了了了了了了了了了了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置自动换行</span>ta<span class="token punctuation">.</span><span class="token function">setLineWrap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ta<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进度条-JProgressBar"><a href="#进度条-JProgressBar" class="headerlink" title="进度条(JProgressBar)"></a>进度条(JProgressBar)</h4><pre class="line-numbers language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JProgressBar pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进度条最大100</span>pb<span class="token punctuation">.</span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前进度是50</span>pb<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示当前进度</span>pb<span class="token punctuation">.</span><span class="token function">setStringPainted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件选择器-JFileChooser"><a href="#文件选择器-JFileChooser" class="headerlink" title="文件选择器(JFileChooser)"></a>文件选择器(JFileChooser)</h4><p>JFileChooser 表示文件选择器<br>使用FileFilter用于仅选择.txt文件：</p><pre class="line-numbers language-java"><code class="language-java">fc<span class="token punctuation">.</span><span class="token function">setFileFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">".txt"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fc.showOpenDialog();</code>用于打开文件<br><code>fc.showSaveDialog();</code>用于保存文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gui<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>FlowLayout<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JButton<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFileChooser<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JOptionPane<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>filechooser<span class="token punctuation">.</span>FileFilter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGUI</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JFrame f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"LOL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JFileChooser fc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fc<span class="token punctuation">.</span><span class="token function">setFileFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                <span class="token keyword">return</span> <span class="token string">".txt"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton bOpen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton bSave <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"保存文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bOpen<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bSave<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bOpen<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">int</span> returnVal <span class="token operator">=</span>  fc<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                 File file <span class="token operator">=</span> fc<span class="token punctuation">.</span><span class="token function">getSelectedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>returnVal <span class="token operator">==</span> JFileChooser<span class="token punctuation">.</span>APPROVE_OPTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"计划打开文件:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bSave<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> returnVal <span class="token operator">=</span>  fc<span class="token punctuation">.</span><span class="token function">showSaveDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                File file <span class="token operator">=</span> fc<span class="token punctuation">.</span><span class="token function">getSelectedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>returnVal <span class="token operator">==</span> JFileChooser<span class="token punctuation">.</span>APPROVE_OPTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"计划保存到文件:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 目标位置文件选择器</span>JFileChooser jcs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jcs1<span class="token punctuation">.</span><span class="token function">setFileSelectionMode</span><span class="token punctuation">(</span>JFileChooser<span class="token punctuation">.</span>DIRECTORIES_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>JButton jbChoose1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"选择位置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jbChoose1<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> jcs1<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> JFileChooser<span class="token punctuation">.</span>APPROVE_OPTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>            destPath <span class="token operator">=</span> jcs1<span class="token punctuation">.</span><span class="token function">getSelectedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>destPath <span class="token operator">!=</span> null<span class="token punctuation">)</span>                jf2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>destStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h3><h4 id="基本面板"><a href="#基本面板" class="headerlink" title="基本面板"></a>基本面板</h4><p>JPanel即为基本面板<br>面板和JFrame一样都是容器，不过面板一般用来充当中间容器，把组件放在面板上，然后再把面板放在窗体上。<br>一旦移动一个面板，其上面的组件，就会全部统一跟着移动，采用这种方式，便于进行整体界面的设计</p><h4 id="ContentPane"><a href="#ContentPane" class="headerlink" title="ContentPane"></a>ContentPane</h4><p>JFrame上有一层面板，叫做ContentPane<br>平时通过f.add()向JFrame增加组件，其实是向JFrame上的 ContentPane加东西</p><pre class="line-numbers language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// JFrame上有一层面板，叫做ContentPane</span><span class="token comment" spellcheck="true">// 平时通过f.add()向JFrame增加组件，其实是向JFrame上的 ContentPane加东西</span><span class="token comment" spellcheck="true">// f.add等同于f.getContentPane().add(b);</span>f<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// b.getParent()获取按钮b所处于的容器</span><span class="token comment" spellcheck="true">// 打印出来可以看到，实际上是ContentPane而非JFrame</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SplitPanel"><a href="#SplitPanel" class="headerlink" title="SplitPanel"></a>SplitPanel</h4><p>创建一个水平JSplitPane，左边是pLeft,右边是pRight</p><pre class="line-numbers language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>JPanel pLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pLeft<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pLeft<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>pLeft<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"盖伦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"提莫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"安妮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pLeft<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>pLeft<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>pLeft<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>JPanel pRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pRight<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span>pRight<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span>pRight<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b6<span class="token punctuation">)</span><span class="token punctuation">;</span>pRight<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>pRight<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个水平JSplitPane，左边是p1,右边是p2</span>JSplitPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSplitPane</span><span class="token punctuation">(</span>JSplitPane<span class="token punctuation">.</span>HORIZONTAL_SPLIT<span class="token punctuation">,</span> pLeft<span class="token punctuation">,</span> pRight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置分割条的位置</span>sp<span class="token punctuation">.</span><span class="token function">setDividerLocation</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把sp当作ContentPane</span>f<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">在面板的要如此加进去<span class="token comment" spellcheck="true">// 把sp当作ContentPane</span>f<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="JScrollPanel-滚动条"><a href="#JScrollPanel-滚动条" class="headerlink" title="JScrollPanel(滚动条)"></a>JScrollPanel(滚动条)</h4><p>使用带滚动条的面板有两种方式</p><ol><li>在创建JScrollPane，把组件作为参数传进去<pre class="line-numbers language-java"><code class="language-java">JScrollPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>ta<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>希望带滚动条的面板显示其他组件的时候，调用setViewportView<pre class="line-numbers language-java"><code class="language-java">sp<span class="token punctuation">.</span><span class="token function">setViewportView</span><span class="token punctuation">(</span>ta<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="TabbedPanel"><a href="#TabbedPanel" class="headerlink" title="TabbedPanel"></a>TabbedPanel</h4><pre class="line-numbers language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>JPanel p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>JPanel p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JButton b6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"英雄6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b6<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JTabbedPane tp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTabbedPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>tp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置tab的标题</span>tp<span class="token punctuation">.</span><span class="token function">setTitleAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"红色tab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tp<span class="token punctuation">.</span><span class="token function">setTitleAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"蓝色tab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ImageIcon i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"e:/project/j2se/j.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tp<span class="token punctuation">.</span><span class="token function">setIconAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>tp<span class="token punctuation">.</span><span class="token function">setIconAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CardLayerout"><a href="#CardLayerout" class="headerlink" title="CardLayerout"></a>CardLayerout</h4><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java JDBC</title>
      <link href="/2019/08/12/java-jdbc/"/>
      <url>/2019/08/12/java-jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h3 id="初识JDBC"><a href="#初识JDBC" class="headerlink" title="初识JDBC"></a>初识JDBC</h3><h4 id="为项目导入mysql-jdbc的jar包"><a href="#为项目导入mysql-jdbc的jar包" class="headerlink" title="为项目导入mysql-jdbc的jar包"></a>为项目导入mysql-jdbc的jar包</h4><p>访问MySQL数据库需要用到第三方的类，这些第三方的类，都被压缩在一个叫做Jar的文件里。<br>为了代码能够使用第三方的类，需要为项目导入mysql的专用Jar包。<br>该包mysql-connector-java-5.0.8-bin.jar可以在右边下载<br>通常都会把项目用到的jar包统一放在项目的lib目录下，在本例就会放在<br>E:\project\j2se\lib 这个位置<br>然后在eclipse中导入这个jar包<br>导包步骤： 右键project-&gt;property-&gt;java build path-&gt;libaries-&gt;add external jars</p><h4 id="初始化驱动"><a href="#初始化驱动" class="headerlink" title="初始化驱动"></a>初始化驱动</h4><p>通过Class.forName(“com.mysql.jdbc.Driver”);<br>初始化驱动类com.mysql.jdbc.Driver<br>就在 mysql-connector-java-5.0.8-bin.jar中<br>如果忘记了第一个步骤的导包，就会抛出ClassNotFoundException<br>Class.forName是把这个类加载到JVM中，加载的时候，就会执行其中的静态初始化块，完成驱动的初始化的相关工作。</p><h4 id="建立与数据库的连接"><a href="#建立与数据库的连接" class="headerlink" title="建立与数据库的连接"></a>建立与数据库的连接</h4><p>建立与数据库的Connection连接<br>这里需要提供：<br>数据库所处于的ip:127.0.0.1 (本机)<br>数据库的端口号： 3306 （mysql专用端口号）<br>数据库名称 socket<br>编码方式 UTF-8<br>账号 root<br>密码 admin<br><font color="red">注： 这一步要成功执行，必须建立在mysql中有数据库how2java的基础上，如果没有，点击创建数据库查看如何进行数据库的创建。</font></p><h4 id="创建Statement"><a href="#创建Statement" class="headerlink" title="创建Statement"></a>创建Statement</h4><p>Statement是用于执行SQL语句的，比如增加，删除</p><pre class="line-numbers language-java"><code class="language-java">Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h4><p>s.execute执行sql语句<br>执行成功后，用mysql-front进行查看，明确插入成功<br>执行SQL语句之前要确保数据库how2java中有表hero的存在，如果没有，需要事先创建表</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 准备sql语句</span><span class="token comment" spellcheck="true">// 注意： 字符串要用单引号'</span>String sql <span class="token operator">=</span> <span class="token string">"insert into hero values(null,"</span><span class="token operator">+</span><span class="token string">"'提莫'"</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token number">313.0f</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token number">50</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h4><p>数据库的连接是有限资源，相关操作结束后，养成关闭数据库的好习惯<br>先关闭Statement<br>后关闭Connection</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 数据库的连接时有限资源，相关操作结束后，养成关闭数据库的好习惯</span><span class="token comment" spellcheck="true">// 先关闭Statement</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 后关闭Connection</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null<span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用try-with-resource的方式自动关闭连接"><a href="#使用try-with-resource的方式自动关闭连接" class="headerlink" title="使用try-with-resource的方式自动关闭连接"></a>使用try-with-resource的方式自动关闭连接</h4><p>如果觉得上一步的关闭连接的方式很麻烦，可以参考<a href="https://silencebutkeep.github.io/2019/08/08/java-io2/#toc-heading-1" target="_blank" rel="noopener">关闭流</a> 的方式，使用try-with-resource的方式自动关闭连接，因为Connection和Statement都实现了AutoCloseable接口    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>    Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增-删-改"><a href="#增-删-改" class="headerlink" title="增,删,改"></a>增,删,改</h3><p>CRUD是最常见的数据库操作，即增删改查 </p><ul><li>C 增加(Create) </li><li>R 读取查询(Retrieve) </li><li>U 更新(Update) </li><li>D 删除(Delete)<br>在JDBC中增加，删除，修改的操作都很类似，只是传递不同的SQL语句就行了。     </li></ul><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"insert into hero values(null,"</span> <span class="token operator">+</span> <span class="token string">"'提莫'"</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token number">313.0f</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除和增加很类似，只不过是执行的SQL语句不一样罢了</p><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"delete from hero where id = 5"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>修改也一样，执行另一条SQL语句就可以了</p><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"update hero set name = 'name 5' where id = 3"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>执行查询SQL语句</p><h4 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h4><p>executeQuery 执行SQL查询语句<br><font color="red">注意： 在取第二列的数据的时候，用的是rs.get(2) ，而不是get(1). 这个是整个Java自带的api里唯二的地方，使用基1的，即2就代表第二个。</font><br>另一个地方是在PreparedStatement这里</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDBC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span>                <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from hero"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行查询语句，并把结果集返回给ResultSet</span>            ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以使用字段名</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以使用字段的顺序</span>                <span class="token keyword">float</span> hp <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"hp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> damage <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t%s\t%f\t%d%n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 不一定要在这里关闭ReultSet，因为Statement关闭的时候，会自动关闭ResultSet</span>            <span class="token comment" spellcheck="true">// rs.close();</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SQL语句判断账号密码是否正确"><a href="#SQL语句判断账号密码是否正确" class="headerlink" title="SQL语句判断账号密码是否正确"></a>SQL语句判断账号密码是否正确</h4><ol><li>创建一个用户表，有字段name,password</li><li>插入一条数据<pre class="line-numbers language-mysql"><code class="language-mysql">insert into user values(null,'dashen','thisispassword');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>SQL语句判断账号密码是否正确<br>判断账号密码的正确方式是根据账号和密码到表中去找数据，如果有数据，就表明密码正确了，如果没数据，就表明密码错误。<br>不恰当的方式 是把uers表的数据全部查到内存中，挨个进行比较。 如果users表里有100万条数据呢？ 内存都不够用的。</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">MySql建表语句：CREATE TABLE user (  id int(11) AUTO_INCREMENT,  name varchar(30) ,  password varchar(30),  PRIMARY KEY (id)) ;insert into user values(null,'dashen','thisispassword');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span>        <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"dashen"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//正确的密码是：thisispassword</span>    String password <span class="token operator">=</span> <span class="token string">"thisispassword1"</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from user where name = '"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"' and password = '"</span> <span class="token operator">+</span> password<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行查询语句，并把结果集返回给ResultSet</span>    ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账号密码正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账号密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取总数"><a href="#获取总数" class="headerlink" title="获取总数"></a>获取总数</h4><p>执行的sql语句为</p><pre class="line-numbers language-java"><code class="language-java">select <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> from hero<span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后通过ResultSet获取出来</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span>        <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"select count(*) from hero"</span><span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        total <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表Hero中总共有:"</span> <span class="token operator">+</span> total<span class="token operator">+</span><span class="token string">" 条数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预编译Statement"><a href="#预编译Statement" class="headerlink" title="预编译Statement"></a>预编译Statement</h3><h4 id="使用PreparedStatement"><a href="#使用PreparedStatement" class="headerlink" title="使用PreparedStatement"></a>使用PreparedStatement</h4><p>和 Statement一样，PreparedStatement也是用来执行sql语句的<br>与创建Statement不同的是，需要根据sql语句创建PreparedStatement<br>除此之外，还能够通过设置参数，指定相应的值，而不是Statement那样使用字符串拼接<br><font color="red">注： 这是JAVA里唯二的基1的地方，另一个是查询语句中的ResultSet也是基1的。</font></p><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"insert into hero values(null,?,?,?)"</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据sql语句创建PreparedStatement</span>    PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置参数</span>    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"提莫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">313.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PreparedStatement的优点"><a href="#PreparedStatement的优点" class="headerlink" title="PreparedStatement的优点"></a>PreparedStatement的优点</h4><h5 id="1-参数设置"><a href="#1-参数设置" class="headerlink" title="1-参数设置"></a>1-参数设置</h5><p>Statement 需要进行字符串拼接，可读性和维护性比较差</p><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"insert into hero values(null,"</span><span class="token operator">+</span><span class="token string">"'提莫'"</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token number">313.0f</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token number">50</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PreparedStatement 使用参数设置，可读性好，不易犯错</p><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"insert into hero values(null,?,?,?)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-性能表现"><a href="#2-性能表现" class="headerlink" title="2-性能表现"></a>2-性能表现</h5><p>PreparedStatement有预编译机制，性能比Statement更快</p><h5 id="3-防止SQL注入式攻击"><a href="#3-防止SQL注入式攻击" class="headerlink" title="3-防止SQL注入式攻击"></a>3-防止SQL注入式攻击</h5><p>假设name是用户提交来的数据</p><pre class="line-numbers language-java"><code class="language-java">String name <span class="token operator">=</span> <span class="token string">"'盖伦' OR 1=1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用Statement就需要进行字符串拼接<br>拼接出来的语句是：</p><pre class="line-numbers language-java"><code class="language-java">select <span class="token operator">*</span> from hero where name <span class="token operator">=</span> <span class="token string">'盖伦'</span> OR <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为有OR 1=1，这是恒成立的<br>那么就会把所有的英雄都查出来，而不只是盖伦<br>如果Hero表里的数据是海量的，比如几百万条，把这个表里的数据全部查出来<br>会让数据库负载变高，CPU100%，内存消耗光，响应变得极其缓慢<br>而PreparedStatement使用的是参数设置，就不会有这个问题</p><h3 id="execute-executeUpdate"><a href="#execute-executeUpdate" class="headerlink" title="execute executeUpdate"></a>execute executeUpdate</h3><p>execute与executeUpdate的区别</p><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><p>execute与executeUpdate的相同点：都可以执行增加，删除，修改</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sqlInsert <span class="token operator">=</span> <span class="token string">"insert into Hero values (null,'盖伦',616,100)"</span><span class="token punctuation">;</span>    String sqlDelete <span class="token operator">=</span> <span class="token string">"delete from Hero where id = 100"</span><span class="token punctuation">;</span>    String sqlUpdate <span class="token operator">=</span> <span class="token string">"update Hero set hp = 300 where id = 100"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 相同点：都可以执行增加，删除，修改</span>    s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlInsert<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sqlInsert<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sqlDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sqlUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>不同1：</p><ul><li>execute可以执行查询语句</li><li>然后通过getResultSet，把结果集取出来</li><li>executeUpdate不能执行查询语句<br>不同2:</li><li>execute返回boolean类型，true表示执行的是查询语句，false表示执行的是insert,delete,update等等</li><li>executeUpdate返回的是int，表示有多少条数据受到了影响</li></ul><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"select * from hero limit "</span> <span class="token operator">+</span>start <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行查询语句，并把结果集返回给ResultSet</span>ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作rs的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码可以用execute实现</p><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"select * from hero limit "</span> <span class="token operator">+</span> start <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> count<span class="token punctuation">;</span><span class="token keyword">boolean</span> isQuery <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行查询语句，并把结果集返回给ResultSet</span>    ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//操作rs的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="获取自增长id"><a href="#获取自增长id" class="headerlink" title="获取自增长id"></a>获取自增长id</h4><p>在Statement通过execute或者executeUpdate执行完插入语句后，MySQL会为新插入的数据分配一个自增长id，<br>(前提是这个表的id设置为了自增长,在Mysql创建表的时候，AUTO_INCREMENT就表示自增长)</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE hero (  id int(11) AUTO_INCREMENT,  ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是无论是execute还是executeUpdate都不会返回这个自增长id是多少。需要通过Statement的getGeneratedKeys获取该id<br><font color="red">注： 第20行的代码，后面加了个Statement.RETURN_GENERATED_KEYS参数，以确保会返回自增长ID。 通常情况下不需要加这个，有的时候需要加，所以先加上，保险一些</font></p><pre class="line-numbers language-java"><code class="language-java">PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> Statement<span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"insert into hero values(null,?,?,?)"</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> Statement<span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"盖伦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">616</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行插入语句</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在执行完插入语句后，MySQL会为新插入的数据分配一个自增长id</span>    <span class="token comment" spellcheck="true">// JDBC通过getGeneratedKeys获取该id</span>    ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取表的元数据"><a href="#获取表的元数据" class="headerlink" title="获取表的元数据"></a>获取表的元数据</h4><p>元数据概念：<br>和数据库服务器相关的数据，比如数据库版本，有哪些表，表有哪些字段，字段类型是什么等等。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 查看数据库层面的元数据</span>    <span class="token comment" spellcheck="true">// 即数据库服务器版本，驱动版本，都有哪些数据库等等</span>    DatabaseMetaData dbmd <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取数据库服务器产品名称</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库产品名称:\t"</span><span class="token operator">+</span>dbmd<span class="token punctuation">.</span><span class="token function">getDatabaseProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取数据库服务器产品版本号</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库产品版本:\t"</span><span class="token operator">+</span>dbmd<span class="token punctuation">.</span><span class="token function">getDatabaseProductVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取数据库服务器用作类别和表名之间的分隔符 如test.user</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库和表分隔符:\t"</span><span class="token operator">+</span>dbmd<span class="token punctuation">.</span><span class="token function">getCatalogSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取驱动版本</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"驱动版本:\t"</span><span class="token operator">+</span>dbmd<span class="token punctuation">.</span><span class="token function">getDriverVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可用的数据库列表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取数据库名称</span>    ResultSet rs <span class="token operator">=</span> dbmd<span class="token punctuation">.</span><span class="token function">getCatalogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库名称:\t"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h4><p>在事务中的多个操作，要么都成功，要么都失败</p><ul><li>通过 c.setAutoCommit(false);关闭自动提交</li><li>使用 c.commit();进行手动提交<br>在22行-35行之间的数据库操作，就处于同一个事务当中，要么都成功，要么都失败<br>所以，虽然第一条SQL语句是可以执行的，但是第二条SQL语句有错误，其结果就是两条SQL语句都没有被提交。 除非两条SQL语句都是正确的。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDBC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 有事务的前提下</span>            <span class="token comment" spellcheck="true">// 在事务中的多个操作，要么都成功，要么都失败</span>            c<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 加血的SQL</span>            String sql1 <span class="token operator">=</span> <span class="token string">"update hero set hp = hp +1 where id = 22"</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 减血的SQL</span>            <span class="token comment" spellcheck="true">// 不小心写错写成了 updata(而非update)</span>            String sql2 <span class="token operator">=</span> <span class="token string">"updata hero set hp = hp -1 where id = 22"</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 手动提交</span>            c<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="green">当c.setAutoCommit(false);时，事务是不会提交的,只有执行使用 c.commit(); 才会提交进行</font></p><h4 id="MYSQL-表的类型必须是INNODB才支持事务"><a href="#MYSQL-表的类型必须是INNODB才支持事务" class="headerlink" title="MYSQL 表的类型必须是INNODB才支持事务"></a>MYSQL 表的类型必须是INNODB才支持事务</h4><p>在Mysql中，只有当表的类型是INNODB的时候，才支持事务，所以需要把表的类型设置为INNODB,否则无法观察到事务.<br>修改表的类型为INNODB的SQL：<code>alter table hero ENGINE  = innodb;</code><br>查看表的类型的SQL: <code>show table status from how2java;</code><br><font color="red">不过有个前提，就是当前的MYSQL服务器本身要支持INNODB,如果不支持，请先开启</font></p><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM=Object Relationship Database Mapping<br>对象和关系数据库的映射,简单说，一个对象，对应数据库里的一条记录</p><h4 id="根据id返回一个Hero对象"><a href="#根据id返回一个Hero对象" class="headerlink" title="根据id返回一个Hero对象"></a>根据id返回一个Hero对象</h4><p>提供方法get(int id),返回一个Hero对象</p><p>Hero.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> charactor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加id属性</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> damage<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDBC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Hero <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero hero <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from hero where id = "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 因为id是唯一的，ResultSet最多只能有一条记录</span>            <span class="token comment" spellcheck="true">// 所以使用if代替while</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> hp <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"hp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> damage <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> hero<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero h <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><p>DAO=DataAccess Object<br>数据访问对象<br>实际上就是运用了<a href="http://how2j.cn/k/jdbc/jdbc-orm/391.html#step2641" target="_blank" rel="noopener">练习-ORM</a>中的思路，把数据库相关的操作都封装在这个类里面，其他地方看不到JDBC的代码</p><h4 id="DAO接口"><a href="#DAO接口" class="headerlink" title="DAO接口"></a>DAO接口</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DAO</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Hero hero<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Hero hero<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取</span>    <span class="token keyword">public</span> Hero <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//分页查询</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HeroDAO"><a href="#HeroDAO" class="headerlink" title="HeroDAO"></a>HeroDAO</h4><p>设计类HeroDAO，实现接口DAO<br>这个HeroDAO和答案-ORM很接近，做了几个改进：</p><ol><li>把驱动的初始化放在了构造方法HeroDAO里,因为驱动初始化只需要执行一次，所以放在这里更合适，其他方法里也不需要写了，代码更简洁</li><li>提供了一个getConnection方法返回连接,所有的数据库操作都需要事先拿到一个数据库连接Connection，以前的做法每个方法里都会写一个，如果要改动密码，那么每个地方都需要修改,<br>通过这种方式，只需要修改这一个地方就可以了。 代码变得更容易维护，而且也更加简洁。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroDAO</span> <span class="token keyword">implements</span> <span class="token class-name">DAO</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HeroDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span>                <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"select count(*) from hero"</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                total <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Hero hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into hero values(null,?,?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Hero hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update hero set name= ?, hp = ? , damage = ? where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> hero<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"delete from hero where id = "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Hero <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero hero <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Statement s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from hero where id = "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> hp <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"hp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> damage <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> hero<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Short<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from hero order by id desc limit ?,? "</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Connection c <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PreparedStatement ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Hero hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> hp <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"hp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> damage <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span>                hero<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage<span class="token punctuation">;</span>                heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> heros<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>与线程池类似的，数据库也有一个数据库连接池。 不过他们的实现思路是不一样的。<br>本章节讲解了自定义数据库连接池类：ConnectionPool，虽然不是很完善和健壮，但是足以帮助大家理解ConnectionPool的基本原理。</p><h4 id="数据库连接池原理-传统方式"><a href="#数据库连接池原理-传统方式" class="headerlink" title="数据库连接池原理-传统方式"></a>数据库连接池原理-传统方式</h4><p>当有多个线程，每个线程都需要连接数据库执行SQL语句的话，那么每个线程都会创建一个连接，并且在使用完毕后，关闭连接。<br>创建连接和关闭连接的过程也是比较消耗时间的，当多线程并发的时候，系统就会变得很卡顿。<br>同时，一个数据库同时支持的连接总数也是有限的，如果多线程并发量很大，那么数据库连接的总数就会被消耗光，后续线程发起的数据库连接就会失败。<br><img src="http://stepimagewm.how2j.cn/2654.png" alt></p><h4 id="数据库连接池原理-使用池"><a href="#数据库连接池原理-使用池" class="headerlink" title="数据库连接池原理-使用池"></a>数据库连接池原理-使用池</h4><p>与传统方式不同，连接池在使用之前，就会创建好一定数量的连接。<br>如果有任何线程需要使用连接，那么就从连接池里面借用，而不是自己重新创建.<br>使用完毕后，又把这个连接归还给连接池供下一次或者其他线程使用。<br>倘若发生多线程并发情况，连接池里的连接被借用光了，那么其他线程就会临时等待，直到有连接被归还回来，再继续使用。<br>整个过程，这些连接都不会被关闭，而是不断的被循环使用，从而节约了启动和关闭连接的时间。<br><img src="http://stepimagewm.how2j.cn/2655.png" alt></p><h4 id="ConnectionPool构造方法和初始化"><a href="#ConnectionPool构造方法和初始化" class="headerlink" title="ConnectionPool构造方法和初始化"></a>ConnectionPool构造方法和初始化</h4><ul><li>ConnectionPool() 构造方法约定了这个连接池一共有多少连接</li><li>在init() 初始化方法中，创建了size条连接。 注意，这里不能使用try-with-resource这种自动关闭连接的方式，因为连接恰恰需要保持不关闭状态，供后续循环使用</li><li>getConnection， 判断是否为空，如果是空的就wait等待，否则就借用一条连接出去</li><li>returnConnection， 在使用完毕后，归还这个连接到连接池，并且在归还完毕后，调用notifyAll，通知那些等待的线程，有新的连接可以借用了。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionPool</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Connection<span class="token operator">></span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Connection<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConnectionPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里恰恰不能使用try-with-resource的方式，因为这些连接都需要是"活"的，不要被自动关闭了</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Connection c <span class="token operator">=</span> DriverManager                        <span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Connection c <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">returnConnection</span><span class="token punctuation">(</span>Connection c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程(下)</title>
      <link href="/2019/08/11/java-duo-xian-cheng-xia/"/>
      <url>/2019/08/11/java-duo-xian-cheng-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程-下"><a href="#多线程-下" class="headerlink" title="多线程(下)"></a>多线程(下)</h1><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>当业务比较复杂，多线程应用里有可能会发生死锁</p><h4 id="演示死锁"><a href="#演示死锁" class="headerlink" title="演示死锁"></a>演示死锁</h4><ol><li>线程1 首先占有对象1，接着试图占有对象2</li><li>线程2 首先占有对象2，接着试图占有对象1</li><li>线程1 等待线程2释放对象2</li><li>与此同时，线程2等待线程1释放对象1<br>就会。。。一直等待下去<br><img src="http://stepimagewm.how2j.cn/794.png" alt></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Hero ahri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ahri<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"九尾妖狐"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Hero annie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annie<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"安妮"</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//占有九尾妖狐</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ahri<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1 已占有九尾妖狐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//停顿1000毫秒，另一个线程有足够的时间占有安妮</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1 试图占有安妮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1 等待中 。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>annie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//占有安妮</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>annie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2 已占有安妮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//停顿1000毫秒，另一个线程有足够的时间占有暂用九尾妖狐</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2 试图占有九尾妖狐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2 等待中 。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ahri<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><p>线程之间有交互通知的需求，考虑如下情况：<br>有两个线程，处理同一个英雄。 一个加血，一个减血。<br>减血的线程，发现血量=1，就停止减血，直到加血的线程为英雄加了血，才可以继续减血</p><h4 id="不好的解决方式"><a href="#不好的解决方式" class="headerlink" title="不好的解决方式"></a>不好的解决方式</h4><p>故意设计减血线程频率更高，盖伦的血量迟早会到达1<br>减血线程中使用while循环判断是否是1，如果是1就不停的循环,直到加血线程回复了血量<br>这是不好的解决方式，因为会大量占用CPU,拖慢性能</p><h4 id="使用wait和notify进行线程交互"><a href="#使用wait和notify进行线程交互" class="headerlink" title="使用wait和notify进行线程交互"></a>使用wait和notify进行线程交互</h4><p>在Hero类中：hurt()减血方法：当hp=1的时候，执行this.wait().<br>this.wait()表示 让占有this的线程等待，并临时释放占有<br>进入hurt方法的线程必然是减血线程，this.wait()会让减血线程临时释放对this的占有。 这样加血线程，就有机会进入recover()加血方法了。<br>recover() 加血方法：增加了血量，执行this.notify();<br>this.notify() 表示通知那些等待在this的线程，可以苏醒过来了。 等待在this的线程，恰恰就是减血线程。 一旦recover()结束， 加血线程释放了this，减血线程，就可以重新占有this，并执行后面的减血工作。<br><img src="http://stepimagewm.how2j.cn/796.png" alt></p><h4 id="关于wait、notify和notifyAll"><a href="#关于wait、notify和notifyAll" class="headerlink" title="关于wait、notify和notifyAll"></a>关于wait、notify和notifyAll</h4><p>留意wait()和notify() 这两个方法是什么对象上的？</p><p>这里需要强调的是，wait方法和notify方法，<font color="red">并不是Thread线程上的方法，它们是Object上的方法。</font><br>因为所有的Object都可以被用来作为同步对象，所以准确的讲，wait和notify是同步对象上的方法。<br>wait()的意思是： 让占用了这个同步对象的线程，临时释放当前的占用，并且等待。 <font color="red">所以调用wait是有前提条件的，一定是在synchronized块里，否则就会出错。</font><br>notify() 的意思是，通知一个等待在这个同步对象上的线程，你可以苏醒过来了，有机会重新占用当前对象了。<br>notifyAll() 的意思是，通知所有的等待在这个同步对象上的线程，你们可以苏醒过来了，有机会重新占用当前对象了。</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>每一个线程的启动和结束都是比较消耗时间和占用资源的。 如果在系统中用到了很多的线程，大量的启动和结束动作会导致系统的性能变卡，响应变慢。<br>为了解决这个问题，引入线程池这种设计思想。线程池的模式很像生产者消费者模式，消费的对象是一个一个的能够运行的任务</p><h4 id="线程池设计思路"><a href="#线程池设计思路" class="headerlink" title="线程池设计思路"></a>线程池设计思路</h4><p>线程池的思路和生产者消费者模型是很接近的。</p><ul><li>准备一个任务容器</li><li>一次性启动10个 消费者线程</li><li>刚开始任务容器是空的，所以线程都wait在上面。</li><li>直到一个外部线程往这个任务容器中扔了一个“任务”，就会有一个消费者线程被唤醒notify</li><li>这个消费者线程取出“任务”，并且执行这个任务，执行完毕后，继续等待下一次任务的到来。</li><li>如果短时间内，有较多的任务加入，那么就会有多个线程被唤醒，去执行这些任务。<br>在整个过程中，都不需要创建新的线程，而是循环使用这些已经存在的线程<br><img src="http://stepimagewm.how2j.cn/2600.png" alt></li></ul><h4 id="使用java自带线程池"><a href="#使用java自带线程池" class="headerlink" title="使用java自带线程池"></a>使用java自带线程池</h4><p>java提供自带的线程池，而不需要自己去开发一个自定义线程池了。线程池类ThreadPoolExecutor在包java.util.concurrent下</p><pre class="line-numbers language-java"><code class="language-java">ThreadPoolExecutor threadPool<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一个参数10 表示这个线程池初始化了10个线程在里面工作</li><li>第二个参数15 表示如果10个线程不够用了，就会自动增加到最多15个线程</li><li>第三个参数60 结合第四个参数TimeUnit.SECONDS，表示经过60秒，多出来的线程还没有接到活儿，就会回收，最后保持池子里就10个</li><li>第四个参数TimeUnit.SECONDS 如上</li><li>第五个参数 new LinkedBlockingQueue() 用来放任务的集合</li><li>execute方法用于添加新的任务</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>LinkedBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ThreadPoolExecutor threadPool<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Lock对象"><a href="#Lock对象" class="headerlink" title="Lock对象"></a>Lock对象</h3><p>与synchronized类似的，lock也能够达到同步的效果</p><h4 id="使用Lock对象实现同步效果"><a href="#使用Lock对象实现同步效果" class="headerlink" title="使用Lock对象实现同步效果"></a>使用Lock对象实现同步效果</h4><p>Lock是一个接口，为了使用一个Lock对象，需要用到</p><pre class="line-numbers language-java"><code class="language-java">Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与 synchronized (someObject) 类似的，lock()方法，表示当前线程占用lock对象，一旦占用，其他线程就不能占用了。<br>与 synchronized 不同的是，一旦synchronized 块结束，就会自动释放对someObject的占用。 lock却必须调用unlock方法进行手动释放，为了保证释放的执行，往往会把unlock() 放在finally中进行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s %s %n"</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"线程启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"试图占有对象：lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"占有对象：lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进行5秒的业务操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"释放对象：lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//先让t1飞2秒</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"线程启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"试图占有对象：lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"占有对象：lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进行5秒的业务操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"释放对象：lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="trylock方法"><a href="#trylock方法" class="headerlink" title="trylock方法"></a>trylock方法</h4><p>synchronized 是不占用到手不罢休的，会一直试图占用下去。<br>与 synchronized 的钻牛角尖不一样，Lock接口还提供了一个trylock方法。<br>trylock会在指定时间范围内试图占用，占成功了，就占用。 如果时间到了，还占用不成功，扭头就走~<br><font color="red">注意： 因为使用trylock有可能成功，有可能失败，所以后面unlock释放锁的时候，需要判断是否占用成功了，如果没占用成功也unlock,就会抛出异常</font></p><h4 id="线程交互"><a href="#线程交互" class="headerlink" title="线程交互"></a>线程交互</h4><p>使用synchronized方式进行线程交互，用到的是同步对象的wait,notify和notifyAll方法<br>Lock也提供了类似的解决办法，首先通过lock对象得到一个Condition对象，然后分别调用这个Condition对象的：await, signal,signalAll 方法<br><font color="red">注意： 不是Condition对象的wait,nofity,notifyAll方法,是await,signal,signalAll</font></p><h4 id="总结Lock和synchronized的区别"><a href="#总结Lock和synchronized的区别" class="headerlink" title="总结Lock和synchronized的区别"></a>总结Lock和synchronized的区别</h4><ol><li>Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现，Lock是代码层面的实现。</li><li>Lock可以选择性的获取锁，如果一段时间获取不到，可以放弃。synchronized不行，会一根筋一直获取下去。 借助Lock的这个特性，就能够规避死锁，synchronized必须通过谨慎和良好的设计，才能减少死锁的发生。</li><li>synchronized在发生异常和同步块结束的时候，会自动释放锁。而Lock必须手动释放， 所以如果忘记了释放锁，一样会造成死锁。</li></ol><h3 id="原子访问"><a href="#原子访问" class="headerlink" title="原子访问"></a>原子访问</h3><h4 id="原子性操作概念"><a href="#原子性操作概念" class="headerlink" title="原子性操作概念"></a>原子性操作概念</h4><p>所谓的原子性操作即不可中断的操作，比如赋值操作 <code>int i = 5;</code><br>原子性操作本身是线程安全的<br>但是 i++ 这个行为，事实上是有3个原子性操作组成的。<br>步骤 1. 取 i 的值<br>步骤 2. i + 1<br>步骤 3. 把新的值赋予i<br>这三个步骤，每一步都是一个原子操作，但是合在一起，就不是原子操作。就不是线程安全的。<br>换句话说，一个线程在步骤1 取i 的值结束后，还没有来得及进行步骤2，另一个线程也可以取 i的值了。<br>这也是分析同步问题产生的原因 中的原理。<br>i++ ，i–， i = i+1 这些都是非原子性操作。只有int i = 1,这个赋值操作是原子性的。</p><h4 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h4><p>JDK6 以后，新增加了一个包java.util.concurrent.atomic，里面有各种原子类，比如AtomicInteger。<br>而AtomicInteger提供了各种自增，自减等方法，这些方法都是原子性的。 换句话说，自增方法 incrementAndGet 是线程安全的，同一个时间，只有一个线程可以调用这个方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        AtomicInteger atomicI <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> atomicI<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> atomicI<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> atomicI<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程(上)</title>
      <link href="/2019/08/10/java-duo-xian-cheng-shang/"/>
      <url>/2019/08/10/java-duo-xian-cheng-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程-上"><a href="#多线程-上" class="headerlink" title="多线程(上)"></a>多线程(上)</h1><h3 id="启动一个多线程"><a href="#启动一个多线程" class="headerlink" title="启动一个多线程"></a>启动一个多线程</h3><p>多线程即在同一时间，可以做多件事情，创建多线程有3种方式，分别是继承线程类,实现Runnable接口,匿名类</p><h4 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h4><p>首先要理解进程(Processor)和线程(Thread)的区别<br>进程：启动一个LOL.exe就叫一个进程。 接着又启动一个DOTA.exe，这叫两个进程。<br>线程：线程是在进程内部同时做的事情，比如在LOL里，有很多事情要同时做，比如”盖伦” 击杀“提莫”，同时“赏金猎人”又在击杀“盲僧”，这就是由多线程来实现的。</p><h4 id="创建多线程-继承线程类"><a href="#创建多线程-继承线程类" class="headerlink" title="创建多线程-继承线程类"></a>创建多线程-继承线程类</h4><p>使用多线程，就可以做到盖伦在攻击提莫的同时，赏金猎人也在攻击盲僧<br>设计一个类KillThread 继承Thread，并且重写run方法<br>启动线程办法： 实例化一个KillThread对象，并且调用其start方法<br>就可以观察到 赏金猎人攻击盲僧的同时，盖伦也在攻击提莫</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KillThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Hero h1<span class="token punctuation">;</span>    <span class="token keyword">private</span> Hero h2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">KillThread</span><span class="token punctuation">(</span>Hero h1<span class="token punctuation">,</span> Hero h2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h1 <span class="token operator">=</span> h1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h2 <span class="token operator">=</span> h2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>h2<span class="token punctuation">.</span><span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            h1<span class="token punctuation">.</span><span class="token function">attackHero</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建多线程-实现Runnable接口"><a href="#创建多线程-实现Runnable接口" class="headerlink" title="创建多线程-实现Runnable接口"></a>创建多线程-实现Runnable接口</h4><p>创建类Battle，实现Runnable接口<br>启动的时候，首先创建一个Battle对象，然后再根据该battle对象创建一个线程对象，并启动</p><pre class="line-numbers language-java"><code class="language-java">Battle battle1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Battle</span><span class="token punctuation">(</span>gareen<span class="token punctuation">,</span>teemo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>battle1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>battle1 对象实现了Runnable接口，所以有run方法，但是直接调用run方法，并不会启动一个新的线程。<br>必须，借助一个线程对象的start()方法，才会启动一个新的线程。<br>所以，在创建Thread对象的时候，把battle1作为构造方法的参数传递进去，这个线程启动的时候，就会去执行battle1.run()方法了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Battle</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Hero h1<span class="token punctuation">;</span>    <span class="token keyword">private</span> Hero h2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Battle</span><span class="token punctuation">(</span>Hero h1<span class="token punctuation">,</span> Hero h2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h1 <span class="token operator">=</span> h1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h2 <span class="token operator">=</span> h2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>h2<span class="token punctuation">.</span><span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            h1<span class="token punctuation">.</span><span class="token function">attackHero</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建多线程-匿名类"><a href="#创建多线程-匿名类" class="headerlink" title="创建多线程-匿名类"></a>创建多线程-匿名类</h4><p>使用匿名类，继承Thread,重写run方法，直接在run方法中写业务代码<br>匿名类的一个好处是可以很方便的访问外部的局部变量,前提是外部的局部变量需要被声明为final。(JDK7以后就不需要了)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero gareen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"盖伦"</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">616</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>damage <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        Hero teemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teemo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"提莫"</span><span class="token punctuation">;</span>        teemo<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>        teemo<span class="token punctuation">.</span>damage <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        Hero bh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bh<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"赏金猎人"</span><span class="token punctuation">;</span>        bh<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        bh<span class="token punctuation">.</span>damage <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span>        Hero leesin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leesin<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"盲僧"</span><span class="token punctuation">;</span>        leesin<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">455</span><span class="token punctuation">;</span>        leesin<span class="token punctuation">.</span>damage <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匿名类</span>        Thread t1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//匿名类中用到外部的局部变量teemo，必须把teemo声明为final</span>                <span class="token comment" spellcheck="true">//但是在JDK7以后，就不是必须加final的了</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>teemo<span class="token punctuation">.</span><span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    gareen<span class="token punctuation">.</span><span class="token function">attackHero</span><span class="token punctuation">(</span>teemo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>leesin<span class="token punctuation">.</span><span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    bh<span class="token punctuation">.</span><span class="token function">attackHero</span><span class="token punctuation">(</span>leesin<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建多线程的三种方式"><a href="#创建多线程的三种方式" class="headerlink" title="创建多线程的三种方式"></a>创建多线程的三种方式</h4><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>匿名类的方式<br><font color="red">注： 启动线程是start()方法，run()并不能启动一个新的线程</font><h5 id="将要启动多线程的功能另开一个类继承Tread将其功能写入run方法，在本类new-T-start"><a href="#将要启动多线程的功能另开一个类继承Tread将其功能写入run方法，在本类new-T-start" class="headerlink" title="将要启动多线程的功能另开一个类继承Tread将其功能写入run方法，在本类new T().start();"></a>将要启动多线程的功能另开一个类继承Tread将其功能写入run方法，在本类new T().start();</h5></li></ol><h3 id="常见线程方法"><a href="#常见线程方法" class="headerlink" title="常见线程方法"></a>常见线程方法</h3><h4 id="当前线程暂停"><a href="#当前线程暂停" class="headerlink" title="当前线程暂停"></a>当前线程暂停</h4><p>Tread.sleep(1000);表示当前线程暂停1000毫秒，其他线程不受影响<br>Tread.sleep(1000);会抛出InterruptedException中断异常，因为当前线程sleep的时候，有可能被停止，这时就会抛出 InterruptedException</p><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><p>当线程处于竞争关系的时候，优先级高的线程会有更大的几率获得CPU资源<br>为了演示该效果，要把暂停时间去掉，多条线程各自会尽力去占有CPU资源<br>同时把英雄的血量增加100倍，攻击减低到1，才有足够的时间观察到优先级的演示<br>如图可见，线程1的优先级是MAX_PRIORITY，所以它争取到了更多的CPU资源执行代码</p><pre class="line-numbers language-java"><code class="language-java">t1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="临时暂停"><a href="#临时暂停" class="headerlink" title="临时暂停"></a>临时暂停</h4><p>当前线程，临时暂停，使得其他线程可以有更多的机会占用CPU资源</p><pre class="line-numbers language-java"><code class="language-java">Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><p>守护线程的概念是： 当一个进程里，所有的线程都是守护线程的时候，结束当前进程。<br>就好像一个公司有销售部，生产部这些和业务挂钩的部门。<br>除此之外，还有后勤，行政等这些支持部门。<br>如果一家公司销售部，生产部都解散了，那么只剩下后勤和行政，那么这家公司也可以解散了。<br>守护线程就相当于那些支持部门，如果一个进程只剩下守护线程，那么进程就会自动结束。<br>守护线程通常会被用来做日志，性能统计等工作。</p><pre class="line-numbers language-java"><code class="language-java">t1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>多线程的同步问题指的是多个线程同时修改一个数据的时候，可能导致的问题,多线程的同步问题，又叫Concurrency 问题</p><h4 id="演示同步问题"><a href="#演示同步问题" class="headerlink" title="演示同步问题"></a>演示同步问题</h4><p>假设盖伦有10000滴血，并且在基地里，同时又被对方多个英雄攻击<br>就是有多个线程在减少盖伦的hp<br>同时又有多个线程在恢复盖伦的hp<br>假设线程的数量是一样的，并且每次改变的值都是1，那么所有线程结束后，盖伦应该还是10000滴血。<br><font color="red">注意： 不是每一次运行都会看到错误的数据产生，多运行几次，或者增加运行的次数</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Hero gareen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"盖伦"</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"盖伦的初始血量是 %.0f%n"</span><span class="token punctuation">,</span> gareen<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多线程同步问题指的是多个线程同时修改一个数据的时候，导致的问题</span>        <span class="token comment" spellcheck="true">//假设盖伦有10000滴血，并且在基地里，同时又被对方多个英雄攻击</span>        <span class="token comment" spellcheck="true">//用JAVA代码来表示，就是有多个线程在减少盖伦的hp</span>        <span class="token comment" spellcheck="true">//同时又有多个线程在恢复盖伦的hp</span>        <span class="token comment" spellcheck="true">//n个线程增加盖伦的hp</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> addThreads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> reduceThreads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    gareen<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//n个线程减少盖伦的hp</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    gareen<span class="token punctuation">.</span><span class="token function">hurt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reduceThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//等待所有增加线程结束</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> addThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//等待所有减少线程结束</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> reduceThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//代码执行到这里，所有增加和减少线程都结束了</span>        <span class="token comment" spellcheck="true">//增加和减少线程的数量是一样的，每次都增加，减少1.</span>        <span class="token comment" spellcheck="true">//那么所有线程都结束后，盖伦的hp应该还是初始值</span>        <span class="token comment" spellcheck="true">//但是事实上观察到的是：</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d个增加线程和%d个减少线程结束后%n盖伦的血量变成了 %.0f%n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>gareen<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析同步问题产生的原因"><a href="#分析同步问题产生的原因" class="headerlink" title="分析同步问题产生的原因"></a>分析同步问题产生的原因</h4><ol><li>假设增加线程先进入，得到的hp是10000 </li><li>进行增加运算 </li><li>正在做增加运算的时候，还没有来得及修改hp的值，减少线程来了 </li><li>减少线程得到的hp的值也是10000 </li><li>减少线程进行减少运算 </li><li>增加线程运算结束，得到值10001，并把这个值赋予hp </li><li>减少线程也运算结束，得到值9999，并把这个值赋予hp<br>hp，最后的值就是9999<br>虽然经历了两个线程各自增减了一次，本来期望还是原值10000，但是却得到了一个9999<br>这个时候的值9999是一个错误的值，在业务上又叫做脏数据<br><img src="http://stepimagewm.how2j.cn/787.png" alt></li></ol><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>总体解决思路是： 在增加线程访问hp期间，其他线程不可以访问hp </p><ul><li>增加线程获取到hp的值，并进行运算 </li><li>在运算期间，减少线程试图来获取hp的值，但是不被允许 </li><li>增加线程运算结束，并成功修改hp的值为10001 </li><li>减少线程，在增加线程做完后，才能访问hp的值，即10001 </li><li>减少线程运算，并得到新的值10000<br><img src="http://stepimagewm.how2j.cn/788.png" alt></li></ul><h4 id="synchronized-同步对象概念"><a href="#synchronized-同步对象概念" class="headerlink" title="synchronized 同步对象概念"></a>synchronized 同步对象概念</h4><p>解决上述问题之前，先理解synchronized关键字的意义<br>如下代码：</p><pre class="line-numbers language-java"><code class="language-java">Object someObject <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>someObject<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//此处的代码只有占有了someObject后才可以执行</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>synchronized表示当前线程，独占 对象 someObject<br>当前线程独占 了对象someObject，如果有其他线程试图占有对象someObject，就会等待，直到当前线程释放对someObject的占用。<br>someObject 又叫同步对象，所有的对象，都可以作为同步对象,为了达到同步的效果，必须使用同一个同步对象<br>释放同步对象的方式： synchronized 块自然结束，或者有异常抛出<br><img src="http://stepimagewm.how2j.cn/789.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Object someObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" t1 线程已经运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 试图占有对象：someObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>someObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//这里的代码，会在someObject被占领时运行</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 占有对象：someObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 释放对象：someObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//出了此代码块就会释放someObject对象</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" t1 线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" t2 线程已经运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 试图占有对象：someObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>someObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 占有对象：someObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 释放对象：someObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" t2 线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用synchronized-解决同步问题"><a href="#使用synchronized-解决同步问题" class="headerlink" title="使用synchronized 解决同步问题"></a>使用synchronized 解决同步问题</h4><p>所有需要修改hp的地方，有要建立在占有someObject的基础上。<br>而对象 someObject在同一时间，只能被一个线程占有。 间接地，导致同一时间，hp只能被一个线程修改。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Object someObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//任何线程要修改hp的值，必须先占用someObject</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>someObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>                gareen<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用hero对象作为同步对象"><a href="#使用hero对象作为同步对象" class="headerlink" title="使用hero对象作为同步对象"></a>使用hero对象作为同步对象</h4><p>既然任意对象都可以用来作为同步对象，而所有的线程访问的都是同一个hero对象，索性就使用gareen来作为同步对象<br>进一步的，对于Hero的hurt方法，加上：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表示当前对象为同步对象，即也是gareen为同步对象<br>以下代码展示了两种方式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>GradientPaint<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Hero gareen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"盖伦"</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> addThreads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> reduceThreads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//使用gareen作为synchronized</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>gareen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        gareen<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//使用gareen作为synchronized</span>                    <span class="token comment" spellcheck="true">//在方法hurt中有synchronized(this)</span>                    gareen<span class="token punctuation">.</span><span class="token function">hurt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reduceThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> addThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> reduceThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d个增加线程和%d个减少线程结束后%n盖伦的血量是 %.0f%n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>gareen<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> charactor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> damage<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//回血</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        hp<span class="token operator">=</span>hp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//掉血</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hurt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用this作为同步对象</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hp<span class="token operator">=</span>hp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackHero</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        h<span class="token punctuation">.</span>hp<span class="token operator">-=</span>damage<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 正在攻击 %s, %s的血变成了 %.0f%n"</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>h<span class="token punctuation">.</span>name<span class="token punctuation">,</span>h<span class="token punctuation">.</span>name<span class="token punctuation">,</span>h<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">"死了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">>=</span>hp<span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在方法前，加上修饰符synchronized"><a href="#在方法前，加上修饰符synchronized" class="headerlink" title="在方法前，加上修饰符synchronized"></a>在方法前，加上修饰符synchronized</h4><p>在recover前，直接加上synchronized ，其所对应的同步对象，就是this和hurt方法达到的效果是一样<br>外部线程访问gareen的方法，就不需要额外使用synchronized 了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> charactor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> damage<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//回血</span>    <span class="token comment" spellcheck="true">//直接在方法前加上修饰符synchronized</span>    <span class="token comment" spellcheck="true">//其所对应的同步对象，就是this</span>    <span class="token comment" spellcheck="true">//和hurt方法达到的效果一样</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        hp<span class="token operator">=</span>hp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//掉血</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hurt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用this作为同步对象</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hp<span class="token operator">=</span>hp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackHero</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        h<span class="token punctuation">.</span>hp<span class="token operator">-=</span>damage<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 正在攻击 %s, %s的血变成了 %.0f%n"</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>h<span class="token punctuation">.</span>name<span class="token punctuation">,</span>h<span class="token punctuation">.</span>name<span class="token punctuation">,</span>h<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">"死了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">>=</span>hp<span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h4><p>如果一个类，其方法都是有synchronized修饰的，那么该类就叫做线程安全的类<br>同一时间，只有一个线程能够进入 这种类的一个实例 的去修改数据，进而保证了这个实例中的数据的安全(不会同时被多线程修改而变成脏数据)<br>比如StringBuffer和StringBuilder的区别<br>StringBuffer的方法都是有synchronized修饰的，StringBuffer就叫做线程安全的类,而StringBuilder就不是线程安全的类</p><h3 id="线程安全的类-1"><a href="#线程安全的类-1" class="headerlink" title="线程安全的类"></a>线程安全的类</h3><p>常见的线程安全相关的面试题</p><h4 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h4><p>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式<br>区别1： </p><ul><li>HashMap可以存放 null</li><li>Hashtable不能存放null</li></ul><p>区别2：</p><ul><li>HashMap不是线程安全的类</li><li>Hashtable是线程安全的类</li></ul><h4 id="StringBuffer和StringBuilder的区别"><a href="#StringBuffer和StringBuilder的区别" class="headerlink" title="StringBuffer和StringBuilder的区别"></a>StringBuffer和StringBuilder的区别</h4><ul><li>StringBuffer 是线程安全的</li><li>StringBuilder 是非线程安全的<br>所以当进行大量字符串拼接操作的时候，如果是单线程就用StringBuilder会更快些，如果是多线程，就需要用StringBuffer 保证数据的安全性<br>非线程安全的为什么会比线程安全的快？ 因为不需要同步嘛，省略了些时间</li></ul><h4 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h4><p>Vector是线程安全的类，而ArrayList是非线程安全的。</p><h4 id="把非线程安全的集合转换为线程安全"><a href="#把非线程安全的集合转换为线程安全" class="headerlink" title="把非线程安全的集合转换为线程安全"></a>把非线程安全的集合转换为线程安全</h4><p>ArrayList是非线程安全的，换句话说，多个线程可以同时进入一个ArrayList对象的add方法<br>借助Collections.synchronizedList，可以把ArrayList转换为线程安全的List。<br>与此类似的，还有HashSet,LinkedList,HashMap等等非线程安全的类，都通过工具类Collections转换为线程安全的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java LAMBDA表达式</title>
      <link href="/2019/08/10/java-lambda/"/>
      <url>/2019/08/10/java-lambda/</url>
      
        <content type="html"><![CDATA[<h3 id="匿名类方式"><a href="#匿名类方式" class="headerlink" title="匿名类方式"></a>匿名类方式</h3><p>首先准备一个接口HeroChecker，提供一个test(Hero)方法，然后通过匿名类的方式，实现这个接口</p><pre class="line-numbers language-java"><code class="language-java">HeroChecker checker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着调用filter，传递这个checker进去进行判断，</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后的集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用匿名类的方式，筛选出 hp>100 &amp;&amp; damange&lt;50的英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HeroChecker checker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span>checker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros<span class="token punctuation">,</span>HeroChecker checker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>checker<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lambda<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HeroChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Lambda方式"><a href="#Lambda方式" class="headerlink" title="Lambda方式"></a>Lambda方式</h4><p>使用Lambda方式筛选出数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLamdba</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后的集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用Lamdba的方式，筛选出 hp>100 &amp;&amp; damange&lt;50的英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span>h<span class="token operator">-</span><span class="token operator">></span>h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros<span class="token punctuation">,</span>HeroChecker checker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>checker<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从匿名类演变成Lambda表达式"><a href="#从匿名类演变成Lambda表达式" class="headerlink" title="从匿名类演变成Lambda表达式"></a>从匿名类演变成Lambda表达式</h4><p>Lambda表达式可以看成是匿名类一点点演变过来</p><ol><li>匿名类的正常写法<pre class="line-numbers language-java"><code class="language-java">HeroChecker c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>把外面的壳子去掉只保留方法参数和方法体,参数和方法体之间加上符号 -&gt;<pre class="line-numbers language-java"><code class="language-java">HeroChecker c2 <span class="token operator">=</span> <span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">return</span> h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>把return和{}去掉<pre class="line-numbers language-java"><code class="language-java">HeroChecker c3 <span class="token operator">=</span> <span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>把 参数类型和圆括号去掉(只有一个参数的时候，才可以去掉圆括号)<pre class="line-numbers language-java"><code class="language-java">HeroChecker c4 <span class="token operator">=</span> h <span class="token operator">-</span><span class="token operator">></span>h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>把c4作为参数传递进去<pre class="line-numbers language-java"><code class="language-java"><span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>直接把表达式传递进去<pre class="line-numbers language-java"><code class="language-java"><span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> h <span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span>hp <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLamdba</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后的集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用匿名类的方式，筛选出 hp>100 &amp;&amp; damange&lt;50的英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 匿名类的正常写法</span>        HeroChecker c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>hp <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把new HeroChcekcer，方法名，方法返回类型信息去掉</span>        <span class="token comment" spellcheck="true">// 只保留方法参数和方法体</span>        <span class="token comment" spellcheck="true">// 参数和方法体之间加上符号 -></span>        HeroChecker c2 <span class="token operator">=</span> <span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> h<span class="token punctuation">.</span>hp <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把return和{}去掉</span>        HeroChecker c3 <span class="token operator">=</span> <span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span>hp <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把 参数类型和圆括号去掉</span>        HeroChecker c4 <span class="token operator">=</span> h <span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span>hp <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把c4作为参数传递进去</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> c4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直接把表达式传递进去</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> h <span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span>hp <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros<span class="token punctuation">,</span> HeroChecker checker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>checker<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h4><p>与匿名类 概念相比较，<br>Lambda 其实就是匿名方法，这是一种把方法作为参数进行传递的编程思想。</p><p>虽然代码是这么写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> h <span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span>hp <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，Java会在背后，悄悄的，把这些都还原成匿名类方式。<br>引入Lambda表达式，会使得代码更加紧凑，而不是各种接口和匿名类到处飞。</p><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><h4 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后的集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">)</span><span class="token punctuation">;</span>        HeroChecker c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用匿名类过滤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用Lambda表达式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token operator">></span>h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Lambda表达式中使用静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> h <span class="token operator">-</span><span class="token operator">></span> TestLambda<span class="token punctuation">.</span><span class="token function">testHero</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直接引用静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> TestLambda<span class="token operator">:</span><span class="token operator">:</span>testHero<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">testHero</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros<span class="token punctuation">,</span> HeroChecker checker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>checker<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用对象方法"><a href="#引用对象方法" class="headerlink" title="引用对象方法"></a>引用对象方法</h4><p>与引用静态方法很类似，只是传递方法的时候，需要一个对象的存在</p><pre class="line-numbers language-java"><code class="language-java">TestLambda testLambda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestLambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> testLambda<span class="token operator">:</span><span class="token operator">:</span>testHero<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方式叫做引用对象方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后的集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用引用对象方法  的过滤结果："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用类的对象方法</span>        TestLambda testLambda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestLambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> testLambda<span class="token operator">:</span><span class="token operator">:</span>testHero<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">testHero</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros<span class="token punctuation">,</span> HeroChecker checker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>checker<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用容器中的对象的方法"><a href="#引用容器中的对象的方法" class="headerlink" title="引用容器中的对象的方法"></a>引用容器中的对象的方法</h4><p>首先为Hero添加一个方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用Lambda表达式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span>h<span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Lambda表达式中调用容器中的对象Hero的方法matched</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span>h<span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span><span class="token function">matched</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>matched恰好就是容器中的对象Hero的方法，那就可以进一步改写为</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> Hero<span class="token operator">:</span><span class="token operator">:</span>matched<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方式就叫做引用容器中的对象的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后的集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lambda表达式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span>h<span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lambda表达式中调用容器中的对象的matched方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span>h<span class="token operator">-</span><span class="token operator">></span> h<span class="token punctuation">.</span><span class="token function">matched</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"引用容器中对象的方法 之过滤结果："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">filter</span><span class="token punctuation">(</span>heros<span class="token punctuation">,</span> Hero<span class="token operator">:</span><span class="token operator">:</span>matched<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">testHero</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> h<span class="token punctuation">.</span>hp<span class="token operator">></span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>damage<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros<span class="token punctuation">,</span> HeroChecker checker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero hero <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>checker<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用构造器"><a href="#引用构造器" class="headerlink" title="引用构造器"></a>引用构造器</h4><p>有的接口中的方法会返回一个对象，比如java.util.function.Supplier提供<br>了一个get方法，返回一个对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设计一个方法，参数是这个接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List <span class="token function">getList</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>List<span class="token operator">></span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了调用这个方法，有3种方式<br>第一种匿名类：</p><pre class="line-numbers language-java"><code class="language-java">Supplier<span class="token operator">&lt;</span>List<span class="token operator">></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>List<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List list1 <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种：Lambda表达式</p><pre class="line-numbers language-java"><code class="language-java">List list2 <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三种：引用构造器</p><pre class="line-numbers language-java"><code class="language-java">List list3 <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>ArrayList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Supplier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Supplier<span class="token operator">&lt;</span>List<span class="token operator">></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>List<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//匿名类</span>    List list1 <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Lambda表达式</span>    List list2 <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//引用构造器</span>    List list3 <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>ArrayList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List <span class="token function">getList</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>List<span class="token operator">></span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上的内容还不懂"><a href="#以上的内容还不懂" class="headerlink" title="以上的内容还不懂"></a>以上的内容还不懂</h5><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LAMBDA表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 泛型</title>
      <link href="/2019/08/10/java-fan-xing/"/>
      <url>/2019/08/10/java-fan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h3 id="集合中的泛型"><a href="#集合中的泛型" class="headerlink" title="集合中的泛型"></a>集合中的泛型</h3><h4 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h4><p>使用泛型的好处：<br>泛型的用法是在容器后面添加<type><br>Type可以是类，抽象类，接口<br>泛型表示这种容器，只能存放APHero，ADHero就放不进去了。</type></p><h4 id="子类对象"><a href="#子类对象" class="headerlink" title="子类对象"></a>子类对象</h4><p>假设容器的泛型是Hero,那么Hero的子类APHero,ADHero都可以放进去，和Hero无关的类型Item还是放不进去</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><h4 id="extends"><a href="#extends" class="headerlink" title="? extends"></a>? extends</h4><p>ArrayList heroList&lt;? extends Hero&gt; 表示这是一个Hero泛型或者其子类泛型<br>heroList 的泛型可能是Hero<br>heroList 的泛型可能是APHero<br>heroList 的泛型可能是ADHero<br>所以 可以确凿的是，从heroList取出来的对象，一定是可以转型成Hero的，但是，不能往里面放东西，因为<br>放APHero就不满足<adhero><br>放ADHero又不满足<aphero></aphero></adhero></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> generic<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>ADHero<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>APHero<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGeneric</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>APHero<span class="token operator">></span> apHeroList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>APHero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apHeroList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">APHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Hero</span><span class="token operator">></span> heroList <span class="token operator">=</span> apHeroList<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//? extends Hero 表示这是一个Hero泛型的子类泛型</span>        <span class="token comment" spellcheck="true">//heroList 的泛型可以是Hero</span>        <span class="token comment" spellcheck="true">//heroList 的泛型可以使APHero</span>        <span class="token comment" spellcheck="true">//heroList 的泛型可以使ADHero</span>        <span class="token comment" spellcheck="true">//可以确凿的是，从heroList取出来的对象，一定是可以转型成Hero的</span>        Hero h<span class="token operator">=</span> heroList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//但是，不能往里面放东西</span>        heroList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ADHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译错误，因为heroList的泛型 有可能是APHero</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="super"><a href="#super" class="headerlink" title="? super"></a>? super</h4><p>ArrayList heroList&lt;? super Hero&gt; 表示这是一个Hero泛型或者其父类泛型<br>heroList的泛型可能是Hero<br>heroList的泛型可能是Object<br>可以往里面插入Hero以及Hero的子类,但是取出来有风险，因为不确定取出来是Hero还是Object</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> generic<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>ADHero<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>APHero<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGeneric</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Hero<span class="token operator">></span> heroList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//? super Hero 表示 heroList的泛型是Hero或者其父类泛型</span>        <span class="token comment" spellcheck="true">//heroList 的泛型可以是Hero</span>        <span class="token comment" spellcheck="true">//heroList 的泛型可以是Object</span>        <span class="token comment" spellcheck="true">//所以就可以插入Hero</span>        heroList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//也可以插入Hero的子类</span>        heroList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">APHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heroList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ADHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//但是，不能从里面取数据出来,因为其泛型可能是Object,而Object是强转Hero会失败</span>        Hero h<span class="token operator">=</span> heroList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符?"></a>泛型通配符?</h4><p>泛型通配符? 代表任意泛型<br>既然?代表任意泛型，那么换句话说，这个容器什么泛型都有可能<br>所以只能以Object的形式取出来,但是无法转换成hero类型，会有风险，并且不能往里面放对象，因为不知道到底是一个什么泛型的容器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> generic<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> property<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>APHero<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGeneric</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>APHero<span class="token operator">></span> apHeroList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>APHero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//?泛型通配符，表示任意泛型</span>        ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> generalList <span class="token operator">=</span> apHeroList<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//?的缺陷1： 既然?代表任意泛型，那么换句话说，你就不知道这个容器里面是什么类型</span>        <span class="token comment" spellcheck="true">//所以只能以Object的形式取出来</span>        Object o <span class="token operator">=</span> generalList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//?的缺陷2： 既然?代表任意泛型，那么既有可能是Hero,也有可能是Item</span>        <span class="token comment" spellcheck="true">//所以，放哪种对象进去，都有风险，结果就什么什么类型的对象，都不能放进去</span>        generalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译错误 因为?代表任意泛型，很有可能不是Item</span>        generalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译错误 因为?代表任意泛型，很有可能不是Hero</span>        generalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">APHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译错误  因为?代表任意泛型，很有可能不是APHero</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果希望只取出，不插入，就使用? extends Hero<br>如果希望只插入，不取出，就使用? super Hero<br>如果希望无法插入也无法取出，就使用 通配符?</p><h3 id="泛型转型"><a href="#泛型转型" class="headerlink" title="泛型转型"></a>泛型转型</h3><h4 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h4><p>根据面向对象学习的知识，子类转父类 是一定可以成功的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> generic<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>ADHero<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGeneric</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ADHero ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ADHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子类转父类</span>        h <span class="token operator">=</span> ad<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子类泛型转父类泛型"><a href="#子类泛型转父类泛型" class="headerlink" title="子类泛型转父类泛型"></a>子类泛型转父类泛型</h4><p>假设可以转型成功<br>引用hs指向了ADHero泛型的容器,作为Hero泛型的引用hs, 看上去是可以往里面加一个APHero的。但是hs这个引用，实际上是指向的一个ADHero泛型的容器<br>如果能加进去，就变成了ADHero泛型的容器里放进了APHero，这就矛盾了,所以子类泛型不可以转换为父类泛型<br><img src="http://stepimagewm.how2j.cn/835.png" alt><br>同理父类泛型不能转型为子类泛型</p><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 容器类</title>
      <link href="/2019/08/09/java-ji-he-kuang-jia/"/>
      <url>/2019/08/09/java-ji-he-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p>为了解决数组的局限性，引入容器类的概念。 最常见的容器类就是：ArrayList<br>容器的容量”capacity”会随着对象的增加，自动增长，只需要不断往容器里增加英雄即可，不用担心会出现数组的边界问题。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p>add 有两种用法<br>第一种是直接add对象，把对象加在最后面</p><pre class="line-numbers language-java"><code class="language-java">heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种是在指定位置加对象</p><pre class="line-numbers language-java"><code class="language-java">heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> specialHero<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="判断是否存在"><a href="#判断是否存在" class="headerlink" title="判断是否存在"></a>判断是否存在</h4><p>通过方法contains 判断一个对象是否在容器中<br>判断标准： 是否是同一个对象，而不是name是否相同</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化5个对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Hero specialHero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"special hero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>specialHero<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断一个对象是否在容器中</span>        <span class="token comment" spellcheck="true">// 判断标准： 是否是同一个对象，而不是name是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"虽然一个新的对象名字也叫 hero 1，但是contains的返回是:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero 1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"而对specialHero的判断，contains的返回是:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>specialHero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取指定位置的对象"><a href="#获取指定位置的对象" class="headerlink" title="获取指定位置的对象"></a>获取指定位置的对象</h4><p>通过get获取指定位置的对象，如果输入的下标越界，一样会报错</p><h4 id="获取对象所处的位置"><a href="#获取对象所处的位置" class="headerlink" title="获取对象所处的位置"></a>获取对象所处的位置</h4><p>indexOf用于判断一个对象在ArrayList中所处的位置<br>与contains一样，判断标准是对象是否相同，而非对象的name值是否相等</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>remove用于把对象从ArrayList中删除<br>remove可以根据下标删除ArrayList的元素</p><pre class="line-numbers language-java"><code class="language-java">heros<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以根据对象删除</p><pre class="line-numbers language-java"><code class="language-java">heros<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>specialHero<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>set用于替换指定位置的元素</p><pre class="line-numbers language-java"><code class="language-java">heros<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero 5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="获取大小"><a href="#获取大小" class="headerlink" title="获取大小"></a>获取大小</h4><p>size 用于获取ArrayList的大小</p><h4 id="转换为数组"><a href="#转换为数组" class="headerlink" title="转换为数组"></a>转换为数组</h4><p>toArray可以把一个ArrayList对象转换为数组。<br>需要注意的是，如果要转换为一个Hero数组，那么需要传递一个Hero数组类型的对象给toArray()，<br>这样toArray方法才知道，你希望转换为哪种类型的数组，否则只能转换为Object数组</p><pre class="line-numbers language-java"><code class="language-java">Hero hs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>heros<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="把另一个容器所有对象都加进来"><a href="#把另一个容器所有对象都加进来" class="headerlink" title="把另一个容器所有对象都加进来"></a>把另一个容器所有对象都加进来</h4><p>addAll 把另一个容器所有对象都加进来</p><h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><p>clear清空一个ArrayList</p><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><p>ArrayList实现了接口List<br>常见的写法会把引用声明为接口List类型<br><font color="red">注意：是java.util.List,而不是java.awt.List</font></p><h3 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型 Generic"></a>泛型 Generic</h3><p>不指定泛型的容器，可以存放任何类型的元素<br>指定了泛型的容器，只能存放指定类型的元素以及其子类</p><h4 id="泛型的简写"><a href="#泛型的简写" class="headerlink" title="泛型的简写"></a>泛型的简写</h4><p>JDK7提供了一个可以略微减少代码量的泛型简写方式</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> genericheros2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="用for循环遍历"><a href="#用for循环遍历" class="headerlink" title="用for循环遍历"></a>用for循环遍历</h4><p>通过前面的学习，知道了可以用size()和get()分别得到大小，和获取指定位置的元素，结合for循环就可以遍历出ArrayList的内容</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heros<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Hero h <span class="token operator">=</span> heros<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h4><p>使用迭代器Iterator遍历集合中的元素<br><img src="http://stepimagewm.how2j.cn/806.png" alt></p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator<span class="token operator">&lt;</span>Hero<span class="token operator">></span> it<span class="token operator">=</span> heros<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从最开始的位置判断"下一个"位置是否有数据</span><span class="token comment" spellcheck="true">//如果有就通过next取出来，并且把指针向下移动</span><span class="token comment" spellcheck="true">//直到"下一个"位置没有数据</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Hero h <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//迭代器的for写法</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------使用for的iterator-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>Hero<span class="token operator">></span> iterator <span class="token operator">=</span> heros<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Hero hero <span class="token operator">=</span> <span class="token punctuation">(</span>Hero<span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用增强型for循环"><a href="#用增强型for循环" class="headerlink" title="用增强型for循环"></a>用增强型for循环</h4><p>使用增强型for循环可以非常方便的遍历ArrayList中的元素，这是很多开发人员的首选。<br>不过增强型for循环也有不足：<br>无法用来进行ArrayList的初始化<br>无法得知当前是第几个元素了，当需要只打印单数元素的时候，就做不到了。 必须再自定下标变量。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第三种，增强型for循环</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------增强型for循环-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Hero h <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 容器类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java I/O流(下)</title>
      <link href="/2019/08/09/java-io3/"/>
      <url>/2019/08/09/java-io3/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaI-O知识-下"><a href="#JavaI-O知识-下" class="headerlink" title="JavaI/O知识(下)"></a>JavaI/O知识(下)</h1><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>DataInputSteam：数据输入流<br>DataOutputStream: 数据输出流</p><h4 id="直接进行字符串的读写"><a href="#直接进行字符串的读写" class="headerlink" title="直接进行字符串的读写"></a>直接进行字符串的读写</h4><p>使用数据流的writeUTF()和readUTF() 可以进行数据的格式化顺序读写<br>如本例，通过DataOutputStream 向文件顺序写出 布尔值，整数和字符串。然后再通过DataInputStream 顺序读入这些数据。<br><font color="red">要使用DataInputStream读取一个文件，这个文件必须是由DataOutputStream 写出的，否则会出现EOFException，<br>因为DataOutputStream 在写出的时候会做一些特殊标记，只有DataInputStream 才能成功的读取。<br></font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DataInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DataOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                FileInputStream fis  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                DataInputStream dis <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> b<span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取到布尔值:"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取到整数:"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取到字符串:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                FileOutputStream fos  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                DataOutputStream dos <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>            dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"123 this is gareen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>对象流指的是可以直接把一个对象以流的形式传输给其他的介质，比如硬盘<br>一个对象以流的形式进行传输，叫做序列化。 该对象所对应的类，必须是实现Serializable接口</p><h4 id="序列化一个对象"><a href="#序列化一个对象" class="headerlink" title="序列化一个对象"></a>序列化一个对象</h4><p>创建一个Hero对象，设置其名称为garen。<br>把该对象序列化到一个文件garen.lol。<br>然后再通过序列化把该文件转换为一个Hero对象<br><font color="red">注：把一个对象序列化有一个前提是：这个对象的类，必须实现了Serializable接口</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个Hero garen</span>        <span class="token comment" spellcheck="true">//要把Hero对象直接保存在文件上，务必让Hero类实现Serializable接口</span>        Hero h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"garen"</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">616</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//准备一个文件用于保存该对象</span>        File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/garen.lol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//创建对象输出流</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建对象输入流              </span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream ois <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            Hero h2 <span class="token operator">=</span> <span class="token punctuation">(</span>Hero<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> charactor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表示这个类当前的版本，如果有了变化，比如新设计了属性，就应该修改这个版本号</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流关系图"><a href="#流关系图" class="headerlink" title="流关系图"></a>流关系图</h3><p>这个图把本章节学到的流关系做了个简单整理</p><ol><li>流分为字节流和字符流</li><li>字节流下面常用的又有数据流和对象流</li><li>字符流下面常用的又有缓存流<br><img src="http://stepimagewm.how2j.cn/5678.png" alt><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> I/O </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaI/O流(中)</title>
      <link href="/2019/08/08/java-io2/"/>
      <url>/2019/08/08/java-io2/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaI-O知识-中"><a href="#JavaI-O知识-中" class="headerlink" title="JavaI/O知识(中)"></a>JavaI/O知识(中)</h1><h3 id="关闭流的方式"><a href="#关闭流的方式" class="headerlink" title="关闭流的方式"></a>关闭流的方式</h3><p>所有的流，无论是输入流还是输出流，使用完毕之后，都应该关闭。 如果不关闭，会产生对资源占用的浪费。<br>当量比较大的时候，会影响到业务的正常开展。</p><h4 id="在try中关闭"><a href="#在try中关闭" class="headerlink" title="在try中关闭"></a>在try中关闭</h4><p>在try的作用域里关闭文件输入流，在前面的示例中都是使用这种方式，这样做有一个弊端；<br>如果文件不存在，或者读取的时候出现问题而抛出异常，那么就不会执行这一行关闭流的代码，存在巨大的资源占用隐患。 不推荐使用</p><h4 id="在finally中关闭"><a href="#在finally中关闭" class="headerlink" title="在finally中关闭"></a>在finally中关闭</h4><p>这是标准的关闭流的方式</p><ol><li>首先把流的引用声明在try的外面，如果声明在try里面，其作用域无法抵达finally.</li><li>在finally关闭之前，要先判断该引用是否为空</li><li>关闭的时候，需要再一次进行try catch处理<br>这是标准的严谨的关闭流的方式，但是看上去很繁琐，所以写不重要的或者测试代码的时候，都会采用上面的有隐患try的方式，因为不麻烦</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在finally 里关闭流</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> fis<span class="token punctuation">)</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用try-的方式"><a href="#使用try-的方式" class="headerlink" title="使用try()的方式"></a>使用try()的方式</h4><p>把流定义在try()里,try,catch或者finally结束的时候，会自动关闭<br>这种编写代码的方式叫做 try-with-resources， 这是从JDK7开始支持的技术<br>所有的流，都实现了一个接口叫做 AutoCloseable，任何类实现了这个接口，都可以在try()中进行实例化。<br>并且在try, catch, finally结束的时候自动关闭，回收相关资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>Reader字符输入流<br>Writer字符输出流<br>专门用于字符的形式读取和写入数据</p><h4 id="使用字符流读取文件"><a href="#使用字符流读取文件" class="headerlink" title="使用字符流读取文件"></a>使用字符流读取文件</h4><p>FileReader 是Reader子类，以FileReader 为例进行文件读取</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 准备文件lol.txt其中的内容是AB</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建基于文件的Reader</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建字符数组，其长度就是文件的长度</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 以字符流的形式读取文件所有内容</span>            fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 打印出来是A B</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用字符流把字符串写入到文件"><a href="#使用字符流把字符串写入到文件" class="headerlink" title="使用字符流把字符串写入到文件"></a>使用字符流把字符串写入到文件</h4><p>FileWriter 是Writer的子类，以FileWriter 为例把字符串写入到文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 准备文件lol2.txt</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建基于文件的Writer</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileWriter fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以字符流的形式把数据写入到文件中</span>            String data<span class="token operator">=</span><span class="token string">"abcdefg1234567890"</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fr<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h3><h4 id="编码概念"><a href="#编码概念" class="headerlink" title="编码概念"></a>编码概念</h4><p>计算机存放数据只能存放数字，所有的字符都会被转换为不同的数字。<br>就像一个棋盘一样，不同的字，处于不同的位置，有不同的是数字编号。<br>有的棋盘很小，只能放数字和英文。<br>有的大一点，还能放中文<br>有的足够大，能放下世界人民所使用的所有文字和符号<br>如图所示，英文字符 A 能够放在所有的棋盘里，而且位置都差不多<br>中文字符, 中文字符 中 能够放在后两种棋盘里，并且位置不一样，而且在小的那个棋盘里，就放不下中文<br><img src="http://stepimagewm.how2j.cn/2481.png" alt></p><h4 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h4><p>工作后经常接触的编码方式有如下几种：<br>ISO-8859-1 ASCII 数字和西欧字母<br>GBK GB2312 BIG5 中文<br>UNICODE (统一码，万国码)<br>其中<br>ISO-8859-1 包含 ASCII<br>GB2312 是简体中文，BIG5是繁体中文，GBK同时包含简体和繁体以及日文。<br>UNICODE 包括了所有的文字，无论中文，英文，藏文，法文，世界所有的文字都包含其中</p><h4 id="UNICODE和UTF"><a href="#UNICODE和UTF" class="headerlink" title="UNICODE和UTF"></a>UNICODE和UTF</h4><p>根据前面的学习，我们了解到不同的编码方式对应不同的棋盘，而UNICODE因为要存放所有的数据，那么它的棋盘是最大的。<br>不仅如此，棋盘里每个数字都是很长的(4个字节)，因为不仅要表示字母，还要表示汉字等。<br>如果完全按照UNICODE的方式来存储数据，就会有很大的浪费。<br>比如在ISO-8859-1中，a 字符对应的数字是0x61<br>而UNICODE中对应的数字是 0x00000061，倘若一篇文章大部分都是英文字母，那么按照UNICODE的方式进行数据保存就会消耗很多空间<br>在这种情况下，就出现了UNICODE的各种减肥子编码, 比如UTF-8对数字和字母就使用一个字节，而对汉字就使用3个字节，从而达到了减肥还能保证健康的效果<br>UTF-8，UTF-16和UTF-32 针对不同类型的数据有不同的减肥效果，一般说来UTF-8是比较常用的方式<br><font color="green"><br>Java采用的是Unicode：写在.java源代码中的汉字，在执行之后，都会变成JVM中的字符。<br>而这些中文字符采用的编码方式，都是使用UNICODE. “中”字对应的UNICODE是4E2D,所以在内存中，实际保存的数据就是十六进制的0x4E2D, 也就是十进制的20013。<br></font></p><h4 id="用FileReader-字符流正确读取中文"><a href="#用FileReader-字符流正确读取中文" class="headerlink" title="用FileReader 字符流正确读取中文"></a>用FileReader 字符流正确读取中文</h4><p>FileReader得到的是字符，所以一定是已经把字节根据某种编码识别成了字符了<br>而FileReader使用的编码方式是Charset.defaultCharset()的返回值，如果是中文的操作系统，就是GBK<br>FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替，像这样：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h3><p>以介质是硬盘为例，字节流和字符流的弊端：<br>在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。<br>为了解决以上弊端，采用缓存流。<br>缓存流在读取的时候，会一次性读较多的数据到缓存中，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。<br>就好比吃饭，不用缓存就是每吃一口都到锅里去铲。用缓存就是先把饭盛到碗里，碗里的吃完了，再到锅里去铲<br>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区达到一定的量，才把这些数据，一起写入到硬盘中去。按照这种操作模式，就不会像字节流，<br>字符流那样每写一个字节都访问硬盘，从而减少了IO操作</p><h4 id="使用缓存流读取数据"><a href="#使用缓存流读取数据" class="headerlink" title="使用缓存流读取数据"></a>使用缓存流读取数据</h4><p>缓存字符输入流 BufferedReader 可以一次读取一行数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 准备文件lol.txt其中的内容是</span>        <span class="token comment" spellcheck="true">// garen kill teemo</span>        <span class="token comment" spellcheck="true">// teemo revive after 1 minutes</span>        <span class="token comment" spellcheck="true">// teemo try to garen, but killed again</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建文件字符流</span>        <span class="token comment" spellcheck="true">// 缓存流必须建立在一个存在的流的基础上</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 一次读一行</span>                String line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> line<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用缓存流写出数据"><a href="#使用缓存流写出数据" class="headerlink" title="使用缓存流写出数据"></a>使用缓存流写出数据</h4><p>PrintWriter 缓存字符输出流， 可以一次写出一行数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向文件lol2.txt中写入三行语句</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">// 创建文件字符流</span>                FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 缓存流必须建立在一个存在的流的基础上              </span>                PrintWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">)</span> <span class="token punctuation">{</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"garen kill teemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teemo revive after 1 minutes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teemo try to garen, but killed again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h4><p>有的时候，需要立即把数据写入到硬盘，而不是等缓存满了才写进去</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//向文件lol2.txt中写入三行语句</span>        File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文件字符流</span>        <span class="token comment" spellcheck="true">//缓存流必须建立在一个存在的流的基础上</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>FileWriter fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>PrintWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"garen kill teemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span>                pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teemo revive after 1 minutes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teemo try to garen, but killed again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> I/O </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaI/O流(上）</title>
      <link href="/2019/08/07/java-io/"/>
      <url>/2019/08/07/java-io/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaI-O知识-上"><a href="#JavaI-O知识-上" class="headerlink" title="JavaI/O知识(上)"></a>JavaI/O知识(上)</h1><h3 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h3><h4 id="一：创建一个文件对象"><a href="#一：创建一个文件对象" class="headerlink" title="一：创建一个文件对象"></a>一：创建一个文件对象</h4><p>使用绝对路径或者相对路径创建File对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> file<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 绝对路径</span>        File f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/LOLFolder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f1的绝对路径："</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 相对路径,相对于工作目录，如果在eclipse中，就是项目目录</span>        File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f2的绝对路径："</span> <span class="token operator">+</span> f2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把f1作为父目录创建文件对象</span>        File f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> <span class="token string">"LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f3的绝对路径："</span> <span class="token operator">+</span> f3<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件常用方法"><a href="#文件常用方法" class="headerlink" title="文件常用方法"></a>文件常用方法</h4><p>exists():文件是否存在<br>isDirectory()：是否是文件夹<br>isFile()：是否是文件夹(非文件夹)<br>length()：文件长度<br>getParentFile():获取文件所在的目录（这个文件的父文件）<br>lastModified()：文件最后修改时间<br>setLastModified(0)：设置文件修改时间为1970.1.1 08:00:00<br>File f = new File(“d:/LOLFolder/skin/garen.ski”);<br>f.list()：以字符串数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）<br>mkdir()：创建文件夹，如果父文件夹skin不存在，创建无效<br>mkdirs()：创建文件夹，如果父文件夹skin不存在，就会创建父文件夹<br>createNewFile()：创建一个空文件,如果父文件夹skin不存在，就会抛出异常<br>listRoots()：列出所有的盘符c: d: e: 等等<br>delete()：刪除文件<br>f.deleteOnExit()：JVM结束的时候，刪除文件，常用于临时文件的删除<br>File[]fs= f.listFiles()：以文件数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</p><p><font color="red">注意1： 需要在D:\LOLFolder确实存在一个LOL.exe,才可以看到对应的文件长度、修改时间等信息</font><br><font color="red">注意2： renameTo方法用于对物理文件名称进行修改，但是并不会修改File对象的name属性。</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> file<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/LOLFolder/LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前文件是："</span> <span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件是否存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断是否存在："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否是文件夹</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断是否是文件夹："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否是文件（非文件夹）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断是否是文件："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件长度</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取文件的长度："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件最后修改时间</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取文件的最后修改时间："</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置文件修改时间为1970.1.1 08:00:00</span>        f<span class="token punctuation">.</span><span class="token function">setLastModified</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件重命名</span>        File f2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/LOLFolder/DOTA.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"把LOL.exe改名成了DOTA.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注意： 需要在D:\\LOLFolder确实存在一个LOL.exe,\r\n才可以看到对应的文件长度、修改时间等信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流的定义"><a href="#流的定义" class="headerlink" title="流的定义"></a>流的定义</h3><h4 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h4><p>当不同的介质之间有数据交互的时候，JAVA就使用流来实现。<br>数据源可以是文件，还可以是数据库，网络甚至是其他的程序</p><p>比如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流<br>输入流： InputStream<br>输出流：OutputStream<br><img src="http://stepimagewm.how2j.cn/759.png" alt></p><h4 id="文件输入流"><a href="#文件输入流" class="headerlink" title="文件输入流"></a>文件输入流</h4><p>建立了一个文件输入流，这个流可以用来把数据从硬盘的文件，读取到JVM(内存)。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建基于文件的输入流</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过这个输入流，就可以把数据从硬盘，读取到Java的虚拟机中来，也就是读取到内存中</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件输出流用:FileOutputStream</p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="以字节流的形式读取文件内容"><a href="#以字节流的形式读取文件内容" class="headerlink" title="以字节流的形式读取文件内容"></a>以字节流的形式读取文件内容</h4><p>InputStream是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileInputStream 是InputStream子类，以FileInputStream 为例进行文件读取</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//准备文件lol.txt其中的内容是AB，对应的ASCII分别是65 66</span>            File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建基于文件的输入流</span>            FileInputStream fis <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建字节数组，其长度就是文件的长度</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//以字节流的形式读取文件所有内容</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//打印出来是65 66</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//每次使用完流，都应该进行关闭</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="以字节流的形式向文件写入数据"><a href="#以字节流的形式向文件写入数据" class="headerlink" title="以字节流的形式向文件写入数据"></a>以字节流的形式向文件写入数据</h4><p>OutputStream是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileOutputStream 是OutputStream子类，以FileOutputStream 为例向文件写出数据</p><p><font color="red">注: 如果文件d:/lol2.txt不存在，写出操作会自动创建该文件。但是如果是文件 d:/xyz/lol2.txt，而目录xyz又不存在，会抛出异常<br></font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 准备文件lol2.txt其中的内容是空的</span>            File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 准备长度是2的字节数组，用88,89初始化，其对应的字符分别是X,Y</span>            <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建基于文件的输出流</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把数据写入到输出流</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 关闭输出流</span>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写入数据到文件"><a href="#写入数据到文件" class="headerlink" title="写入数据到文件"></a>写入数据到文件</h4><p>以字节流的形式向文件写入数据 中的例子，当lol2.txt不存在的时候，是会自动创建lol2.txt文件的。<br>但是，如果是写入数据到d:/xyz/lol2.txt，而目录xyz又不存在的话，就会抛出异常。<br>那么怎么自动创建xyz目录？<br>如果是多层目录 d:/xyz/abc/def/lol2.txt 呢？</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/xyz/abc/def/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为默认情况下，文件系统中不存在 d:\xyz\abc\def，所以输出会失败</span>            <span class="token comment" spellcheck="true">//首先获取文件所在的目录</span>            File dir <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果该目录不存在，则创建该目录</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//              dir.mkdir(); //使用mkdir会抛出异常，因为该目录的父目录也不存在</span>                dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用mkdirs则会把不存在的目录都创建好</span>            <span class="token punctuation">}</span>            <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拆分文件"><a href="#拆分文件" class="headerlink" title="拆分文件"></a>拆分文件</h4><p>找到一个大于100k的文件，按照100k为单位，拆分成多个子文件，并且以编号作为文件名结束。<br>比如文件 eclipse.exe，大小是309k。<br>拆分之后，成为<br>eclipse.exe-0<br>eclipse.exe-1<br>eclipse.exe-2<br>eclipse.exe-3<br>拆分的思路，先把源文件的所有内容读取到内存中，然后从内存中挨个分到子文件里<br>提示，这里用到了数组复制Arrays.copyOfRange</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> eachSize <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100k</span>        File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/eclipse.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">splitFile</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> eachSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 拆分的思路，先把源文件的所有内容读取到内存中，然后从内存中挨个分到子文件里     * @param srcFile 要拆分的源文件     * @param eachSize 按照这个大小，拆分     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">splitFile</span><span class="token punctuation">(</span>File srcFile<span class="token punctuation">,</span> <span class="token keyword">int</span> eachSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> srcFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"文件长度为0，不可拆分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> srcFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先把文件读取到数组中</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 计算需要被划分成多少份子文件</span>        <span class="token keyword">int</span> fileNumber<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件是否能被整除得到的子文件个数是不一样的</span>        <span class="token comment" spellcheck="true">// (假设文件长度是25，每份的大小是5，那么就应该是5个)</span>        <span class="token comment" spellcheck="true">// (假设文件长度是26，每份的大小是5，那么就应该是6个)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> fileContent<span class="token punctuation">.</span>length <span class="token operator">%</span> eachSize<span class="token punctuation">)</span>            fileNumber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fileContent<span class="token punctuation">.</span>length <span class="token operator">/</span> eachSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            fileNumber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fileContent<span class="token punctuation">.</span>length <span class="token operator">/</span> eachSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fileNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String eachFileName <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>            File eachFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eachFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> eachContent<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 从源文件的内容里，复制部分数据到子文件</span>            <span class="token comment" spellcheck="true">// 除开最后一个文件，其他文件大小都是100k</span>            <span class="token comment" spellcheck="true">// 最后一个文件的大小是剩余的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> fileNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不是最后一个</span>                eachContent <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">,</span> eachSize <span class="token operator">*</span> i<span class="token punctuation">,</span> eachSize <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 最后一个</span>                eachContent <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">,</span> eachSize <span class="token operator">*</span> i<span class="token punctuation">,</span> fileContent<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 写出去</span>                FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>eachFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>eachContent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 记得关闭</span>                fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输出子文件%s，其大小是 %d字节%n"</span><span class="token punctuation">,</span> eachFile<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eachFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h4><p>与拆分文件不同(先把所有数据读取到内存中)，合并文件采用另一种思路。</p><p>这种思路，不需要把所有的子文件都先读取到内存中，而是一边读取子文件的内容，一边写出到目标文件</p><p>即从eclipse.exe-0开始，读取到一个文件，就开始写出到 eclipse.exe中，然后处理eclipse.exe-1eclipse.exe-2 eclipse.exe-3 … 直到没有文件可以读</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>DestroyFailedException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">murgeFile</span><span class="token punctuation">(</span><span class="token string">"d:/"</span><span class="token punctuation">,</span> <span class="token string">"eclipse.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 合并的思路，就是从eclipse.exe-0开始，读取到一个文件，就开始写出到 eclipse.exe中，直到没有文件可以读     * @param folder     *            需要合并的文件所处于的目录     * @param fileName     *            需要合并的文件的名称     * @throws FileNotFoundException     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">murgeFile</span><span class="token punctuation">(</span>String folder<span class="token punctuation">,</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 合并的目标文件</span>            File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//子文件</span>                File eachFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> fileName <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果子文件不存在了就结束</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eachFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//读取子文件的内容</span>                FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>eachFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> eachContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> eachFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>eachContent<span class="token punctuation">)</span><span class="token punctuation">;</span>                fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把子文件的内容写出去</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>eachContent<span class="token punctuation">)</span><span class="token punctuation">;</span>                fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"把子文件 %s写出到目标文件中%n"</span><span class="token punctuation">,</span>eachFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最后目标文件的大小：%,d字节"</span> <span class="token punctuation">,</span> destFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> I/O </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常--Java</title>
      <link href="/2019/08/06/java-yi-chang/"/>
      <url>/2019/08/06/java-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常部分的知识"><a href="#Java异常部分的知识" class="headerlink" title="Java异常部分的知识"></a>Java异常部分的知识</h1><h3 id="异常定义："><a href="#异常定义：" class="headerlink" title="异常定义："></a>异常定义：</h3><p>导致程序的正常流程被中断的事件，叫做异常</p><h3 id="常见异常："><a href="#常见异常：" class="headerlink" title="常见异常："></a>常见异常：</h3><p>ParseException ：解析异常，日期字符串转换为日期对象的时候，有可能抛出的异常<br>OutOfIndexException ：数组下标越界异常<br>OutOfMemoryError ：内存不足<br>ClassCastException ：类型转换异常<br>ArithmeticException ：除数为零<br>NullPointerException ：空指针异常</p><h3 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h3><p>异常处理常见手段： try catch finally throws</p><h4 id="一：try-catch"><a href="#一：try-catch" class="headerlink" title="一：try catch"></a>一：try catch</h4><ol><li>将可能抛出FileNotFoundException 文件不存在异常的代码放在try里</li><li>如果文件存在，就会顺序往下执行，并且不执行catch块中的代码</li><li>如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中</li><li>e.printStackTrace(); 会打印出方法的调用痕迹</li></ol><h4 id="二：使用异常的父类进行catch"><a href="#二：使用异常的父类进行catch" class="headerlink" title="二：使用异常的父类进行catch"></a>二：使用异常的父类进行catch</h4><ol><li>FileNotFoundException是Exception的子类，使用Exception也可以catch住FileNotFoundException<h4 id="三：多异常捕捉办法"><a href="#三：多异常捕捉办法" class="headerlink" title="三：多异常捕捉办法"></a>三：多异常捕捉办法</h4>有的时候一段代码会抛出多种异常<pre><code> new FileInputStream(f); Date d = sdf.parse(&quot;2016-06-03&quot;);</code></pre>这段代码，会抛出 文件不存在异常 FileNotFoundException 和 解析异常ParseException<br>解决办法之一是分别进行catch<pre><code> catch (FileNotFoundException e) {     System.out.println(&quot;d:/LOL.exe不存在&quot;);     e.printStackTrace(); } catch (ParseException e) {     System.out.println(&quot;日期格式解析错误&quot;);     e.printStackTrace(); }</code></pre>另外的一个方法是把多个异常放在一个catch里面一起捕捉<pre><code> catch (FileNotFoundException | ParseException e)</code></pre>不足之处是，一旦发生异常，不能确定到底是哪种异常，需要通过instanceof 进行判断具体的异常类型<pre><code> if (e instanceof FileNotFoundException)     System.out.println(&quot;d:/LOL.exe不存在&quot;); if (e instanceof ParseException)     System.out.println(&quot;日期格式解析错误&quot;);</code></pre></li></ol><h4 id="四：finally"><a href="#四：finally" class="headerlink" title="四：finally"></a>四：finally</h4><p>无论是否出现异常，finally中的代码都会被执行</p><h4 id="五：throws"><a href="#五：throws" class="headerlink" title="五：throws"></a>五：throws</h4><p>考虑如下情况：主方法调用method1，method1调用method2，method2中打开文件<br>method2中需要进行异常处理，但是method2不打算处理，而是把这个异常通过throws抛出去<br>那么method1就会接到该异常。 处理办法也是两种，要么是try catch处理掉，要么也是抛出去。<br>method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，<br>主方法在调用method1的时候，就不需要进行异常处理了</p><h4 id="六：throw和throws的区别"><a href="#六：throw和throws的区别" class="headerlink" title="六：throw和throws的区别"></a>六：throw和throws的区别</h4><p>throws与throw这两个关键字接近，不过意义不一样，有如下区别：</p><ol><li>throws 出现在方法声明上，而throw通常都出现在方法体内。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</li></ol><h3 id="异常分类："><a href="#异常分类：" class="headerlink" title="异常分类："></a>异常分类：</h3><p>可查异常，运行时异常和错误3种<br>其中，运行时异常和错误又叫非可查异常</p><h4 id="一：可查异常"><a href="#一：可查异常" class="headerlink" title="一：可查异常"></a>一：可查异常</h4><p>可查异常： CheckedException<br>可查异常即必须进行处理的异常，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException<br>如果不处理，编译器，就不让你通过</p><h4 id="二：运行时异常"><a href="#二：运行时异常" class="headerlink" title="二：运行时异常"></a>二：运行时异常</h4><p>运行时异常RuntimeException指： 不是必须进行try catch的异常<br>常见运行时异常: 除数不能为0异常:ArithmeticException ，下标越界异常:ArrayIndexOutOfBoundsException ，空指针异常:NullPointerException<br>在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，即便不进行try catch，也不会有编译错误<br>Java之所以会设计运行时异常的原因之一，是因为下标越界，空指针这些运行时异常太过于普遍，如果都需要进行捕捉，代码的可读性就会变得很糟糕。</p><h4 id="三：错误"><a href="#三：错误" class="headerlink" title="三：错误"></a>三：错误</h4><p>错误Error，指的是系统级别的异常，通常是内存用光了在默认设置下，一般java程序启动的时候，最大可以使用16m的内存如例不停的给StringBuffer追加字符，很快就把内存使用光了。抛出OutOfMemoryError与运行时异常一样，错误也是不要求强制捕捉的</p><h4 id="四：三种分类"><a href="#四：三种分类" class="headerlink" title="四：三种分类"></a>四：三种分类</h4><p>总体上异常分三类： </p><ol><li>错误</li><li>运行时异常</li><li>可查异常<br><img src="http://stepimagewm.how2j.cn/2412.png" alt><h4 id="五：运行时异常与非运行时异常的区别？"><a href="#五：运行时异常与非运行时异常的区别？" class="headerlink" title="五：运行时异常与非运行时异常的区别？"></a>五：运行时异常与非运行时异常的区别？</h4>运行时异常是不可查异常，不需要进行显式的捕捉<br>非运行时异常是可查异常，必须进行显式的捕捉，或者抛出</li></ol><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>Throwable是类，Exception和Error都继承了该类,所以在捕捉的时候，也可以使用Throwable进行捕捉<br>如图： 异常分Error和Exception,Exception里又分运行时异常和可查异常。<br><img src="http://stepimagewm.how2j.cn/742.png" alt></p><h4 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h4><p>一个英雄攻击另一个英雄的时候，如果发现另一个英雄已经挂了，就会抛出EnemyHeroIsDeadException<br>创建一个类EnemyHeroIsDeadException，并继承Exception<br>提供两个构造方法</p><ol><li><p>无参的构造方法</p></li><li><p>带参的构造方法，并调用父类的对应的构造方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">EnemyHeroIsDeadException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token function">EnemyHeroIsDeadException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token function">EnemyHeroIsDeadException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="抛出自定义异常"><a href="#抛出自定义异常" class="headerlink" title="抛出自定义异常"></a>抛出自定义异常</h4><p>在Hero的attack方法中，当发现敌方英雄的血量为0的时候，抛出该异常</p></li><li><p>创建一个EnemyHeroIsDeadException实例</p></li><li><p>通过throw 抛出该异常</p></li><li><p>当前方法通过 throws 抛出该异常<br>在外部调用attack方法的时候，就需要进行捕捉，并且捕捉的时候，可以通过e.getMessage() 获取当时出错的具体原因</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> charactor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> String name<span class="token punctuation">;</span> <span class="token keyword">protected</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackHero</span><span class="token punctuation">(</span>Hero h<span class="token punctuation">)</span> <span class="token keyword">throws</span> EnemyHeroIsDeadException<span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EnemyHeroIsDeadException</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 已经挂了,不需要施放技能"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">EnemyHeroIsDeadException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token function">EnemyHeroIsDeadException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token function">EnemyHeroIsDeadException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Hero garen <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     garen<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"盖伦"</span><span class="token punctuation">;</span>     garen<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">616</span><span class="token punctuation">;</span>     Hero teemo <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     teemo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"提莫"</span><span class="token punctuation">;</span>     teemo<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         garen<span class="token punctuation">.</span><span class="token function">attackHero</span><span class="token punctuation">(</span>teemo<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EnemyHeroIsDeadException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常的具体原因:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="以上内容是在-http-how2j-cn-学习的时候的记录"><a href="#以上内容是在-http-how2j-cn-学习的时候的记录" class="headerlink" title="以上内容是在(http://how2j.cn) 学习的时候的记录"></a>以上内容是在(<a href="http://how2j.cn" target="_blank" rel="noopener">http://how2j.cn</a>) 学习的时候的记录</h5></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8的安装</title>
      <link href="/2019/08/02/wo-de-bo-ke-zhu-ti/"/>
      <url>/2019/08/02/wo-de-bo-ke-zhu-ti/</url>
      
        <content type="html"><![CDATA[<p>想看更加完整的教程可以在下面的视频上面观看<br><a href="https://www.bilibili.com/video/av24331238" target="_blank" rel="noopener">原教程视频</a><br>打开MySQL的官网：<a href="https://www.mysql.com/" target="_blank" rel="noopener">mysql官网</a><br><img src="https://s2.ax1x.com/2019/08/06/efFrWj.png" alt></p><center>直接选择下载，接下来的基本按照图片步骤来就OK了</center><p><img src="https://s2.ax1x.com/2019/08/06/efFJSA.png" alt><br><img src="https://s2.ax1x.com/2019/08/06/efFNOP.png" alt><br><img src="https://s2.ax1x.com/2019/08/06/efFYQI.jpg" alt><br><img src="https://s2.ax1x.com/2019/08/06/efFtyt.jpg" alt><br><img src="https://s2.ax1x.com/2019/08/06/efF8Wd.png" alt><br><img src="https://s2.ax1x.com/2019/08/06/efFaef.jpg" alt><br><img src="https://s2.ax1x.com/2019/08/06/efFdw8.jpg" alt><br><img src="https://s2.ax1x.com/2019/08/06/efFwTS.jpg" alt><br><img src="https://s2.ax1x.com/2019/08/06/efFBFg.png" alt><br><img src="https://s2.ax1x.com/2019/08/06/efFDYQ.png" alt></p><center>中间有的步骤没有截图，但是基本都是next即可</center>]]></content>
      
      
      
        <tags>
            
            <tag> 软件安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/02/hello-world/"/>
      <url>/2019/08/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
